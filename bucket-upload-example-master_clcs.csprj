
<codestructure version="1.11.1">
<phptree>
<treenode node="ActivationStrategyInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ActivationStrategyInterface.php;f0;18;1;24;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ActivationStrategyInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface for activation strategies for the FingersCrossedHandler.&#10;&lt;b&gt;author&lt;/b&gt;: Johannes M. Schmitt &lt;schmittjoh&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="isHandlerActivated;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ActivationStrategyInterface.php;f11;23;59;23;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns whether the given record activates the handler.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="BodySummarizerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\BodySummarizerInterface.php;f0;6;1;12;;;;vpos;;v;;a;;r;;d0,7;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="summarize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\BodySummarizerInterface.php;f11;11;57;11;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a summarized message body.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;p;;x">
</treenode>
</treenode>
<treenode node="CRCInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCInterface.php;f0;25;1;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface CRCInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    CRC calculation interface.&#10;Lots of great info on the different algorithms used:&#10;https://create.stephan-brumme.com/crc32/;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCInterface.php;f11;50;44;50;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the current calculated CRC hash.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    boolean &lt;b&gt;$raw_output&lt;/b&gt;: When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a string containing the calculated CRC as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the CRC is returned.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lboolean $raw_output;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCInterface.php;f11;37;27;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resets the CRC calculation.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCInterface.php;f11;32;33;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the CRC calculation with the supplied data.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$data&lt;/b&gt;: The data;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $data;;p;;x">
</treenode>
<treenode node="version;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCInterface.php;f11;57;29;57;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns information about the CRC implementation and polynomial.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="CacheException;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheException.php;f0;7;1;9;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface CacheException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception interface for all exceptions thrown by an Implementing Library.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="CacheItemInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f0;23;1;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface CacheItemInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    CacheItemInterface defines an interface for interacting with objects inside a cache.&#10;Each Item object MUST be associated with a specific key, which can be set&#10;according to the implementing system and is typically passed by the&#10;Cache\CacheItemPoolInterface object.&#10;The Cache\CacheItemInterface object encapsulates the storage and retrieval of&#10;cache items. Each Cache\CacheItemInterface is generated by a&#10;Cache\CacheItemPoolInterface object, which is responsible for any required&#10;setup as well as associating the object with a unique Key.&#10;Cache\CacheItemInterface objects MUST be able to store and retrieve any type&#10;of PHP value defined in the Data section of the specification.&#10;Calling Libraries MUST NOT instantiate Item objects themselves. They may only&#10;be requested from a Pool object via the getItem() method.  Calling Libraries&#10;SHOULD NOT assume that an Item created by one Implementing Library is&#10;compatible with a Pool from another Implementing Library.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="expiresAfter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f11;103;39;103;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the expiration time for this cache item.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|\DateInterval|null &lt;b&gt;$time&lt;/b&gt;: The period of time from the present after which the item MUST be considered expired. An integer parameter is understood to be the time in seconds until expiration. If null is passed explicitly, a default value MAY be used. If none is set, the value should be stored permanently or for as long as the implementation allows.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The called object.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lint|\DateInterval|null $time;;p;;x">
</treenode>
<treenode node="expiresAt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f11;88;42;88;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the expiration time for this cache item.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \DateTimeInterface|null &lt;b&gt;$expiration&lt;/b&gt;: The point in time after which the item MUST be considered expired. If null is passed explicitly, a default value MAY be used. If none is set, the value should be stored permanently or for as long as the implementation allows.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The called object.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l\DateTimeInterface|null $expiration;;p;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f11;48;25;48;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the value of the item from the cache associated with this object&apos;s key.&#10;The value returned must be identical to the value originally stored by set().&#10;If isHit() returns false, this method MUST return null. Note that null&#10;is a legitimate cached value, so the isHit() method SHOULD be used to&#10;differentiate between &quot;null value was found&quot; and &quot;no value was found.&quot;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The value corresponding to this cache item&apos;s key, or null if not found.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f11;34;28;34;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the key for the current cache item.&#10;The key is loaded by the Implementing Library, but should be available to&#10;the higher level callers when needed.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The key string for this cache item.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isHit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f11;59;27;59;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Confirms if the cache item lookup resulted in a cache hit.&#10;Note: This method MUST NOT have a race condition between calling isHit()&#10;and calling get().&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if the request resulted in a cache hit. False otherwise.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="set;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemInterface.php;f11;74;31;74;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the value represented by this cache item.&#10;The $value argument may be any item that can be serialized by PHP,&#10;although the method of serialization is left up to the Implementing&#10;Library.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The serializable value to be stored.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The invoked object.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
</treenode>
<treenode node="CacheItemPoolInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f0;13;1;137;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface CacheItemPoolInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    CacheItemPoolInterface generates CacheItemInterface objects.&#10;The primary purpose of Cache\CacheItemPoolInterface is to accept a key from&#10;the Calling Library and return the associated Cache\CacheItemInterface object.&#10;It is also the primary point of interaction with the entire cache collection.&#10;All configuration and initialization of the Pool is left up to an&#10;Implementing Library.;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;76;27;76;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Deletes all items in the pool.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if the pool was successfully cleared. False if there was an error.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="commit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;136;28;136;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Persists any deferred cache items.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if all not-yet-saved items were successfully saved or there were none. False otherwise.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="deleteItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;91;36;91;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes the item from the pool.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;If the $key string is not a legal value a \Psr\Cache\InvalidArgumentException&#10;MUST be thrown.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;: The key to delete.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if the item was successfully removed. False if there was an error.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="deleteItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;106;44;106;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes multiple items from the pool.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;If any of the keys in $keys are not a legal value a \Psr\Cache\InvalidArgumentException&#10;MUST be thrown.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[] &lt;b&gt;$keys&lt;/b&gt;: An array of keys that should be removed from the pool.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if the items were successfully removed. False if there was an error.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring[] $keys;;p;;x">
</treenode>
<treenode node="getItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;31;33;31;;;;vpos;;v;;aCacheItemInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a Cache Item representing the specified key.&#10;This method must always return a CacheItemInterface object, even in case of&#10;a cache miss. It MUST NOT return null.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;If the $key string is not a legal value a \Psr\Cache\InvalidArgumentException&#10;MUST be thrown.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;: The key for which to return the corresponding Cache Item.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The corresponding Cache Item.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="getItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;49;51;49;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a traversable set of cache items.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;If any of the keys in $keys are not a legal value a \Psr\Cache\InvalidArgumentException&#10;MUST be thrown.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[] &lt;b&gt;$keys&lt;/b&gt;: An indexed array of keys of items to retrieve.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |\Traversable A traversable collection of Cache Items keyed by the cache keys of each item. A Cache item will be returned for each key, even if that key is not found. However, if no keys are specified then an empty traversable MUST be returned instead.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring[] $keys;;p;;x">
</treenode>
<treenode node="hasItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;68;33;68;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Confirms if the cache contains specified cache item.&#10;Note: This method MAY avoid retrieving the cached value for performance reasons.&#10;This could result in a race condition with CacheItemInterface::get(). To avoid&#10;such situation use CacheItemInterface::isHit() instead.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;If the $key string is not a legal value a \Psr\Cache\InvalidArgumentException&#10;MUST be thrown.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;: The key for which to check existence.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if item exists in the cache, false otherwise.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;117;50;117;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Persists a cache item immediately.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    CacheItemInterface &lt;b&gt;$item&lt;/b&gt;: The cache item to save.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if the item was successfully persisted. False if there was an error.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lCacheItemInterface $item;;p;;x">
</treenode>
<treenode node="saveDeferred;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\CacheItemPoolInterface.php;f11;128;58;128;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a cache item to be persisted later.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    CacheItemInterface &lt;b&gt;$item&lt;/b&gt;: The cache item to save.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   False if the item could not be queued or if a commit was attempted and failed. True otherwise.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lCacheItemInterface $item;;p;;x">
</treenode>
</treenode>
<treenode node="ClientExceptionInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\ClientExceptionInterface.php;f0;7;1;9;;;;vpos;;v;;aThrowable;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ClientExceptionInterface extends \Throwable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Every HTTP client related exception MUST implement this interface.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ClientInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\ClientInterface.php;f0;7;1;19;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f0;13;1;83;;;;vpos;;v;;a;;r;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="MAJOR_VERSION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f9;18;23;18;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The Guzzle major version.;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f11;82;53;82;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a client configuration option.&#10;These options include default request options of the client, a &quot;handler&quot;&#10;(if utilized by the concrete client), and a &quot;base_uri&quot; if utilized by&#10;the concrete client.&#10;&lt;b&gt;deprecated&lt;/b&gt;: ClientInterface::getConfig will be removed in guzzlehttp/guzzle:8.0.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$option&lt;/b&gt;: The config option to retrieve.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $option;;p;;x">
</treenode>
<treenode node="request;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f11;53;89;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method.&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="requestAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f11;67;93;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f11;29;91;29;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an HTTP request.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request to send&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply to the given request and to the transfer.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="sendAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientInterface.php;f11;38;95;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Asynchronously send an HTTP request.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request to send&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply to the given request and to the transfer.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="sendRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\ClientInterface.php;f11;18;77;18;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends a PSR-7 request and returns a PSR-7 response.&#10;&lt;b&gt;throws&lt;/b&gt;: \Psr\Http\Client\ClientExceptionInterface If an error happens while processing the request.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;p;;x">
</treenode>
</treenode>
<treenode node="ClosureSerializerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ClosureSerializerInterface.php;f0;27;1;42;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ClosureSerializerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface for serializing closures.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="unwrapClosures;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ClosureSerializerInterface.php;f11;41;42;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Recursively unserializes closures.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $data;;p;;x">
</treenode>
<treenode node="wrapClosures;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ClosureSerializerInterface.php;f11;34;40;34;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Recursively serializes closures.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $data;;p;;x">
</treenode>
</treenode>
<treenode node="ConfigStorageInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ConfigStorageInterface.php;f0;27;1;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ConfigStorageInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface for storing the configuration.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ConfigStorageInterface.php;f11;61;27;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear the JobConfig from storage.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="load;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ConfigStorageInterface.php;f11;56;26;56;;;;vpos;;v;;aJobConfig;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    loads the JobConfig from the storage&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when failed to load the JobConfig.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="lock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ConfigStorageInterface.php;f11;34;26;34;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    locks the storage;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ConfigStorageInterface.php;f11;48;43;48;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    saves the JobConfig to the storage&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    JobConfig &lt;b&gt;$config&lt;/b&gt;: A JobConfig to save.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true on success, false on failure;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lJobConfig $config;;p;;x">
</treenode>
<treenode node="unlock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ConfigStorageInterface.php;f11;41;28;41;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    releases the lock;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ConnectionInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f0;23;1;189;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ConnectionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a connection to&#10;[Cloud Storage](https://cloud.google.com/storage/).;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="composeObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;108;51;108;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="copyObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;98;48;98;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="createHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;168;51;168;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;28;47;28;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;53;50;53;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;173;51;173;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;143;56;143;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;93;50;93;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="downloadObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;128;52;128;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;33;44;33;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;58;47;58;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getBucketIamPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;73;51;73;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;178;48;178;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;138;53;138;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;113;47;113;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getServiceAccount;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;158;55;158;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;43;47;43;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;68;50;68;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;148;56;148;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;133;50;133;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;38;45;38;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listBuckets;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;63;49;63;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listHmacKeys;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;188;50;188;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listNotifications;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;153;55;153;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listObjects;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;118;49;118;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="lockRetentionPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;163;57;163;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="patchAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;48;46;48;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="patchBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;88;49;88;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="patchObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;123;49;123;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="rewriteObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;103;51;103;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="setBucketIamPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;78;51;78;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="testBucketIamPermissions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;83;57;83;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="updateHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\ConnectionInterface.php;f11;183;51;183;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
</treenode>
<treenode node="CookieJarInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f0;18;1;78;;;;vpos;;v;;aCountable;;cIteratorAggregate;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface CookieJarInterface extends \Countable, \IteratorAggregate&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores HTTP cookies.&#10;It extracts cookies from HTTP requests, and returns them in HTTP responses.&#10;CookieJarInterface instances automatically expire contained cookies when&#10;necessary. Subclasses are also responsible for storing and retrieving&#10;cookies from a file, database, etc.&#10;&lt;b&gt;link&lt;/b&gt;: https://docs.python.org/2/library/cookielib.html Inspiration&#10;&lt;b&gt;extends&lt;/b&gt;: \IteratorAggregate&lt;SetCookie&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f11;63;99;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Remove cookies currently held in the cookie jar.&#10;Invoking this method without arguments will empty the whole cookie jar.&#10;If given a $domain argument only cookies belonging to that domain will&#10;be removed. If given a $domain and $path argument, cookies belonging to&#10;the specified path within that domain are removed. If given all three&#10;arguments, then the cookie with the specified name, path and domain is&#10;removed.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$domain&lt;/b&gt;: Clears cookies matching a domain&#10;    string|null &lt;b&gt;$path&lt;/b&gt;: Clears cookies matching a domain and path&#10;    string|null &lt;b&gt;$name&lt;/b&gt;: Clears cookies matching a domain, path, and name;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $domain;;pstring|null $path;;pstring|null $name;;p;;x;;x;;x">
</treenode>
<treenode node="clearSessionCookies;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f11;72;47;72;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Discard all sessions cookies.&#10;Removes cookies that don&apos;t have an expire field or a have a discard&#10;field set to true. To be called when the user agent shuts down according&#10;to RFC 2965.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="extractCookies;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f11;38;96;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Extract cookies from an HTTP response and store them in the CookieJar.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request that was sent&#10;    ResponseInterface &lt;b&gt;$response&lt;/b&gt;: Response that was received;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;pResponseInterface $response;;p;;x;;x">
</treenode>
<treenode node="setCookie;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f11;47;54;47;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a cookie in the cookie jar.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    SetCookie &lt;b&gt;$cookie&lt;/b&gt;: Cookie to set.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns true on success or false on failure;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lSetCookie $cookie;;p;;x">
</treenode>
<treenode node="toArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f11;77;36;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts the cookie jar to an array.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withCookieHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJarInterface.php;f11;30;81;30;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a request with added cookie headers.&#10;If no matching cookies are found in the cookie jar, then no Cookie&#10;header is added to the request and the same request is returned.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request object to modify.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   returns the modified request.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;p;;x">
</treenode>
</treenode>
<treenode node="CurlFactoryInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactoryInterface.php;f0;6;1;24;;;;vpos;;v;;a;;r;;d0,7;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="create;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactoryInterface.php;f11;16;81;16;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a cURL handle resource.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when an option cannot be applied&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request&#10;    array &lt;b&gt;$options&lt;/b&gt;: Transfer options;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactoryInterface.php;f11;23;51;23;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Release an easy handle, allowing it to be reused or closed.&#10;This function must call unset on the easy handle&apos;s &quot;handle&quot; property.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;leasy;;p;;x">
</treenode>
</treenode>
<treenode node="DataIterator.php;PHP:PHP Include;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f9;22;25;22;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FetchAuthTokenInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenInterface.php;f0;22;1;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface FetchAuthTokenInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface implemented by objects that can fetch auth tokens.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenInterface.php;f11;30;64;30;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches the auth tokens based on the current state.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   a hash of auth tokens;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenInterface.php;f11;39;33;39;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains a key that can used to cache the results of #fetchAuthToken.&#10;If the value is empty, the auth token is not cached.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   a key that may be used to cache the auth token.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenInterface.php;f11;52;42;52;;;;vposint;;v;;a;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="FormattableHandlerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerInterface.php;f0;20;1;36;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface to describe loggers that have a formatter&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerInterface.php;f11;35;54;35;;;;vpos;;v;;aFormatterInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the formatter.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerInterface.php;f11;28;81;28;;;;vpos;;v;;aHandlerInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the formatter.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FormatterInterface &lt;b&gt;$formatter&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   self;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lFormatterInterface $formatter;;p;;x">
</treenode>
</treenode>
<treenode node="FormatterInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FormatterInterface.php;f0;18;1;35;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface for formatters&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FormatterInterface.php;f11;26;41;26;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a log record.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: A record to format&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The formatted record;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FormatterInterface.php;f11;34;47;34;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a set of log records.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$records&lt;/b&gt;: A set of records to format&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The formatted set of records;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $records;;p;;x">
</treenode>
</treenode>
<treenode node="GetQuotaProjectInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GetQuotaProjectInterface.php;f0;22;1;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface GetQuotaProjectInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface implemented by objects that can get quota projects.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="X_GOOG_USER_PROJECT_HEADER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GetQuotaProjectInterface.php;f9;24;36;24;;;;vpos;;v;;a;;r&apos;X-Goog-User-Project&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GetQuotaProjectInterface.php;f11;31;37;31;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the quota project used for this API request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="GuzzleException;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\GuzzleException.php;f0;6;1;8;;;;vpos;;v;;aClientExceptionInterface;;c;;r;;d0,7;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="HandlerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerInterface.php;f0;18;1;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface that all Monolog Handlers must implement&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerInterface.php;f11;74;33;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Closes the handler.&#10;Ends a log cycle and frees all resources used by the handler.&#10;Closing a Handler means flushing all buffers and freeing any open resources/handles.&#10;Implementations have to be idempotent (i.e. it should be possible to call close several times without breakage)&#10;and ideally handlers should be able to reopen themselves on handle() after they have been closed.&#10;This is useful at the end of a request and will be called automatically when the object&#10;is destroyed if you extend Monolog\Handler\Handler.&#10;If you are thinking of calling this method yourself, most likely you should be&#10;calling ResettableInterface::reset instead. Have a look.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerInterface.php;f11;49;47;49;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handles a record.&#10;All records may be passed to this method, and the handler should discard&#10;those that it does not want to handle.&#10;The return value of this function controls the bubbling process of the handler stack.&#10;Unless the bubbling is interrupted (by returning true), the Logger class will keep on&#10;calling further handlers in the stack with a given log record.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: The record to handle&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true means that this handler handled the record, and that bubbling is not permitted. false means the record was either not processed or that this handler allows bubbling.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerInterface.php;f11;56;53;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handles a set of records at once.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$records&lt;/b&gt;: The records to handle (an array of record arrays);;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $records;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerInterface.php;f11;33;51;33;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks whether the given record will be handled by this handler.&#10;This is mostly done for performance reasons, to avoid calling processors for nothing.&#10;Handlers should still check the record levels within handle(), returning false in isHandling()&#10;is no guarantee that handle() will not be called, and isHandling() might not be called&#10;for a given record.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: Partial log record containing only a level key;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="IamConnectionInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\IamConnectionInterface.php;f0;30;1;46;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface IamConnectionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface defining how wrappers interact with their IAM implementations.&#10;Some services, such as PubSub, have multiple entities in their API which each&#10;support IAM for access control. Since we use a single implementation for all&#10;service interaction with a service, IamConnectionInterface is used to proxy&#10;requests to the correct method on the service connection.&#10;By delegating control of the request to each service, we can reliably offer a&#10;single entry point for dealing with IAM in a standard way.;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\IamConnectionInterface.php;f11;35;42;35;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="setPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\IamConnectionInterface.php;f11;40;42;40;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="testPermissions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\IamConnectionInterface.php;f11;45;48;45;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
</treenode>
<treenode node="InvalidArgumentException;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\cache\src\InvalidArgumentException.php;f0;10;1;12;;;;vpos;;v;;aCacheException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface InvalidArgumentException extends CacheException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception interface for invalid cache arguments.&#10;Any time an invalid argument is passed into a method it must throw an&#10;exception class which implements Psr\Cache\InvalidArgumentException.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="JobInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobInterface.php;f0;28;1;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface JobInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The JobInterface represents any job that can be serialized and run in a&#10;separate process via the Batch daemon.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobInterface.php;f11;55;44;55;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finish any pending activity for this job.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$items&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $items;;p;;x">
</treenode>
<treenode node="identifier;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobInterface.php;f11;40;32;40;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the job identifier;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="numWorkers;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobInterface.php;f11;47;32;47;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the number of workers for this job.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobInterface.php;f11;33;25;33;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runs the job loop. This is expected to be a blocking call.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="LockInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockInterface.php;f0;22;1;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface LockInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Contract for a basic locking mechanism.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="acquire;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockInterface.php;f11;36;48;36;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Acquires a lock.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to be acquired.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockInterface.php;f11;43;29;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Releases the lock.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="synchronize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockInterface.php;f11;57;68;57;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Execute a callable within a lock.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$func&lt;/b&gt;: The callable to execute.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $func;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="LoggerAwareInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerAwareInterface.php;f0;7;1;17;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface LoggerAwareInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes a logger-aware instance.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="setLogger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerAwareInterface.php;f11;16;54;16;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a logger instance on the object.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LoggerInterface &lt;b&gt;$logger&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lLoggerInterface $logger;;p;;x">
</treenode>
</treenode>
<treenode node="LoggerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f0;19;1;124;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface LoggerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes a logger instance.&#10;The message MUST be a string or object implementing __toString().&#10;The message MAY contain placeholders in the form: {foo} where foo&#10;will be replaced by the context data in key &quot;foo&quot;.&#10;The context array can contain arbitrary data. The only assumption that&#10;can be made by implementors is that if an Exception instance is given&#10;to produce a stack trace, it MUST be in a key named &quot;exception&quot;.&#10;See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md&#10;for the full interface specification.;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="alert;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;42;61;42;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Action must be taken immediately.&#10;Example: Entire website down, database unavailable, etc. This should&#10;trigger the SMS alerts and wake you up.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="critical;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;54;64;54;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Critical conditions.&#10;Example: Application component unavailable, unexpected exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="debug;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;110;61;110;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detailed debug information.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="emergency;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;29;65;29;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    System is unusable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="error;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;65;61;65;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runtime errors that do not require immediate action but should typically&#10;be logged and monitored.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;100;60;100;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interesting events.&#10;Example: User logs in, SQL logs.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="log;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;123;67;123;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs with an arbitrary level.&#10;&lt;b&gt;throws&lt;/b&gt;: \Psr\Log\InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$level&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $level;;pstring $message;;pmixed[] $context;;p;;x;;x;;x">
</treenode>
<treenode node="notice;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;88;62;88;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normal but significant events.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="warning;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerInterface.php;f11;78;63;78;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exceptional occurrences that are not errors.&#10;Example: Use of deprecated APIs, poor use of an API, undesirable things&#10;that are not necessarily wrong.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
</treenode>
<treenode node="LongRunningConnectionInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningConnectionInterface.php;f0;24;1;45;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface LongRunningConnectionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Defines the calls required to manage Long Running Operations.&#10;This interface should be implemented in a service&apos;s Connection namespace.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningConnectionInterface.php;f11;34;39;34;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningConnectionInterface.php;f11;39;39;39;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningConnectionInterface.php;f11;29;36;29;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="operations;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningConnectionInterface.php;f11;44;43;44;;;;vpos;;v;;a;;r&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
</treenode>
<treenode node="MessageFormatterInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatterInterface.php;f0;7;1;17;;;;vpos;;v;;a;;r;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatterInterface.php;f11;16;125;16;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a formatted message string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request that was sent&#10;    ResponseInterface|null &lt;b&gt;$response&lt;/b&gt;: Response that was received&#10;    \Throwable|null &lt;b&gt;$error&lt;/b&gt;: Exception that was received;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;pResponseInterface|null $response;;p\Throwable|null $error;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="MessageInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f0;16;1;186;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface MessageInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    HTTP messages consist of requests from a client to a server and responses&#10;from a server to a client. This interface defines the methods common to&#10;each.&#10;Messages are considered immutable;s all methods that might change state MUST&#10;be implemented such that they retain the internal state of the current&#10;message and return an instance that contains the changed state.&#10;&lt;b&gt;link&lt;/b&gt;: http://www.ietf.org/rfc/rfc7230.txt&#10;&lt;b&gt;link&lt;/b&gt;: http://www.ietf.org/rfc/rfc7231.txt;;d0,17;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;170;29;170;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the body of the message.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the body as a stream.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;93;36;93;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves a message header value by the given case-insensitive name.&#10;This method returns an array of all the header values of the given&#10;case-insensitive header name.&#10;If the header does not appear in the message, this method MUST return an&#10;empty array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header field name.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [] An array of string values as provided for the given header. If the header does not appear in the message, this method MUST return an empty array.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="getHeaderLine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;114;40;114;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves a comma-separated string of the values for a single header.&#10;This method returns all of the header values of the given&#10;case-insensitive header name as a string concatenated together using&#10;a comma.&#10;NOTE: Not all header values may be appropriately represented using&#10;comma concatenation. For such headers, use getHeader() instead&#10;and supply your own delimiter when concatenating.&#10;If the header does not appear in the message, this method MUST return&#10;an empty string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header field name.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A string of values as provided for the given header concatenated together using a comma. If the header does not appear in the message, this method MUST return an empty string.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="getHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;67;32;67;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves all message header values.&#10;The keys represent the header name as it will be sent over the wire, and&#10;each value is an array of strings associated with the header.&#10;// Represent the headers as a string&#10;foreach ($message-&gt;getHeaders() as $name =&gt; $values) {&#10;echo $name . &quot;: &quot; . implode(&quot;, &quot;, $values);s&#10;}&#10;// Emit headers iteratively:&#10;foreach ($message-&gt;getHeaders() as $name =&gt; $values) {&#10;foreach ($values as $value) {&#10;header(sprintf(&apos;%s: %s&apos;, $name, $value), false);s&#10;}&#10;}&#10;While header names are not case-sensitive, getHeaders() will preserve the&#10;exact case in which headers were originally specified.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [][] Returns an associative array of the message&apos;s headers. Each key MUST be a header name, and each value MUST be an array of strings for that header.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProtocolVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;25;40;25;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the HTTP protocol version as a string.&#10;The string MUST contain only the HTTP version number (e.g., &quot;1.1&quot;, &quot;1.0&quot;).&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   HTTP protocol version.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;77;36;77;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks if a header exists by the given case-insensitive name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header field name.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns true if any header names match the given header name using a case-insensitive string comparison. Returns false if no matching header name is found in the message.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="withAddedHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;149;50;149;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified header appended with the given value.&#10;Existing values for the specified header will be maintained. The new&#10;value(s) will be appended to the existing list. If the header did not&#10;exist previously, it will be added.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;new header and/or value.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid header names or values.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header field name to add.&#10;    string|string[] &lt;b&gt;$value&lt;/b&gt;: Header value(s).;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pstring|string[] $value;;p;;x;;x">
</treenode>
<treenode node="withBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;185;51;185;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified message body.&#10;The body MUST be a StreamInterface object.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return a new instance that has the&#10;new body stream.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException When the body is not valid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$body&lt;/b&gt;: Body.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $body;;p;;x">
</treenode>
<treenode node="withHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;131;45;131;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the provided value replacing the specified header.&#10;While header names are case-insensitive, the casing of the header will&#10;be preserved by this function, and returned from getHeaders().&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;new and/or updated header and value.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid header names or values.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header field name.&#10;    string|string[] &lt;b&gt;$value&lt;/b&gt;: Header value(s).;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pstring|string[] $value;;p;;x;;x">
</treenode>
<treenode node="withProtocolVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;40;49;40;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified HTTP protocol version.&#10;The version string MUST contain only the HTTP version number (e.g.,&#10;&quot;1.1&quot;, &quot;1.0&quot;).&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;new protocol version.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$version&lt;/b&gt;: HTTP protocol version;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $version;;p;;x">
</treenode>
<treenode node="withoutHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\MessageInterface.php;f11;163;40;163;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance without the specified header.&#10;Header resolution MUST be done without case-sensitivity.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that removes&#10;the named header.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header field name to remove.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
</treenode>
<treenode node="MetadataProviderInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderInterface.php;f0;22;1;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface MetadataProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface for provide some metadata for reports.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="labels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderInterface.php;f11;54;28;54;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the labels.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="monitoredResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderInterface.php;f11;30;39;30;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an array representing MonitoredResource.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/logging/docs/reference/v2/rest/v2/MonitoredResource};;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="projectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderInterface.php;f11;36;31;36;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the project id.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="serviceId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderInterface.php;f11;42;31;42;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the service id.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="versionId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderInterface.php;f11;48;31;48;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the version id.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="NetworkExceptionInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\NetworkExceptionInterface.php;f0;13;1;23;;;;vpos;;v;;aClientExceptionInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface NetworkExceptionInterface extends ClientExceptionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Thrown when the request cannot be completed because of network issues.&#10;There is no response object as this exception is thrown when no response has been received.&#10;Example: the target host name can not be resolved or the connection failed.;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\NetworkExceptionInterface.php;f11;22;50;22;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the request.&#10;The request object MAY be a different object from the one passed to ClientInterface::sendRequest();;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ProcessItemInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ProcessItemInterface.php;f0;27;1;46;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ProcessItemInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An interface for processing the items.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ProcessItemInterface.php;f11;45;33;45;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Run the job with the given id.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id of the job.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="submit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\ProcessItemInterface.php;f11;37;41;37;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Submit a job for async processing.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when failed to store the item.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$item&lt;/b&gt;: An item to submit.&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id of the job.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $item;;pint $idNum;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ProcessableHandlerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerInterface.php;f0;20;1;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ProcessableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface to describe loggers that have processors&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="popProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerInterface.php;f11;40;44;40;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes the processor on top of the stack and returns it.&#10;&lt;b&gt;psalm&lt;/b&gt;: -return callable(array): array&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException In case the processor stack is empty;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="pushProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerInterface.php;f11;30;71;30;;;;vpos;;v;;aHandlerInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a processor in the stack.&#10;&lt;b&gt;psalm&lt;/b&gt;: -param ProcessorInterface|callable(array): array $callback&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ProcessorInterface|callable &lt;b&gt;$callback&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   self;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lProcessorInterface|callable $callback;;p;;x">
</treenode>
</treenode>
<treenode node="ProcessorInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\ProcessorInterface.php;f0;18;1;24;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An optional interface to allow labelling Monolog processors.&#10;&lt;b&gt;author&lt;/b&gt;: Nicolas Grekas &lt;p&#10;&lt;b&gt;tchwork&lt;/b&gt;: .com&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\ProcessorInterface.php;f11;23;43;23;;;;vpos;;v;;aarray;;r&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The processed record;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="ProjectIdProviderInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ProjectIdProviderInterface.php;f0;22;1;31;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ProjectIdProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes a Credentials object which supports fetching the project ID.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ProjectIdProviderInterface.php;f11;30;62;30;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the project ID.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
</treenode>
<treenode node="PromiseInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f0;13;1;96;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A promise represents the eventual result of an asynchronous operation.&#10;The primary way of interacting with a promise is through its then method,&#10;which registers callbacks to receive either a promise’s eventual value or&#10;the reason why the promise cannot be fulfilled.&#10;&lt;b&gt;link&lt;/b&gt;: https://promisesaplus.com/;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FULFILLED;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f9;16;19;16;;;;vpos;;v;;a;;r&apos;fulfilled&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PENDING;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f9;15;17;15;;;;vpos;;v;;a;;r&apos;pending&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="REJECTED;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f9;17;18;17;;;;vpos;;v;;a;;r&apos;rejected&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;78;28;78;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cancels the promise if possible.&#10;&lt;b&gt;link&lt;/b&gt;: https://github.com/promises-aplus/cancellation-spec/issues/7;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;53;30;53;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the state of the promise (&quot;pending&quot;, &quot;rejected&quot;, or &quot;fulfilled&quot;).&#10;The three states can be checked against the constants defined on&#10;PromiseInterface: PENDING, FULFILLED, and REJECTED.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="otherwise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;43;51;43;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Appends a rejection handler callback to the promise, and returns a new&#10;promise resolving to the return value of the callback if it is called,&#10;or to its original fulfillment value if the promise is instead&#10;fulfilled.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$onRejected&lt;/b&gt;: Invoked when the promise is rejected.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $onRejected;;p;;x">
</treenode>
<treenode node="reject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;71;35;71;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reject the promise with the given reason.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the promise is already resolved.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $reason;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;62;35;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resolve the promise with the given value.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the promise is already resolved.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="then;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;28;5;31;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Appends fulfillment and rejection handlers to the promise, and returns&#10;a new promise resolving to the return value of the called handler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;: Invoked when the promise fulfills.&#10;    callable &lt;b&gt;$onRejected&lt;/b&gt;: Invoked when the promise is rejected.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $onFulfilled;;pcallable $onRejected;;p;;x;;x">
</treenode>
<treenode node="wait;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromiseInterface.php;f11;95;40;95;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Waits until the promise completes if possible.&#10;Pass $unwrap as true to unwrap the result of the promise, either&#10;returning the resolved value or throwing the rejected exception.&#10;If the promise cannot be waited on, then the promise will be rejected.&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException if the promise has no wait function or if the&#10;promise does not settle after waiting.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$unwrap&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $unwrap;;p;;x">
</treenode>
</treenode>
<treenode node="PromisorInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromisorInterface.php;f0;7;1;15;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface PromisorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface used with classes that return a promise.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="promise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\PromisorInterface.php;f11;14;29;14;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a promise.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ReaderInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\ReaderInterface.php;f0;22;1;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ReaderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Defines a metadata reader implementation.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\ReaderInterface.php;f11;27;31;27;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read metadata from a given path.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lpath;;p;;x">
</treenode>
</treenode>
<treenode node="RequestExceptionInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\RequestExceptionInterface.php;f0;13;1;23;;;;vpos;;v;;aClientExceptionInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface RequestExceptionInterface extends ClientExceptionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception for when a request failed.&#10;Examples:&#10;- Request is invalid (e.g. method is missing)&#10;- Runtime request errors (e.g. the body stream is not seekable);;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-client\src\RequestExceptionInterface.php;f11;22;50;22;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the request.&#10;The request object MAY be a different object from the one passed to ClientInterface::sendRequest();;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="RequestInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f0;23;1;128;;;;vpos;;v;;aMessageInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface RequestInterface extends MessageInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Representation of an outgoing, client-side request.&#10;Per the HTTP specification, this interface includes properties for&#10;each of the following:&#10;- Protocol version&#10;- HTTP method&#10;- URI&#10;- Headers&#10;- Message body&#10;During construction, implementations MUST attempt to set the Host header from&#10;a provided URI if no Host header is provided.&#10;Requests are considered immutable;s all methods that might change state MUST&#10;be implemented such that they retain the internal state of the current&#10;message and return an instance that contains the changed state.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f11;67;31;67;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the HTTP method of the request.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the request method.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRequestTarget;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f11;41;38;41;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the message&apos;s request target.&#10;Retrieves the message&apos;s request-target either as it will appear (for&#10;clients), as it appeared at request (for servers), or as it was&#10;specified for the instance (see withRequestTarget()).&#10;In most cases, this will be the origin-form of the composed URI,&#10;unless a value was provided to the concrete implementation (see&#10;withRequestTarget() below).&#10;If no URI is available, and no request-target has been specifically&#10;provided, this method MUST return the string &quot;/&quot;.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f11;95;28;95;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the URI instance.&#10;This method MUST return a UriInterface instance.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc3986#section-4.3&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a UriInterface instance representing the URI of the request.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f11;84;39;84;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the provided HTTP method.&#10;While HTTP method names are typically all uppercase characters, HTTP&#10;method names are case-sensitive and thus implementations SHOULD NOT&#10;modify the given string.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;changed request method.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid HTTP methods.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: Case-sensitive method.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;p;;x">
</treenode>
<treenode node="withRequestTarget;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f11;60;53;60;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specific request-target.&#10;If the request needs a non-origin-form request-target — e.g., for&#10;specifying an absolute-form, authority-form, or asterisk-form —&#10;this method may be used to create an instance with the specified&#10;request-target, verbatim.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;changed request target.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc7230#section-5.3 (for the various&#10;request-target forms allowed in request messages)&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$requestTarget&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $requestTarget;;p;;x">
</treenode>
<treenode node="withUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\RequestInterface.php;f11;127;69;127;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns an instance with the provided URI.&#10;This method MUST update the Host header of the returned request by&#10;default if the URI contains a host component. If the URI does not&#10;contain a host component, any pre-existing Host header MUST be carried&#10;over to the returned request.&#10;You can opt-in to preserving the original state of the Host header by&#10;setting `$preserveHost` to `true`. When `$preserveHost` is set to&#10;`true`, this method interacts with the Host header in the following ways:&#10;- If the Host header is missing or empty, and the new URI contains&#10;a host component, this method MUST update the Host header in the returned&#10;request.&#10;- If the Host header is missing or empty, and the new URI does not contain a&#10;host component, this method MUST NOT update the Host header in the returned&#10;request.&#10;- If a Host header is present and non-empty, this method MUST NOT update&#10;the Host header in the returned request.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;new UriInterface instance.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc3986#section-4.3&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;: New request URI to use.&#10;    bool &lt;b&gt;$preserveHost&lt;/b&gt;: Preserve the original state of the Host header.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;pbool $preserveHost;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ResettableInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ResettableInterface.php;f0;27;1;33;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ResettableInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler or Processor implementing this interface will be reset when Logger::reset() is called.&#10;Resetting ends a log cycle gets them back to their initial state.&#10;Resetting a Handler or a Processor means flushing/cleaning all buffers, resetting internal&#10;state, and getting it back to a state in which it can receive log records again.&#10;This is useful in case you want to avoid logs leaking between two requests or jobs when you&#10;have a long running process like a worker or an application server serving multiple requests&#10;in one process.&#10;&lt;b&gt;author&lt;/b&gt;: Grégoire Pineau &lt;lyrixx&#10;&lt;b&gt;lyrixx&lt;/b&gt;: .info&gt;;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ResettableInterface.php;f11;32;27;32;;;;vpos;;v;;avoid;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ResponseInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ResponseInterface.php;f0;19;1;67;;;;vpos;;v;;aMessageInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ResponseInterface extends MessageInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Representation of an outgoing, server-side response.&#10;Per the HTTP specification, this interface includes properties for&#10;each of the following:&#10;- Protocol version&#10;- Status code and reason phrase&#10;- Headers&#10;- Message body&#10;Responses are considered immutable;s all methods that might change state MUST&#10;be implemented such that they retain the internal state of the current&#10;message and return an instance that contains the changed state.;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getReasonPhrase;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ResponseInterface.php;f11;66;37;66;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the response reason phrase associated with the status code.&#10;Because a reason phrase is not a required element in a response&#10;status line, the reason phrase value MAY be null. Implementations MAY&#10;choose to return the default RFC 7231 recommended reason phrase (or those&#10;listed in the IANA HTTP Status Code Registry) for the response&apos;s&#10;status code.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc7231#section-6&#10;&lt;b&gt;link&lt;/b&gt;: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Reason phrase;s must return an empty string if none present.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getStatusCode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ResponseInterface.php;f11;29;35;29;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the response status code.&#10;The status code is a 3-digit integer result code of the server&apos;s attempt&#10;to understand and satisfy the request.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Status code.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withStatus;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ResponseInterface.php;f11;51;57;51;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified status code and, optionally, reason phrase.&#10;If no reason phrase is specified, implementations MAY choose to default&#10;to the RFC 7231 or IANA recommended reason phrase for the response&apos;s&#10;status code.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;updated status and reason phrase.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc7231#section-6&#10;&lt;b&gt;link&lt;/b&gt;: http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException For invalid status code arguments.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$code&lt;/b&gt;: The 3-digit integer result code to set.&#10;    string &lt;b&gt;$reasonPhrase&lt;/b&gt;: The reason phrase to use with the provided status code;s if none is provided, implementations MAY use the defaults as suggested in the HTTP specification.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lint $code;;pstring $reasonPhrase;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ScannerInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ScannerInterface.php;f0;25;1;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ScannerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interface ScannerInterface&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="classes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ScannerInterface.php;f11;47;62;47;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a list of classes in the given PHP files.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$files&lt;/b&gt;&#10;    array &lt;b&gt;$exclude&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $files;;parray $exclude;;p;;x;;x">
</treenode>
<treenode node="files;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ScannerInterface.php;f11;35;27;35;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a list of PHP files to scan.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="snippets;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ScannerInterface.php;f11;57;44;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a list of all snippets from the given classes.&#10;\Google\Cloud\Core\Testing\Snippet\Parser\Snippet[]&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lclasses;;p;;x">
</treenode>
</treenode>
<treenode node="ServerRequestInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f0;42;1;260;;;;vpos;;v;;aRequestInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface ServerRequestInterface extends RequestInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Representation of an incoming, server-side HTTP request.&#10;Per the HTTP specification, this interface includes properties for&#10;each of the following:&#10;- Protocol version&#10;- HTTP method&#10;- URI&#10;- Headers&#10;- Message body&#10;Additionally, it encapsulates all data as it has arrived to the&#10;application from the CGI and/or PHP environment, including:&#10;- The values represented in $_SERVER.&#10;- Any cookies provided (generally via $_COOKIE)&#10;- Query string arguments (generally via $_GET, or as parsed via parse_str())&#10;- Upload files, if any (as represented by $_FILES)&#10;- Deserialized body parameters (generally from $_POST)&#10;$_SERVER values MUST be treated as immutable, as they represent application&#10;state at the time of request;s as such, no methods are provided to allow&#10;modification of those values. The other values provide such methods, as they&#10;can be restored from $_SERVER or the request body, and may need treatment&#10;during the application (e.g., body parameters may be deserialized based on&#10;content type).&#10;Additionally, this interface recognizes the utility of introspecting a&#10;request to derive and match additional parameters (e.g., via URI path&#10;matching, decrypting cookie values, deserializing non-form-encoded body&#10;content, matching authorization headers to users, etc). These parameters&#10;are stored in an &quot;attributes&quot; property.&#10;Requests are considered immutable;s all methods that might change state MUST&#10;be implemented such that they retain the internal state of the current&#10;message and return an instance that contains the changed state.;;d0,43;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getAttribute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;226;56;226;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a single derived request attribute.&#10;Retrieves a single derived request attribute as described in&#10;getAttributes(). If the attribute has not been previously set, returns&#10;the default value as provided.&#10;This method obviates the need for a hasAttribute() method, as it allows&#10;specifying a default value to return if the attribute is not found.&#10;&lt;b&gt;see&lt;/b&gt;: getAttributes()&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The attribute name.&#10;    mixed &lt;b&gt;$default&lt;/b&gt;: Default value to return if the attribute does not exist.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pmixed $default;;p;;x;;x">
</treenode>
<treenode node="getAttributes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;209;35;209;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve attributes derived from the request.&#10;The request &quot;attributes&quot; may be used to allow injection of any&#10;parameters derived from the request: e.g., the results of path&#10;match operations;s the results of decrypting cookies;s the results of&#10;deserializing non-form-encoded message bodies;s etc. Attributes&#10;will be application and request specific, and CAN be mutable.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Attributes derived from the request.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCookieParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;65;37;65;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve cookies.&#10;Retrieves cookies sent by the client to the server.&#10;The data MUST be compatible with the structure of the $_COOKIE&#10;superglobal.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getParsedBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;166;35;166;;;;vpos;;v;;anull|array|object;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve any parameters provided in the request body.&#10;If the request Content-Type is either application/x-www-form-urlencoded&#10;or multipart/form-data, and the request method is POST, this method MUST&#10;return the contents of $_POST.&#10;Otherwise, this method may return any results of deserializing&#10;the request body content;s as parsing returns structured content, the&#10;potential types MUST be arrays or objects only. A null value indicates&#10;the absence of body content.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The deserialized body parameters, if any. These will typically be an array or object.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQueryParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;98;36;98;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve query string arguments.&#10;Retrieves the deserialized query string arguments, if any.&#10;Note: the query params might not be in sync with the URI or server&#10;params. If you need to ensure you are only getting the original&#10;values, you may need to parse the query string from `getUri()-&gt;getQuery()`&#10;or from the `QUERY_STRING` server param.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getServerParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;53;37;53;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve server parameters.&#10;Retrieves data related to the incoming request environment,&#10;typically derived from PHP&apos;s $_SERVER superglobal. The data IS NOT&#10;REQUIRED to originate from $_SERVER.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUploadedFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;136;38;136;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve normalized file upload data.&#10;This method returns upload metadata in a normalized tree, with each leaf&#10;an instance of Psr\Http\Message\UploadedFileInterface.&#10;These values MAY be prepared from $_FILES or the message body during&#10;instantiation, or MAY be injected via withUploadedFiles().&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array tree of UploadedFileInterface instances;s an empty array MUST be returned if no data is present.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withAttribute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;243;48;243;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified derived request attribute.&#10;This method allows setting a single derived request attribute as&#10;described in getAttributes().&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;updated attribute.&#10;&lt;b&gt;see&lt;/b&gt;: getAttributes()&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The attribute name.&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The value of the attribute.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pmixed $value;;p;;x;;x">
</treenode>
<treenode node="withCookieParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;84;52;84;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified cookies.&#10;The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST&#10;be compatible with the structure of $_COOKIE. Typically, this data will&#10;be injected at instantiation.&#10;This method MUST NOT update the related Cookie header of the request&#10;instance, nor related values in the server params.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;updated cookie values.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$cookies&lt;/b&gt;: Array of key/value pairs representing cookies.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $cookies;;p;;x">
</treenode>
<treenode node="withParsedBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;196;41;196;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified body parameters.&#10;These MAY be injected during instantiation.&#10;If the request Content-Type is either application/x-www-form-urlencoded&#10;or multipart/form-data, and the request method is POST, use this method&#10;ONLY to inject the contents of $_POST.&#10;The data IS NOT REQUIRED to come from $_POST, but MUST be the results of&#10;deserializing the request body content. Deserialization/parsing returns&#10;structured data, and, as such, this method ONLY accepts arrays or objects,&#10;or a null value if nothing was available to parse.&#10;As an example, if content negotiation determines that the request data&#10;is a JSON payload, this method could be used to create a request&#10;instance with the deserialized parameters.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;updated body parameters.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if an unsupported argument type is&#10;provided.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    null|array|object &lt;b&gt;$data&lt;/b&gt;: The deserialized body data. This will typically be in an array or object.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lnull|array|object $data;;p;;x">
</treenode>
<treenode node="withQueryParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;122;49;122;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified query string arguments.&#10;These values SHOULD remain immutable over the course of the incoming&#10;request. They MAY be injected during instantiation, such as from PHP&apos;s&#10;$_GET superglobal, or MAY be derived from some other value such as the&#10;URI. In cases where the arguments are parsed from the URI, the data&#10;MUST be compatible with what PHP&apos;s parse_str() would return for&#10;purposes of how duplicate query parameters are handled, and how nested&#10;sets are handled.&#10;Setting query string arguments MUST NOT change the URI stored by the&#10;request, nor the values in the server params.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;updated query string arguments.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$query&lt;/b&gt;: Array of query string arguments, typically from $_GET.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $query;;p;;x">
</treenode>
<treenode node="withUploadedFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;149;59;149;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new instance with the specified uploaded files.&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that has the&#10;updated body parameters.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if an invalid structure is provided.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$uploadedFiles&lt;/b&gt;: An array tree of UploadedFileInterface instances.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $uploadedFiles;;p;;x">
</treenode>
<treenode node="withoutAttribute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\ServerRequestInterface.php;f11;259;43;259;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance that removes the specified derived request attribute.&#10;This method allows removing a single derived request attribute as&#10;described in getAttributes().&#10;This method MUST be implemented in such a way as to retain the&#10;immutability of the message, and MUST return an instance that removes&#10;the attribute.&#10;&lt;b&gt;see&lt;/b&gt;: getAttributes()&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The attribute name.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
</treenode>
<treenode node="SignBlobInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\SignBlobInterface.php;f0;22;1;43;;;;vpos;;v;;aFetchAuthTokenInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface SignBlobInterface extends FetchAuthTokenInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes a class which supports signing arbitrary strings.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\SignBlobInterface.php;f11;42;63;42;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the current Client Name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request, if one is required to obtain a client name.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="signBlob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\SignBlobInterface.php;f11;33;66;33;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using the method which is best for a given credentials type.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$stringToSign&lt;/b&gt;: The string to sign.&#10;    bool &lt;b&gt;$forceOpenssl&lt;/b&gt;: Require use of OpenSSL for local signing. Does not apply to signing done using external services. **Defaults to** `false`.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The resulting signature. Value should be base64-encoded.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $stringToSign;;pbool $forceOpenssl;;p;;x;;x">
</treenode>
</treenode>
<treenode node="StreamInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f0;11;1;157;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes a data stream.&#10;Typically, an instance will wrap a PHP stream;s this interface provides&#10;a wrapper around the most common operations, including serialization of&#10;the entire stream to a string.;;d0,12;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;27;32;27;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reads all data from the stream into a string, from the beginning to end.&#10;This method MUST attempt to seek to the beginning of the stream before&#10;reading data and read the stream until the end is reached.&#10;Warning: This could attempt to load a large amount of data into memory.&#10;This method MUST NOT raise an exception in order to conform with PHP&apos;s&#10;string casting operations.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/language.oop5.magic.php#object.tostring;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;34;27;34;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Closes the stream and any underlying resources.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;43;28;43;;;;vpos;;v;;aresource|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Separates any underlying resources from the stream.&#10;After the stream has been detached, the stream is in an unusable state.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Underlying PHP stream, if any;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;65;25;65;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if the stream is at the end of the stream.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;142;33;142;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the remaining contents in a string&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if unable to read or an error occurs while&#10;reading.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;156;44;156;;;;vpos;;v;;aarray|mixed|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get stream metadata as an associative array or retrieve a specific key.&#10;The keys returned are identical to the keys returned from PHP&apos;s&#10;stream_get_meta_data() function.&#10;&lt;b&gt;link&lt;/b&gt;: http://php.net/manual/en/function.stream-get-meta-data.php&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;: Specific metadata to retrieve.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns an associative array if no key is provided. Returns a specific key value if a key is provided and the value is found, or null if the key is not found.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;50;29;50;;;;vpos;;v;;aint|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the size of the stream if known.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the size in bytes if known, or null if unknown.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;121;32;121;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns whether or not the stream is readable.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;72;32;72;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns whether or not the stream is seekable.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;105;32;105;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns whether or not the stream is writable.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;133;33;133;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read data from the stream.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if an error occurs.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$length&lt;/b&gt;: Read up to $length bytes from the object and return them. Fewer than $length bytes may be returned if underlying stream call returns fewer bytes.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the data read from the stream, or an empty string if no bytes are available.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lint $length;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;98;28;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Seek to the beginning of the stream.&#10;If the stream is not seekable, this method will raise an exception;s&#10;otherwise, it will perform a seek(0).&#10;&lt;b&gt;see&lt;/b&gt;: seek()&#10;&lt;b&gt;link&lt;/b&gt;: http://www.php.net/manual/en/function.fseek.php&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on failure.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;86;53;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Seek to a position in the stream.&#10;&lt;b&gt;link&lt;/b&gt;: http://www.php.net/manual/en/function.fseek.php&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on failure.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$offset&lt;/b&gt;: Stream offset&#10;    int &lt;b&gt;$whence&lt;/b&gt;: Specifies how the cursor position will be calculated based on the seek offset. Valid values are identical to the built-in PHP $whence values for `fseek()`.  SEEK_SET: Set position equal to offset bytes SEEK_CUR: Set position to current location plus offset SEEK_END: Set position to end-of-stream plus offset.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lint $offset;;pint $whence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;58;26;58;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the current position of the file read/write pointer&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Position of the file pointer;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\StreamInterface.php;f11;114;34;114;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Write data to the stream.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on failure.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;: The string that is to be written.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the number of bytes written to the stream.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $string;;p;;x">
</treenode>
</treenode>
<treenode node="TaskQueueInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueueInterface.php;f0;4;1;23;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="add;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueueInterface.php;f11;17;39;17;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a task to the queue that will be executed the next time run is&#10;called.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;ltask;;p;;x">
</treenode>
<treenode node="isEmpty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueueInterface.php;f11;11;29;11;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if the queue is empty.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueueInterface.php;f11;22;25;22;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Execute all of the pending task in the queue.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="UpdateMetadataInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\UpdateMetadataInterface.php;f0;23;1;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface UpdateMetadataInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes a Credentials object which supports updating request metadata&#10;(request headers).;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="AUTH_METADATA_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\UpdateMetadataInterface.php;f9;25;27;25;;;;vpos;;v;;a;;r&apos;authorization&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="updateMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\UpdateMetadataInterface.php;f11;35;5;39;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates metadata with the authorization token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: metadata hashmap&#10;    string &lt;b&gt;$authUri&lt;/b&gt;: optional auth uri&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updated metadata hashmap;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;pstring $authUri;;pcallable $httpHandler;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="UploadedFileInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f0;12;1;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface UploadedFileInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Value object representing a file uploaded through an HTTP request.&#10;Instances of this interface are considered immutable;s all methods that&#10;might change state MUST be implemented such that they retain the internal&#10;state of the current instance and return an instance that contains the&#10;changed state.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getClientFilename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f11;106;39;106;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the filename sent by the client.&#10;Do not trust the value returned by this method. A client could send&#10;a malicious filename with the intention to corrupt or hack your&#10;application.&#10;Implementations SHOULD return the value stored in the &quot;name&quot; key of&#10;the file in the $_FILES array.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The filename sent by the client or null if none was provided.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientMediaType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f11;121;40;121;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the media type sent by the client.&#10;Do not trust the value returned by this method. A client could send&#10;a malicious media type with the intention to corrupt or hack your&#10;application.&#10;Implementations SHOULD return the value stored in the &quot;type&quot; key of&#10;the file in the $_FILES array.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The media type sent by the client or null if none was provided.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f11;91;30;91;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the error associated with the uploaded file.&#10;The return value MUST be one of PHP&apos;s UPLOAD_ERR_XXX constants.&#10;If the file was uploaded successfully, this method MUST return&#10;UPLOAD_ERR_OK.&#10;Implementations SHOULD return the value stored in the &quot;error&quot; key of&#10;the file in the $_FILES array.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/features.file-upload.errors.php&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   One of PHP&apos;s UPLOAD_ERR_XXX constants.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f11;75;29;75;;;;vpos;;v;;aint|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the file size.&#10;Implementations SHOULD return the value stored in the &quot;size&quot; key of&#10;the file in the $_FILES array if available, as PHP calculates this based&#10;on the actual size transmitted.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The file size in bytes or null if unknown.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f11;30;31;30;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a stream representing the uploaded file.&#10;This method MUST return a StreamInterface instance, representing the&#10;uploaded file. The purpose of this method is to allow utilizing native PHP&#10;stream functionality to manipulate the file upload, such as&#10;stream_copy_to_stream() (though the result will need to be decorated in a&#10;native PHP stream wrapper to work with such functions).&#10;If the moveTo() method has been called previously, this method MUST raise&#10;an exception.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException in cases when no stream is available or can be&#10;created.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Stream representation of the uploaded file.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="moveTo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UploadedFileInterface.php;f11;64;39;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Move the uploaded file to a new location.&#10;Use this method as an alternative to move_uploaded_file(). This method is&#10;guaranteed to work in both SAPI and non-SAPI environments.&#10;Implementations must determine which environment they are in, and use the&#10;appropriate method (move_uploaded_file(), rename(), or a stream&#10;operation) to perform the operation.&#10;$targetPath may be an absolute path, or a relative path. If it is a&#10;relative path, resolution should be the same as used by PHP&apos;s rename()&#10;function.&#10;The original file or stream MUST be removed on completion.&#10;If this method is called more than once, any subsequent calls MUST raise&#10;an exception.&#10;When used in an SAPI environment where $_FILES is populated, when writing&#10;files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be&#10;used to ensure permissions and upload status are verified correctly.&#10;If you wish to move to a stream, use getStream(), as SAPI operations&#10;cannot guarantee writing to stream destinations.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/is_uploaded_file&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/move_uploaded_file&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if the $targetPath specified is invalid.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on any error during the move operation, or on&#10;the second or subsequent call to the method.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$targetPath&lt;/b&gt;: Path to which to move the uploaded file.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $targetPath;;p;;x">
</treenode>
</treenode>
<treenode node="UriInterface;PHP:Interface Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f0;23;1;322;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    interface UriInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Value object representing a URI.&#10;This interface is meant to represent URIs according to RFC 3986 and to&#10;provide methods for most common operations. Additional functionality for&#10;working with URIs can be provided on top of the interface or externally.&#10;Its primary use is for HTTP requests, but may also be used in other&#10;contexts.&#10;Instances of this interface are considered immutable;s all methods that&#10;might change state MUST be implemented such that they retain the internal&#10;state of the current instance and return an instance that contains the&#10;changed state.&#10;Typically the Host header will be also be present in the request message.&#10;For server-side requests, the scheme will typically be discoverable in the&#10;server parameters.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc3986 (the URI specification);;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;321;32;321;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the string representation as a URI reference.&#10;Depending on which components of the URI are present, the resulting&#10;string is either a full URI or relative reference according to RFC 3986,&#10;Section 4.1. The method concatenates the various components of the URI,&#10;using the appropriate delimiters:&#10;- If a scheme is present, it MUST be suffixed by &quot;:&quot;.&#10;- If an authority is present, it MUST be prefixed by &quot;//&quot;.&#10;- The path can be concatenated without delimiters. But there are two&#10;cases where the path has to be adjusted to make the URI reference&#10;valid as PHP does not allow to throw an exception in __toString():&#10;- If the path is rootless and an authority is present, the path MUST&#10;be prefixed by &quot;/&quot;.&#10;- If the path is starting with more than one &quot;/&quot; and no authority is&#10;present, the starting slashes MUST be reduced to one.&#10;- If a query is present, it MUST be prefixed by &quot;?&quot;.&#10;- If a fragment is present, it MUST be prefixed by &quot;#&quot;.&#10;&lt;b&gt;see&lt;/b&gt;: http://tools.ietf.org/html/rfc3986#section-4.1;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getAuthority;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;59;34;59;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the authority component of the URI.&#10;If no authority information is present, this method MUST return an empty&#10;string.&#10;The authority syntax of the URI is:&#10;&lt;pre&gt;&#10;[user-info&#10;@]host[:port]&#10;&lt;/pre&gt;&#10;If the port component is not set or is the standard port for the current&#10;scheme, it SHOULD NOT be included.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-3.2&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI authority, in &quot;[user-info @]host[:port]&quot; format.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFragment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;173;33;173;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the fragment component of the URI.&#10;If no fragment is present, this method MUST return an empty string.&#10;The leading &quot;#&quot; character is not part of the fragment and MUST NOT be&#10;added.&#10;The value returned MUST be percent-encoded, but MUST NOT double-encode&#10;any characters. To determine what characters to encode, please refer to&#10;RFC 3986, Sections 2 and 3.5.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-2&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-3.5&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI fragment.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHost;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;89;29;89;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the host component of the URI.&#10;If no host is present, this method MUST return an empty string.&#10;The value returned MUST be normalized to lowercase, per RFC 3986&#10;Section 3.2.2.&#10;&lt;b&gt;see&lt;/b&gt;: http://tools.ietf.org/html/rfc3986#section-3.2.2&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI host.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;133;29;133;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the path component of the URI.&#10;The path can either be empty or absolute (starting with a slash) or&#10;rootless (not starting with a slash). Implementations MUST support all&#10;three syntaxes.&#10;Normally, the empty path &quot;&quot; and absolute path &quot;/&quot; are considered equal as&#10;defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically&#10;do this normalization because in contexts with a trimmed base path, e.g.&#10;the front controller, this difference becomes significant. It&apos;s the task&#10;of the user to handle both &quot;&quot; and &quot;/&quot;.&#10;The value returned MUST be percent-encoded, but MUST NOT double-encode&#10;any characters. To determine what characters to encode, please refer to&#10;RFC 3986, Sections 2 and 3.3.&#10;As an example, if the value should include a slash (&quot;/&quot;) not intended as&#10;delimiter between path segments, that value MUST be passed in encoded&#10;form (e.g., &quot;%2F&quot;) to the instance.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-2&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-3.3&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI path.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;106;29;106;;;;vpos;;v;;anull|int;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the port component of the URI.&#10;If a port is present, and it is non-standard for the current scheme,&#10;this method MUST return it as an integer. If the port is the standard port&#10;used with the current scheme, this method SHOULD return null.&#10;If no port is present, and no scheme is present, this method MUST return&#10;a null value.&#10;If no port is present, but a scheme is present, this method MAY return&#10;the standard port for that scheme, but SHOULD return null.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI port.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuery;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;155;30;155;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the query string of the URI.&#10;If no query string is present, this method MUST return an empty string.&#10;The leading &quot;?&quot; character is not part of the query and MUST NOT be&#10;added.&#10;The value returned MUST be percent-encoded, but MUST NOT double-encode&#10;any characters. To determine what characters to encode, please refer to&#10;RFC 3986, Sections 2 and 3.4.&#10;As an example, if a value in a key/value pair of the query string should&#10;include an ampersand (&quot;&amp;&quot;) not intended as a delimiter between values,&#10;that value MUST be passed in encoded form (e.g., &quot;%26&quot;) to the instance.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-2&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-3.4&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI query string.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getScheme;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;39;31;39;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the scheme component of the URI.&#10;If no scheme is present, this method MUST return an empty string.&#10;The value returned MUST be normalized to lowercase, per RFC 3986&#10;Section 3.1.&#10;The trailing &quot;:&quot; character is not part of the scheme and MUST NOT be&#10;added.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-3.1&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI scheme.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUserInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;76;33;76;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve the user information component of the URI.&#10;If no user information is present, this method MUST return an empty&#10;string.&#10;If a user is present in the URI, this will return that value;s&#10;additionally, if the password is also present, it will be appended to the&#10;user value, with a colon (&quot;:&quot;) separating the values.&#10;The trailing &quot;&#10;@&quot; character is not part of the user information and MUST&#10;NOT be added.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The URI user information, in &quot;username[:password]&quot; format.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withFragment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;296;43;296;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified URI fragment.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified URI fragment.&#10;Users can provide both encoded and decoded fragment characters.&#10;Implementations ensure the correct encoding as outlined in getFragment().&#10;An empty fragment value is equivalent to removing the fragment.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$fragment&lt;/b&gt;: The fragment to use with the new instance.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified fragment.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $fragment;;p;;x">
</treenode>
<treenode node="withHost;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;220;35;220;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified host.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified host.&#10;An empty host value is equivalent to removing the host.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid hostnames.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: The hostname to use with the new instance.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified host.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $host;;p;;x">
</treenode>
<treenode node="withPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;263;35;263;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified path.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified path.&#10;The path can either be empty or absolute (starting with a slash) or&#10;rootless (not starting with a slash). Implementations MUST support all&#10;three syntaxes.&#10;If the path is intended to be domain-relative rather than path relative then&#10;it must begin with a slash (&quot;/&quot;). Paths not starting with a slash (&quot;/&quot;)&#10;are assumed to be relative to some base path known to the application or&#10;consumer.&#10;Users can provide both encoded and decoded path characters.&#10;Implementations ensure the correct encoding as outlined in getPath().&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid paths.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The path to use with the new instance.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified path.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="withPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;239;35;239;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified port.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified port.&#10;Implementations MUST raise an exception for ports outside the&#10;established TCP and UDP port ranges.&#10;A null value provided for the port is equivalent to removing the port&#10;information.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid ports.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    null|int &lt;b&gt;$port&lt;/b&gt;: The port to use with the new instance;s a null value removes the port information.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified port.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lnull|int $port;;p;;x">
</treenode>
<treenode node="withQuery;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;280;37;280;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified query string.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified query string.&#10;Users can provide both encoded and decoded query characters.&#10;Implementations ensure the correct encoding as outlined in getQuery().&#10;An empty query string value is equivalent to removing the query string.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid query strings.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$query&lt;/b&gt;: The query string to use with the new instance.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified query string.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $query;;p;;x">
</treenode>
<treenode node="withScheme;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;190;39;190;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified scheme.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified scheme.&#10;Implementations MUST support the schemes &quot;http&quot; and &quot;https&quot; case&#10;insensitively, and MAY accommodate other schemes if required.&#10;An empty scheme is equivalent to removing the scheme.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException for invalid or unsupported schemes.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$scheme&lt;/b&gt;: The scheme to use with the new instance.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified scheme.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $scheme;;p;;x">
</treenode>
<treenode node="withUserInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\http-message\src\UriInterface.php;f11;206;57;206;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an instance with the specified user information.&#10;This method MUST retain the state of the current instance, and return&#10;an instance that contains the specified user information.&#10;Password is optional, but the user information MUST include the&#10;user;s an empty string for the user is equivalent to removing user&#10;information.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$user&lt;/b&gt;: The user name to use for authority.&#10;    null|string &lt;b&gt;$password&lt;/b&gt;: The password associated with $user.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A new instance with the specified user information.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $user;;pnull|string $password;;p;;x;;x">
</treenode>
</treenode>
<treenode node="config.php;PHP:PHP Include;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\list-files.php;f14;1;24;1;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\requests.php;f14;1;24;1;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="max_duration;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\crc32_benchmark.php;f8;26;20;26;;;;vpos;;v;;a;;r30;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="min_duration;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\crc32_benchmark.php;f8;25;20;25;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2019 Google LLC&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="min_iterations;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\crc32_benchmark.php;f8;27;22;27;;;;vpos;;v;;a;;r10000;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="vendor/autoload.php;PHP:PHP Include;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\GoogleTest.php;f9;17;28;17;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f9;17;28;17;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\BuiltinTest.php;f9;17;28;17;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\config.php;f14;3;33;3;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="AbortedException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\AbortedException.php;f0;22;1;44;;;;vpos;;v;;aServiceException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AbortedException extends ServiceException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a transaction is aborted.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getRetryDelay;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\AbortedException.php;f11;29;5;43;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRetryDelay()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the delay in seconds and nanos before retrying the failed request.;;d4,30;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="AbstractHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f9;21;1;95;;;;vpos;;v;;aHandler;;cResettableInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AbstractHandler extends Handler implements ResettableInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Base Handler class providing basic level/bubble support&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;30;5;34;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;lint|string $level;;pbool $bubble;;p;;x;;x">
</treenode>
<treenode node="getBubble;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;87;5;90;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBubble(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the bubbling behavior.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true means that this handler allows bubbling. false means that bubbling is not permitted.;;d4,88;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLevel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;62;5;65;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLevel(): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets minimum logging level at which this handler will be triggered.;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;39;5;42;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;92;5;94;;;;vpos;;v;;a;;r;;d4,93;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setBubble;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;74;5;79;;;;vpos;;v;;aself;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setBubble(bool $bubble): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the bubbling behavior.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: true means that this handler allows bubbling. false means that bubbling is not permitted.;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $bubble;;p;;x">
</treenode>
<treenode node="setLevel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractHandler.php;f11;50;5;55;;;;vpos;;v;;aself;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLevel($level): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets minimum logging level at which this handler will be triggered.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: Level or level name;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lint|string $level;;p;;x">
</treenode>
</treenode>
<treenode node="AbstractLogger;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f9;11;1;127;;;;vpos;;v;;aLoggerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AbstractLogger implements LoggerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This is a simple Logger implementation that other Loggers can inherit from.&#10;It simply delegates all log-level-specific methods to the `log` method to&#10;reduce boilerplate code that a simple Logger that does the same thing with&#10;messages regardless of the error level has to implement.;;d0,12;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="alert;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;37;5;40;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    alert($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Action must be taken immediately.&#10;Example: Entire website down, database unavailable, etc. This should&#10;trigger the SMS alerts and wake you up.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="critical;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;52;5;55;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    critical($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Critical conditions.&#10;Example: Application component unavailable, unexpected exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="debug;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;123;5;126;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    debug($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detailed debug information.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="emergency;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;21;5;24;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    emergency($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    System is unusable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,22;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="error;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;66;5;69;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    error($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runtime errors that do not require immediate action but should typically&#10;be logged and monitored.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;110;5;113;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interesting events.&#10;Example: User logs in, SQL logs.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="notice;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;95;5;98;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    notice($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normal but significant events.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,96;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="warning;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\AbstractLogger.php;f11;82;5;85;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    warning($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exceptional occurrences that are not errors.&#10;Example: Use of deprecated APIs, poor use of an API, undesirable things&#10;that are not necessarily wrong.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
</treenode>
<treenode node="AbstractProcessingHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractProcessingHandler.php;f9;21;1;57;;;;vpos;;v;;aAbstractHandler;;cProcessableHandlerInterface;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AbstractProcessingHandler extends AbstractHandler implements ProcessableHandlerInterface, FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Base Handler class providing the Handler structure, including processors and formatters&#10;Classes extending it should (in most cases) only implement write($record)&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractProcessingHandler.php;f11;29;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,30;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractProcessingHandler.php;f11;51;5;56;;;;vpos;;v;;a;;r;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractProcessingHandler.php;f23;49;58;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes the record down to the log of the implementing handler;;d-1,-1;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="AbstractSyslogHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractSyslogHandler.php;f9;20;1;101;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AbstractSyslogHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Common syslog functionality;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractSyslogHandler.php;f11;60;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($facility = LOG_USER, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$facility&lt;/b&gt;: Either one of the names of the keys in $this-&gt;facilities, or a LOG_* facility constant&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $facility;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AbstractSyslogHandler.php;f14;97;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,98;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="AbstractUploader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f9;27;1;117;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AbstractUploader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a base impementation for uploads.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="RESUMABLE_LIMIT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f9;36;25;36;;;;vpos;;v;;a;;r5000000;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="UPLOAD_TYPE_MULTIPART;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f9;32;31;32;;;;vpos;;v;;a;;r&apos;multipart&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="UPLOAD_TYPE_RESUMABLE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f9;31;31;31;;;;vpos;;v;;a;;r&apos;resumable&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="UPLOAD_TYPE_SIGNED;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f9;34;28;34;;;;vpos;;v;;a;;r&apos;signed&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="UPLOAD_TYPE_STREAMABLE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f9;33;32;33;;;;vpos;;v;;a;;r&apos;streamable&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f11;91;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        RequestWrapper $requestWrapper,&#10;        $data,&#10;        $uri,&#10;        array $options = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: array $metadata Metadata on the resource.&#10;&lt;b&gt;type&lt;/b&gt;: int $chunkSize Size of the chunks to send incrementally during&#10;a resumable upload. Must be in multiples of 262144 bytes.&#10;&lt;b&gt;type&lt;/b&gt;: array $restOptions HTTP client specific configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `0`.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType Content type of the resource.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestWrapper &lt;b&gt;$requestWrapper&lt;/b&gt;&#10;    string|resource|StreamInterface &lt;b&gt;$data&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Optional configuration.;;d6,96;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestWrapper $requestWrapper;;pstring|resource|StreamInterface $data;;pstring $uri;;parray $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="upload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\AbstractUploader.php;f20;116;37;116;;;;vpos;;v;;aarray;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Abstraction;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f9;43;1;407;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Abstraction.php;f9;9;1;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Abstraction&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    .------------------------------------------------------------------.&#10;|          NUL     +      .       /       ;s      ?      &amp;      #   |&#10;|------------------------------------------------------------------|&#10;| first |  &quot;&quot;     &quot;&quot;     &quot;.&quot;     &quot;/&quot;     &quot;;s&quot;    &quot;?&quot;    &quot;&amp;&quot;    &quot;#&quot;  |&#10;| sep   |  &quot;,&quot;    &quot;,&quot;    &quot;.&quot;     &quot;/&quot;     &quot;;s&quot;    &quot;&amp;&quot;    &quot;&amp;&quot;    &quot;,&quot;  |&#10;| named | false  false  false   false   true   true   true   false |&#10;| ifemp |  &quot;&quot;     &quot;&quot;     &quot;&quot;      &quot;&quot;      &quot;&quot;     &quot;=&quot;    &quot;=&quot;    &quot;&quot;   |&#10;| allow |   U     U+R     U       U       U      U      U     U+R  |&#10;`------------------------------------------------------------------&apos;&#10;named = false&#10;| 1   |    {/list}    /red,green,blue                  | {$value}*(?:,{$value}+)*&#10;| 2   |    {/list*}   /red/green/blue                  | {$value}+(?:{$sep}{$value}+)*&#10;| 3   |    {/keys}    /semi,%3B,dot,.,comma,%2C        | /(\w+,?)+&#10;| 4   |    {/keys*}   /semi=%3B/dot=./comma=%2C        | /(?:\w+=\w+/?)*&#10;named = true&#10;| 1   |    {?list}    ?list=red,green,blue             | {name}=(?:\w+(?:,\w+?)*)*&#10;| 2   |    {?list*}   ?list=red&amp;list=green&amp;list=blue   | {name}+=(?:{$value}+(?:{sep}{name}+={$value}*))*&#10;| 3   |    {?keys}    ?keys=semi,%3B,dot,.,comma,%2C   | (same as 1)&#10;| 4   |    {?keys*}   ?semi=%3B&amp;dot=.&amp;comma=%2C        | (same as 2)&#10;UNRESERVED&#10;----------&#10;RFC 1738 ALPHA | DIGIT | &quot;-&quot; | &quot;.&quot; | &quot;_&quot; |     | &quot;$&quot; | &quot;+&quot; | &quot;!&quot; | &quot;*&quot; | &quot;&apos;&quot; | &quot;(&quot; | &quot;)&quot; | &quot;,&quot;&#10;RFC 3986 ALPHA | DIGIT | &quot;-&quot; | &quot;.&quot; | &quot;_&quot; | &quot;~&quot;&#10;RFC 6570 ALPHA | DIGIT | &quot;-&quot; | &quot;.&quot; | &quot;_&quot; | &quot;~&quot;&#10;RESERVED&#10;--------&#10;RFC 1738 &quot;:&quot; | &quot;/&quot; | &quot;?&quot; |                 | &quot;&#10;@&quot; | &quot;!&quot; | &quot;$&quot; | &quot;&amp;&quot; | &quot;&apos;&quot; | &quot;(&quot; | &quot;)&quot; | &quot;*&quot; | &quot;+&quot; | &quot;,&quot; | &quot;;s&quot; | &quot;=&quot; | &quot;-&quot; | &quot;_&quot; | &quot;.&quot; |&#10;RFC 3986 &quot;:&quot; | &quot;/&quot; | &quot;?&quot; | &quot;#&quot; | &quot;[&quot; | &quot;]&quot; | &quot;&#10;@&quot; | &quot;!&quot; | &quot;$&quot; | &quot;&amp;&quot; | &quot;&apos;&quot; | &quot;(&quot; | &quot;)&quot; | &quot;*&quot; | &quot;+&quot; | &quot;,&quot; | &quot;;s&quot; | &quot;=&quot;&#10;RFC 6570 &quot;:&quot; | &quot;/&quot; | &quot;?&quot; | &quot;#&quot; | &quot;[&quot; | &quot;]&quot; | &quot;&#10;@&quot; | &quot;!&quot; | &quot;$&quot; | &quot;&amp;&quot; | &quot;&apos;&quot; | &quot;(&quot; | &quot;)&quot; | &quot;*&quot; | &quot;+&quot; | &quot;,&quot; | &quot;;s&quot; | &quot;=&quot;&#10;PHP_QUERY_RFC3986 was added in PHP 5.4.0;;d0,44;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;166;5;175;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Abstraction.php;f11;16;5;19;;;;vpos;;v;;a;;r;;d4,167;;b1,0;;m0;;e0;;i0;;o;;k;;lid;;pnamed;;psep;;pempty;;preserved;;pstart;;pfirst;;p;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="createById;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f18;369;5;383;;;;vpos;;v;;a;;r;;d4,370;;b1,5;;m0;;e0;;i0;;o;;k;;lid;;p;;x">
</treenode>
<treenode node="decode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;316;5;326;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    decode(Parser $parser, Node\Variable $var, $values)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decodes variable&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    Node\Variable &lt;b&gt;$var&lt;/b&gt;&#10;    mixed &lt;b&gt;$values&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   decoded string;;d4,317;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pNode\Variable $var;;pmixed $values;;p;;x;;x;;x">
</treenode>
<treenode node="encode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;265;5;305;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encode(Parser $parser, Node\Variable $var, $values)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encodes variable according to spec (reserved or unreserved)&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    Node\Variable &lt;b&gt;$var&lt;/b&gt;&#10;    mixed &lt;b&gt;$values&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   encoded string;;d4,266;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pNode\Variable $var;;pmixed $values;;p;;x;;x;;x">
</treenode>
<treenode node="expand;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;179;5;207;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Abstraction.php;f11;28;5;31;;;;vpos;;v;;a;;r;;d4,180;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pparams;;p;;x;;x;;x">
</treenode>
<treenode node="expandExplode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;247;5;254;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expandExplode(Parser $parser, Node\Variable $var, array $val)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Explode modifier &apos;*&apos;, &apos;%&apos;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    Node\Variable &lt;b&gt;$var&lt;/b&gt;&#10;    array &lt;b&gt;$val&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |string;;d4,248;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pNode\Variable $var;;parray $val;;p;;x;;x;;x">
</treenode>
<treenode node="expandNonExplode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;230;5;237;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expandNonExplode(Parser $parser, Node\Variable $var, array $val)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Non explode modifier &apos;:&apos;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    Node\Variable &lt;b&gt;$var&lt;/b&gt;&#10;    array &lt;b&gt;$val&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |string;;d4,231;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pNode\Variable $var;;parray $val;;p;;x;;x;;x">
</treenode>
<treenode node="expandString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;209;5;220;;;;vpos;;v;;a;;r;;d4,210;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pval;;p;;x;;x;;x">
</treenode>
<treenode node="extract;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f11;336;5;367;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    extract(Parser $parser, Node\Variable $var, $data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Extracts value from variable&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    Node\Variable &lt;b&gt;$var&lt;/b&gt;&#10;    string &lt;b&gt;$data&lt;/b&gt;;;d4,337;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pNode\Variable $var;;pstring $data;;p;;x;;x;;x">
</treenode>
<treenode node="getRegex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f14;395;5;406;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRegex()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the correct regex given the variable location in the URI;;d4,396;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Abstraction.php;f11;61;5;64;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getToken()&#10;;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isValid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f18;385;5;388;;;;vpos;;v;;a;;r;;d4,386;;b1,5;;m0;;e0;;i0;;o;;k;;lid;;p;;x">
</treenode>
<treenode node="match;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Abstraction.php;f11;42;5;56;;;;vpos;;v;;anull|array;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    match(Parser $parser, $uri, $params = array(), $strict = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Matches given URI against current node&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;&#10;    bool &lt;b&gt;$strict&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   `uri and params` or `null` if not match and $strict is true;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pstring $uri;;parray $params;;pbool $strict;;p;;x;;x;;x;;x">
</treenode>
<treenode node="toRegex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Abstraction.php;f20;177;72;177;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;p;;x;;x">
</treenode>
</treenode>
<treenode node="AccessToken;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f0;45;1;478;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AccessToken&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper around Google Access Tokens which provides convenience functions.&#10;&lt;b&gt;experimental&lt;/b&gt;;;d0,46;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FEDERATED_SIGNON_CERT_URL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f9;47;35;47;;;;vpos;;v;;a;;r&apos;https://www.googleapis.com/oauth2/v3/certs&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="IAP_CERT_URL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f9;48;22;48;;;;vpos;;v;;a;;r&apos;https://www.gstatic.com/iap/verify/public_key-jwk&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="IAP_ISSUER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f9;49;20;49;;;;vpos;;v;;a;;r&apos;https://cloud.google.com/iap&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="OAUTH2_ISSUER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f9;50;23;50;;;;vpos;;v;;a;;r&apos;accounts.google.com&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="OAUTH2_ISSUER_HTTPS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f9;51;29;51;;;;vpos;;v;;a;;r&apos;https://accounts.google.com&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="OAUTH2_REVOKE_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f9;52;27;52;;;;vpos;;v;;a;;r&apos;https://oauth2.googleapis.com/revoke&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f11;68;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        callable $httpHandler = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: [optional] An HTTP Handler to deliver PSR-7 requests.&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: [optional] A PSR-6 compatible cache implementation.;;d6,71;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;pCacheItemPoolInterface $cache;;p;;x;;x">
</treenode>
<treenode node="callJwtStatic;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f14;444;5;450;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    callJwtStatic($method, array $args = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provide a hook to mock calls to the JWT static methods.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,445;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $method;;parray $args;;p;;x;;x">
</treenode>
<treenode node="callSimpleJwtDecode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f14;458;5;461;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    callSimpleJwtDecode(array $args = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provide a hook to mock calls to the JWT static methods.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,459;;b2,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="checkAndInitializePhpsec;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;396;5;405;;;;vpos;;v;;a;;r;;d4,397;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="checkSimpleJwt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;407;5;414;;;;vpos;;v;;a;;r;;d4,408;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="determineAlg;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;161;5;179;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    determineAlg(array $certs)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Identifies the expected algorithm to verify by looking at the &quot;alg&quot; key&#10;of the provided certs.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$certs&lt;/b&gt;: Certificate array according to the JWK spec (see https://tools.ietf.org/html/rfc7517).&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The expected algorithm, such as &quot;ES256&quot; or &quot;RS256&quot;.;;d4,162;;b3,0;;m0;;e0;;i0;;o;;k;;larray $certs;;p;;x">
</treenode>
<treenode node="getCacheKeyFromCertLocation;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;470;5;477;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKeyFromCertLocation($certsLocation)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate a cache key based on the cert location using sha1 with the&#10;exception of using &quot;federated_signon_certs_v3&quot; to preserve BC.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$certsLocation&lt;/b&gt;;;d4,471;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $certsLocation;;p;;x">
</treenode>
<treenode node="getCerts;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;326;5;358;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCerts($location, $cacheKey, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets federated sign-on certificates to use for verifying identity tokens.&#10;Returns certs as array structure, where keys are key ids, and values&#10;are PEM encoded certificates.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException If received certs are in an invalid format.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$location&lt;/b&gt;: The location from which to retrieve certs.&#10;    string &lt;b&gt;$cacheKey&lt;/b&gt;: The key under which to cache the retrieved certs.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.;;d4,327;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $location;;pstring $cacheKey;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="retrieveCertsFromLocation;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;369;5;394;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    retrieveCertsFromLocation($url, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve and cache a certificates file.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException If certs could not be retrieved from a local file.&#10;&lt;b&gt;throws&lt;/b&gt;: RuntimeException If certs could not be retrieved from a remote location.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$url&lt;/b&gt;: string location&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   certificates;;d4,370;;b3,0;;m0;;e0;;i0;;o;;k;;l $url;;parray $options;;p;;x;;x">
</treenode>
<treenode node="revoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f11;292;5;313;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    revoke($token, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Revoke an OAuth2 access token or refresh token. This method will revoke the current access&#10;token, if a token isn&apos;t provided.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$token&lt;/b&gt;: The token (access token or a refresh token) that should be revoked.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns True if the revocation was successful, otherwise False.;;d4,293;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $token;;parray $options;;p;;x;;x">
</treenode>
<treenode node="setPhpsecConstants;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;425;5;435;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPhpsecConstants()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    phpseclib calls &quot;phpinfo&quot; by default, which requires special&#10;whitelisting in the AppEngine VM environment. This function&#10;sets constants to bypass the need for phpseclib to check phpinfo&#10;&lt;b&gt;see&lt;/b&gt;: phpseclib/Math/BigInteger&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/GoogleCloudPlatform/getting-started-php/issues/85&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d4,426;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="verify;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f11;105;5;151;;;;vpos;;v;;aarray|bool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    verify($token, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verifies an id token and returns the authenticated apiLoginTicket.&#10;Throws an exception if the id token is not valid.&#10;The audience parameter can be used to control which id tokens are&#10;accepted.  By default, the id token must have been issued to this OAuth2 client.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException If certs could not be retrieved from a local file.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException If received certs are in an invalid format.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException If the cert alg is not supported.&#10;&lt;b&gt;throws&lt;/b&gt;: RuntimeException If certs could not be retrieved from a remote location.&#10;&lt;b&gt;throws&lt;/b&gt;: UnexpectedValueException If the token issuer does not match.&#10;&lt;b&gt;throws&lt;/b&gt;: UnexpectedValueException If the token audience does not match.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: The JSON Web Token to be verified.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;    string &lt;b&gt;$options&lt;/b&gt;: .audience The indended recipient of the token.&#10;    string &lt;b&gt;$options&lt;/b&gt;: .issuer The intended issuer of the token.&#10;    string &lt;b&gt;$options&lt;/b&gt;: .cacheKey The cache key of the cached certs. Defaults to the sha1 of $certsLocation if provided, otherwise is set to &quot;federated_signon_certs_v3&quot;.&#10;    string &lt;b&gt;$options&lt;/b&gt;: .certsLocation The location (remote or local) from which to retrieve certificates, if not cached. This value should only be provided in limited circumstances in which you are sure of the behavior.&#10;    bool &lt;b&gt;$options&lt;/b&gt;: .throwException Whether the function should throw an exception if the verification fails. This is useful for determining the reason verification failed.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the token payload, if successful, or false if not.;;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;ltoken;;poptions;;p;;x;;x">
</treenode>
<treenode node="verifyEs256;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;193;5;219;;;;vpos;;v;;aarray|bool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    verifyEs256($token, array $certs, $audience = null, $issuer = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verifies an ES256-signed JWT.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: The JSON Web Token to be verified.&#10;    array &lt;b&gt;$certs&lt;/b&gt;: Certificate array according to the JWK spec (see https://tools.ietf.org/html/rfc7517).&#10;    string|null &lt;b&gt;$audience&lt;/b&gt;: If set, returns false if the provided audience does not match the &quot;aud&quot; claim on the JWT.&#10;    string|null &lt;b&gt;$issuer&lt;/b&gt;: If set, returns false if the provided issuer does not match the &quot;iss&quot; claim on the JWT.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the token payload, if successful, or false if not.;;d4,194;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $token;;parray $certs;;pstring|null $audience;;pstring|null $issuer;;p;;x;;x;;x;;x">
</treenode>
<treenode node="verifyRs256;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\AccessToken.php;f12;233;5;282;;;;vpos;;v;;aarray|bool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    verifyRs256($token, array $certs, $audience = null, $issuer = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verifies an RS256-signed JWT.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: The JSON Web Token to be verified.&#10;    array &lt;b&gt;$certs&lt;/b&gt;: Certificate array according to the JWK spec (see https://tools.ietf.org/html/rfc7517).&#10;    string|null &lt;b&gt;$audience&lt;/b&gt;: If set, returns false if the provided audience does not match the &quot;aud&quot; claim on the JWT.&#10;    string|null &lt;b&gt;$issuer&lt;/b&gt;: If set, returns false if the provided issuer does not match the &quot;iss&quot; claim on the JWT.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the token payload, if successful, or false if not.;;d4,234;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $token;;parray $certs;;pstring|null $audience;;pstring|null $issuer;;p;;x;;x;;x;;x">
</treenode>
</treenode>
<treenode node="Acl;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f0;39;1;203;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Acl&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Storage uses access control lists (ACLs) to manage bucket and&#10;object access. ACLs are the mechanism you use to share objects with other&#10;users and allow other users to access your buckets and objects. For more&#10;information please see the overview on&#10;[access-control](https://cloud.google.com/storage/docs/access-control).&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$bucket = $storage-&gt;bucket(&apos;my-bucket&apos;);s&#10;$acl = $bucket-&gt;acl();s&#10;```;;d0,40;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ROLE_OWNER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f9;43;20;43;;;;vpos;;v;;a;;r&apos;OWNER&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ROLE_READER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f9;41;21;41;;;;vpos;;v;;a;;r&apos;READER&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ROLE_WRITER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f9;42;21;42;;;;vpos;;v;;a;;r&apos;WRITER&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f11;63;5;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ConnectionInterface $connection, $type, array $identity)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException Thrown when an invalid type is passed in.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: Represents a connection to Cloud Storage.&#10;    string &lt;b&gt;$type&lt;/b&gt;: The type of access control this instance applies to.&#10;    array &lt;b&gt;$identity&lt;/b&gt;: Represents which bucket, file, or generation this instance applies to.;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pstring $type;;parray $identity;;p;;x;;x;;x">
</treenode>
<treenode node="add;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f11;162;5;170;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add($entity, $role, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add access controls on a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket} or&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject}.&#10;Example:&#10;```&#10;$acl-&gt;add(&apos;allAuthenticatedUsers&apos;, &apos;WRITER&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert BucketAccessControls insert&#10;API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls/insert&#10;DefaultObjectAccessControls insert API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert ObjectAccessControls insert&#10;API documentation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$entity&lt;/b&gt;: The entity to add access controls to.&#10;    string &lt;b&gt;$role&lt;/b&gt;: The permissions to add for the specified entity. May be one of &apos;OWNER&apos;, &apos;READER&apos;, or &apos;WRITER&apos;.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration Options.;;d4,163;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $entity;;pstring $role;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f11;99;5;103;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete($entity, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delete access controls on a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket} or&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject} for a specified entity.&#10;Example:&#10;```&#10;$acl-&gt;delete(&apos;allAuthenticatedUsers&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete BucketAccessControls delete&#10;API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls/delete&#10;DefaultObjectAccessControls delete API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete ObjectAccessControls delete&#10;API documentation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$entity&lt;/b&gt;: The entity to delete.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration Options.;;d4,100;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $entity;;parray $options;;p;;x;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f11;130;5;138;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get access controls on a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket} or&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject}. By default this will return all available&#10;access controls. You may optionally specify a single entity to return&#10;details for as well.&#10;Example:&#10;```&#10;$res = $acl-&gt;get([&apos;entity&apos; =&gt; &apos;allAuthenticatedUsers&apos;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get BucketAccessControls get API&#10;documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls/get&#10;DefaultObjectAccessControls get API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get ObjectAccessControls get API&#10;documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $entity The entity to fetch.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,131;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Acl.php;f11;194;5;202;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    update($entity, $role, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Update access controls on a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket} or&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject}.&#10;Example:&#10;```&#10;$acl-&gt;update(&apos;allAuthenticatedUsers&apos;, &apos;READER&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/patch BucketAccessControls patch API&#10;documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls/patch&#10;DefaultObjectAccessControls patch API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/patch ObjectAccessControls patch&#10;API documentation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$entity&lt;/b&gt;: The entity to update access controls for.&#10;    string &lt;b&gt;$role&lt;/b&gt;: The permissions to update for the specified entity. May be one of &apos;OWNER&apos;, &apos;READER&apos;, or &apos;WRITER&apos;.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration Options.;;d4,195;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $entity;;pstring $role;;parray $options;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="AggregateException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\AggregateException.php;f0;7;1;16;;;;vpos;;v;;aRejectionException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AggregateException extends RejectionException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when too many errors occur in the some() or any() methods.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\AggregateException.php;f11;9;5;15;;;;vpos;;v;;a;;r;;d4,10;;b1,0;;m0;;e0;;i0;;o;;k;;lmsg;;preasons;;p;;x;;x">
</treenode>
</treenode>
<treenode node="AmqpHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f0;20;1;136;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f11;38;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($exchange, ?string $exchangeName = null, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    AMQPExchange|AMQPChannel &lt;b&gt;$exchange&lt;/b&gt;: AMQPExchange (php AMQP ext) or PHP AMQP lib channel, ready for use&#10;    string|null &lt;b&gt;$exchangeName&lt;/b&gt;: Optional exchange name, for AMQPChannel (PhpAmqpLib) only&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lAMQPExchange|AMQPChannel $exchange;;pstring|null $exchangeName;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="createAmqpMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f12;118;5;127;;;;vpos;;v;;a AMQPMessage;;r;;d4,119;;b3,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f14;132;5;135;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,133;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRoutingKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f14;111;5;116;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRoutingKey(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the routing key for the AMQP exchange;;d4,112;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f11;82;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\AmqpHandler.php;f14;55;5;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,56;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="AnonymousCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\AnonymousCredentials.php;f0;25;1;66;;;;vpos;;v;;aFetchAuthTokenInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AnonymousCredentials implements FetchAuthTokenInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides an anonymous set of credentials, which is useful for APIs which do&#10;not require authentication.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\AnonymousCredentials.php;f11;40;5;43;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches the auth token. In this case it returns a null value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\AnonymousCredentials.php;f11;51;5;54;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the cache key. In this case it returns a null value, disabling&#10;caching.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\AnonymousCredentials.php;f11;62;5;65;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches the last received token. In this case, it returns the same null&#10;auth token.;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="AppEngineFlexFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexFormatter.php;f0;25;1;50;;;;vpos;;v;;aLineFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppEngineFlexFormatter extends LineFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog 1.x formatter for formatting logs on App Engine flexible environment.&#10;If you are using Monolog 2.x, use {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Logger\AppEngineFlexFormatterV2} instead.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexFormatter.php;f11;34;5;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($format = null, $dateFormat = null, $ignoreEmptyContextAndExtra = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$format&lt;/b&gt;: [optional] The format of the message&#10;    string &lt;b&gt;$dateFormat&lt;/b&gt;: [optional] The format of the timestamp&#10;    bool &lt;b&gt;$ignoreEmptyContextAndExtra&lt;/b&gt;: [optional];;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $format;;pstring $dateFormat;;pbool $ignoreEmptyContextAndExtra;;p;;x;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexFormatter.php;f11;46;5;49;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the plain text message with LineFormatter&apos;s format method and add&#10;metadata including the trace id then return the json string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: A record to format&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The formatted record;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="AppEngineFlexFormatterV2;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexFormatterV2.php;f0;25;1;50;;;;vpos;;v;;aLineFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppEngineFlexFormatterV2 extends LineFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog 2.x formatter for formatting logs on App Engine flexible environment.&#10;If you are using Monolog 1.x, use {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Logger\AppEngineFlexFormatter} instead.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexFormatterV2.php;f11;34;5;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($format = null, $dateFormat = null, $ignoreEmptyContextAndExtra = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$format&lt;/b&gt;: [optional] The format of the message&#10;    string &lt;b&gt;$dateFormat&lt;/b&gt;: [optional] The format of the timestamp&#10;    bool &lt;b&gt;$ignoreEmptyContextAndExtra&lt;/b&gt;: [optional];;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $format;;pstring $dateFormat;;pbool $ignoreEmptyContextAndExtra;;p;;x;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexFormatterV2.php;f11;46;5;49;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the plain text message with LineFormatter&apos;s format method and add&#10;metadata including the trace id then return the json string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: A record to format&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The formatted record;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="AppEngineFlexHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandler.php;f0;27;1;69;;;;vpos;;v;;aStreamHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppEngineFlexHandler extends StreamHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog 1.x handler for logging on App Engine flexible environment.&#10;If you are using Monolog 2.x, use {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Logger\AppEngineFlexHandlerV2} instead.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandler.php;f11;40;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $level = Logger::INFO,&#10;        $bubble = true,&#10;        $filePermission = 0640,&#10;        $useLocking = false,&#10;        $stream = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$level&lt;/b&gt;: [optional] The minimum logging level at which this handler will be triggered.&#10;    Boolean &lt;b&gt;$bubble&lt;/b&gt;: [optional] Whether the messages that are handled can bubble up the stack or not.&#10;    int|null &lt;b&gt;$filePermission&lt;/b&gt;: [optional] Optional file permissions (default (0640) are only for owner read/write).&#10;    Boolean &lt;b&gt;$useLocking&lt;/b&gt;: [optional] Try to lock log file before doing any writes.&#10;    resource|string|null &lt;b&gt;$stream&lt;/b&gt;: [optional];;d6,46;;b1,0;;m0;;e0;;i0;;o;;k;;lint $level;;pBoolean $bubble;;pint|null $filePermission;;pBoolean $useLocking;;presource|string|null $stream;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandler.php;f14;65;5;68;;;;vpos;;v;;aFormatterInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the default formatter.;;d4,66;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="AppEngineFlexHandlerFactory;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandlerFactory.php;f0;24;1;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppEngineFlexHandlerFactory&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Factory to build out an AppEngineFlexHandler for the installed version of Monolog.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="build;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandlerFactory.php;f18;43;5;60;;;;vpos;;v;;aAppEngineFlexHandler;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    build(&#10;        $level = Logger::INFO,&#10;        $bubble = true,&#10;        $filePermission = 0640,&#10;        $useLocking = false,&#10;        $stream = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds out an AppEngineFlexHandler for the installed version of Monolog.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$level&lt;/b&gt;: [optional] The minimum logging level at which this handler will be triggered.&#10;    Boolean &lt;b&gt;$bubble&lt;/b&gt;: [optional] Whether the messages that are handled can bubble up the stack or not.&#10;    int|null &lt;b&gt;$filePermission&lt;/b&gt;: [optional] Optional file permissions (default (0640) are only for owner read/write).&#10;    Boolean &lt;b&gt;$useLocking&lt;/b&gt;: [optional] Try to lock log file before doing any writes.&#10;    resource|string|null &lt;b&gt;$stream&lt;/b&gt;: [optional]&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |AppEngineFlexHandlerV2;;d6,49;;b1,5;;m0;;e0;;i0;;o;;k;;lint $level;;pBoolean $bubble;;pint|null $filePermission;;pBoolean $useLocking;;presource|string|null $stream;;p;;x;;x;;x;;x;;x">
</treenode>
</treenode>
<treenode node="AppEngineFlexHandlerV2;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandlerV2.php;f0;27;1;64;;;;vpos;;v;;aStreamHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppEngineFlexHandlerV2 extends StreamHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog 2.x handler for logging on App Engine flexible environment.&#10;If you are using Monolog 1.x, use {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Logger\AppEngineFlexHandler} instead.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandlerV2.php;f11;40;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $level = Logger::INFO,&#10;        $bubble = true,&#10;        $filePermission = 0640,&#10;        $useLocking = false,&#10;        $stream = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$level&lt;/b&gt;: [optional] The minimum logging level at which this handler will be triggered.&#10;    Boolean &lt;b&gt;$bubble&lt;/b&gt;: [optional] Whether the messages that are handled can bubble up the stack or not.&#10;    int|null &lt;b&gt;$filePermission&lt;/b&gt;: [optional] Optional file permissions (default (0640) are only for owner read/write).&#10;    Boolean &lt;b&gt;$useLocking&lt;/b&gt;: [optional] Try to lock log file before doing any writes.&#10;    resource|string|null &lt;b&gt;$stream&lt;/b&gt;: [optional];;d6,46;;b1,0;;m0;;e0;;i0;;o;;k;;lint $level;;pBoolean $bubble;;pint|null $filePermission;;pBoolean $useLocking;;presource|string|null $stream;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\AppEngineFlexHandlerV2.php;f14;60;5;63;;;;vpos;;v;;a FormatterInterface;;r;;d4,61;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="AppIdentityCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f0;56;1;229;;;;vpos;;v;;aCredentialsLoader;;cSignBlobInterface;;cProjectIdProviderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppIdentityCredentials extends CredentialsLoader implements&#10;    SignBlobInterface,&#10;    ProjectIdProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    AppIdentityCredentials supports authorization on Google App Engine.&#10;It can be used to authorize requests using the AuthTokenMiddleware or&#10;AuthTokenSubscriber, but will only succeed if being run on App Engine:&#10;Example:&#10;```&#10;use Google\Auth\Credentials\AppIdentityCredentials;s&#10;use Google\Auth\Middleware\AuthTokenMiddleware;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$gae = new AppIdentityCredentials(&apos;https://www.googleapis.com/auth/books&apos;);s&#10;$middleware = new AuthTokenMiddleware($gae);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_uri&apos; =&gt; &apos;https://www.googleapis.com/books/v1&apos;,&#10;&apos;auth&apos; =&gt; &apos;google_auth&apos;&#10;]);s&#10;$res = $client-&gt;get(&apos;volumes?q=Henry+David+Thoreau&amp;country=US&apos;);s&#10;```;;d0,59;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;82;5;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($scope = array())&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$scope&lt;/b&gt;: One or more scopes.;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;larray $scope;;p;;x">
</treenode>
<treenode node="checkAppEngineContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f12;220;5;228;;;;vpos;;v;;a;;r;;d4,221;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;122;5;137;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Implements FetchAuthTokenInterface#fetchAuthToken.&#10;Fetches the auth tokens using the AppIdentityService if available.&#10;As the AppIdentityService uses protobufs to fetch the access token,&#10;the GuzzleHttp\ClientInterface instance passed in will not be used.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A set of auth related metadata, containing the following keys: - access_token (string) - expiration_time (string);;d4,123;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;215;5;218;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Caching is handled by the underlying AppIdentityService, return empty string&#10;to prevent caching.;;d4,216;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;183;5;192;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientName(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the client name from AppIdentityService.&#10;Subsequent calls to this method will return a cached value.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception If AppEngine SDK or mock is not available.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Not used in this implementation.;;d4,184;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;197;5;207;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,198;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;163;5;172;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectId(callable $httpHander = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the project ID from AppIdentityService.&#10;Returns null if AppIdentityService is unavailable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Not used by this type.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,164;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="onAppEngine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f18;94;5;107;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onAppEngine()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if this an App Engine instance, by accessing the&#10;SERVER_SOFTWARE environment variable (prod) or the APPENGINE_RUNTIME&#10;environment variable (dev).&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true if this an App Engine Instance, false otherwise;;d4,95;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="signBlob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\AppIdentityCredentials.php;f11;148;5;153;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signBlob($stringToSign, $forceOpenSsl = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using AppIdentityService.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception If AppEngine SDK or mock is not available.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$stringToSign&lt;/b&gt;: The string to sign.&#10;    bool &lt;b&gt;$forceOpenSsl&lt;/b&gt;: [optional] Does not apply to this credentials type.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The signature, base64-encoded.;;d4,149;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $stringToSign;;pbool $forceOpenSsl;;p;;x;;x">
</treenode>
</treenode>
<treenode node="AppendStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f0;11;1;243;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AppendStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reads from multiple streams, one after the other.&#10;This is a read-only stream decorator.;;d0,12;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;24;5;29;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $streams = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface[] &lt;b&gt;$streams&lt;/b&gt;: Streams to decorate. Each stream must be readable.;;d4,25;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface[] $streams;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;31;5;39;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="addStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;48;5;60;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addStream(StreamInterface $stream)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a stream to the AppendStream&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if the stream is not readable&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to append. Must be readable.;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;p;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;72;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Closes each attached stream.&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,73;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;91;5;103;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    detach()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detaches each attached stream.&#10;Returns null as it&apos;s not clear which underlying stream resource to return.&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;133;5;138;;;;vpos;;v;;a;;r;;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;62;5;65;;;;vpos;;v;;a;;r;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;239;5;242;;;;vpos;;v;;a;;r;;d4,240;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;118;5;131;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Tries to calculate the size by adding the size of each stream.&#10;If any of the streams do not return a valid number, then the size of the&#10;append stream cannot be determined and null is returned.&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;219;5;222;;;;vpos;;v;;a;;r;;d4,220;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;229;5;232;;;;vpos;;v;;a;;r;;d4,230;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;224;5;227;;;;vpos;;v;;a;;r;;d4,225;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;184;5;217;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    read($length)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reads from all of the appended streams until the length is met or EOF.&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,185;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;140;5;143;;;;vpos;;v;;a;;r;;d4,141;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;150;5;177;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    seek($offset, $whence = SEEK_SET)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attempts to seek to the given position. Only supports SEEK_SET.&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;105;5;108;;;;vpos;;v;;a;;r;;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\AppendStream.php;f11;234;5;237;;;;vpos;;v;;a;;r;;d4,235;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="ApplicationDefaultCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f0;68;1;307;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ApplicationDefaultCredentials&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ApplicationDefaultCredentials obtains the default credentials for&#10;authorizing a request to a Google service.&#10;Application Default Credentials are described here:&#10;https://developers.google.com/accounts/docs/application-default-credentials&#10;This class implements the search for the application default credentials as&#10;described in the link.&#10;It provides three factory methods:&#10;- #get returns the computed credentials object&#10;- #getSubscriber returns an AuthTokenSubscriber built from the credentials object&#10;- #getMiddleware returns an AuthTokenMiddleware built from the credentials object&#10;This allows it to be used as follows with GuzzleHttp\Client:&#10;```&#10;use Google\Auth\ApplicationDefaultCredentials;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$middleware = ApplicationDefaultCredentials::getMiddleware(&#10;&apos;https://www.googleapis.com/auth/taskqueue&apos;&#10;);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_uri&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;auth&apos; =&gt; &apos;google_auth&apos; // authorize all requests&#10;]);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s&#10;```;;d0,69;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f18;150;5;194;;;;vpos;;v;;aCredentialsLoader;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCredentials(&#10;        $scope = null,&#10;        callable $httpHandler = null,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null,&#10;        $quotaProject = null,&#10;        $defaultScope = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains an AuthTokenMiddleware which will fetch an access token to use in&#10;the Authorization header. The middleware is configured with the default&#10;FetchAuthTokenInterface implementation to use in this environment.&#10;If supplied, $scope is used to in creating the credentials instance if&#10;this does not fallback to the Compute Engine defaults.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException if no implementation can be obtained.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$scope&lt;/b&gt;: the scope of the access request, expressed either as an Array or as a space-delimited String.&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: A cache implementation, may be provided if you have one already available for use.&#10;    string &lt;b&gt;$quotaProject&lt;/b&gt;: specifies a project to bill for access charges associated with the request.&#10;    string|array &lt;b&gt;$defaultScope&lt;/b&gt;: The default scope to use if no user-defined scopes exist, expressed either as an Array or as a space-delimited string.;;d6,157;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|array $scope;;pcallable $httpHandler;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;pstring $quotaProject;;pstring|array $defaultScope;;p;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getIdTokenCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f18;237;5;281;;;;vpos;;v;;aCredentialsLoader;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIdTokenCredentials(&#10;        $targetAudience,&#10;        callable $httpHandler = null,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains the default FetchAuthTokenInterface implementation to use&#10;in this environment, configured with a $targetAudience for fetching an ID&#10;token.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException if no implementation can be obtained.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException if JSON &quot;type&quot; key is invalid&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$targetAudience&lt;/b&gt;: The audience for the ID token.&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: A cache implementation, may be provided if you have one already available for use.;;d6,242;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $targetAudience;;pcallable $httpHandler;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getIdTokenMiddleware;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f18;212;5;221;;;;vpos;;v;;aAuthTokenMiddleware;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIdTokenMiddleware(&#10;        $targetAudience,&#10;        callable $httpHandler = null,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains an AuthTokenMiddleware which will fetch an ID token to use in the&#10;Authorization header. The middleware is configured with the default&#10;FetchAuthTokenInterface implementation to use in this environment.&#10;If supplied, $targetAudience is used to set the &quot;aud&quot; on the resulting&#10;ID token.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException if no implementation can be obtained.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$targetAudience&lt;/b&gt;: The audience for the ID token.&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: A cache implementation, may be provided if you have one already available for use.;;d6,217;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $targetAudience;;pcallable $httpHandler;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getMiddleware;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f18;115;5;125;;;;vpos;;v;;aAuthTokenMiddleware;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMiddleware(&#10;        $scope = null,&#10;        callable $httpHandler = null,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null,&#10;        $quotaProject = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains an AuthTokenMiddleware that uses the default FetchAuthTokenInterface&#10;implementation to use in this environment.&#10;If supplied, $scope is used to in creating the credentials instance if&#10;this does not fallback to the compute engine defaults.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException if no implementation can be obtained.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array: scope the scope of the access request, expressed either as an Array or as a space-delimited String.&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: A cache implementation, may be provided if you have one already available for use.&#10;    string &lt;b&gt;$quotaProject&lt;/b&gt;: specifies a project to bill for access charges associated with the request.;;d6,121;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|array;;pcallable $httpHandler;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;pstring $quotaProject;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getSubscriber;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f18;86;5;95;;;;vpos;;v;;aAuthTokenSubscriber;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSubscriber(&#10;        $scope = null,&#10;        callable $httpHandler = null,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains an AuthTokenSubscriber that uses the default FetchAuthTokenInterface&#10;implementation to use in this environment.&#10;If supplied, $scope is used to in creating the credentials instance if&#10;this does not fallback to the compute engine defaults.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException if no implementation can be obtained.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array: scope the scope of the access request, expressed either as an Array or as a space-delimited String.&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: A cache implementation, may be provided if you have one already available for use.;;d6,91;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|array;;pcallable $httpHandler;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x;;x;;x">
</treenode>
<treenode node="notFound;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f19;283;5;291;;;;vpos;;v;;a;;r;;d4,284;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="onGce;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ApplicationDefaultCredentials.php;f19;293;5;306;;;;vpos;;v;;a;;r;;d6,297;;b3,5;;m0;;e0;;i0;;o;;k;;lhttpHandler;;pcacheConfig;;pcache;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="ArrayHasSameValuesToken;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\ArrayHasSameValuesToken.php;f0;13;1;80;;;;vpos;;v;;aTokenInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ArrayHasSameValuesToken implements TokenInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ArrayHasSameValuesToken implements TokenInterface and is used for testing&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\ArrayHasSameValuesToken.php;f11;27;5;31;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($value, StringUtil $util = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ArrayHasSameValuesToken constructor.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;&#10;    StringUtil|null &lt;b&gt;$util&lt;/b&gt;;;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;pStringUtil|null $util;;p;;x;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\ArrayHasSameValuesToken.php;f11;70;5;79;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __toString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="compare;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\ArrayHasSameValuesToken.php;f12;45;5;51;;;;vpos;;v;;a;;r;;d4,46;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;pargument;;p;;x;;x">
</treenode>
<treenode node="isLast;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\ArrayHasSameValuesToken.php;f11;59;5;62;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isLast()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="scoreArgument;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\ArrayHasSameValuesToken.php;f11;40;5;43;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    scoreArgument($argument)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$argument&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |int;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $argument;;p;;x">
</treenode>
</treenode>
<treenode node="ArrayTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ArrayTrait.php;f0;22;1;119;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ArrayTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides basic array helper methods.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="arrayFilterRemoveNull;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ArrayTrait.php;f12;87;5;92;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    arrayFilterRemoveNull(array $arr)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Just like array_filter(), but preserves falsey values except null.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$arr&lt;/b&gt;;;d4,88;;b3,0;;m0;;e0;;i0;;o;;k;;larray $arr;;p;;x">
</treenode>
<treenode node="arrayMergeRecursive;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ArrayTrait.php;f12;105;5;118;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    arrayMergeRecursive(array $array1, array $array2)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A method, similar to PHP&apos;s `array_merge_recursive`, with two differences.&#10;1. Keys in $array2 take precedence over keys in $array1.&#10;2. Non-array keys found in both inputs are not transformed into an array&#10;and appended. Rather, the value in $array2 is used.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$array1&lt;/b&gt;&#10;    array &lt;b&gt;$array2&lt;/b&gt;;;d4,106;;b3,0;;m0;;e0;;i0;;o;;k;;larray $array1;;parray $array2;;p;;x;;x">
</treenode>
<treenode node="isAssoc;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ArrayTrait.php;f12;76;5;79;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isAssoc(array $arr)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine whether given array is associative.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$arr&lt;/b&gt;;;d4,77;;b3,0;;m0;;e0;;i0;;o;;k;;larray $arr;;p;;x">
</treenode>
<treenode node="pluck;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ArrayTrait.php;f12;33;5;48;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pluck($key, array &amp;$arr, $isRequired = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Pluck a value out of an array.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;&#10;    array &lt;b&gt;$arr&lt;/b&gt;&#10;    bool &lt;b&gt;$isRequired&lt;/b&gt;;;d4,34;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $key;;parray $arr;;pbool $isRequired;;p;;x;;x;;x">
</treenode>
<treenode node="pluckArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ArrayTrait.php;f12;57;5;68;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pluckArray(array $keys, &amp;$arr)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Pluck a subset of an array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[] &lt;b&gt;$keys&lt;/b&gt;&#10;    array &lt;b&gt;$arr&lt;/b&gt;;;d4,58;;b3,0;;m0;;e0;;i0;;o;;k;;lstring[] $keys;;parray $arr;;p;;x;;x">
</treenode>
</treenode>
<treenode node="AuthTokenMiddleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\AuthTokenMiddleware.php;f0;34;1;147;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AuthTokenMiddleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    AuthTokenMiddleware is a Guzzle Middleware that adds an Authorization header&#10;provided by an object implementing FetchAuthTokenInterface.&#10;The FetchAuthTokenInterface#fetchAuthToken is used to obtain a hash;s one of&#10;the values value in that hash is added as the authorization header.&#10;Requests will be accessed with the authorization header:&#10;&apos;authorization&apos; &apos;Bearer &lt;value of auth_token&gt;&apos;;;d0,35;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\AuthTokenMiddleware.php;f11;58;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        FetchAuthTokenInterface $fetcher,&#10;        callable $httpHandler = null,&#10;        callable $tokenCallback = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new AuthTokenMiddleware.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FetchAuthTokenInterface &lt;b&gt;$fetcher&lt;/b&gt;: is used to fetch the auth token&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: (optional) callback which delivers psr7 request&#10;    callable &lt;b&gt;$tokenCallback&lt;/b&gt;: (optional) function to be called when a new token is fetched.;;d6,62;;b1,0;;m0;;e0;;i0;;o;;k;;lFetchAuthTokenInterface $fetcher;;pcallable $httpHandler;;pcallable $tokenCallback;;p;;x;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\AuthTokenMiddleware.php;f11;93;5;112;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(callable $handler)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the request with an Authorization header when auth is &apos;google_auth&apos;.&#10;use Google\Auth\Middleware\AuthTokenMiddleware;s&#10;use Google\Auth\OAuth2;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$config = [..&lt;oauth config param&gt;.];s&#10;$oauth2 = new OAuth2($config)&#10;$middleware = new AuthTokenMiddleware($oauth2);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_uri&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;auth&apos; =&gt; &apos;google_auth&apos; // authorize all requests&#10;]);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s&#10;\Closure&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$handler&lt;/b&gt;;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $handler;;p;;x">
</treenode>
<treenode node="fetchToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\AuthTokenMiddleware.php;f12;119;5;139;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Call fetcher to fetch the token.;;d4,120;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\AuthTokenMiddleware.php;f12;141;5;146;;;;vpos;;v;;a;;r;;d4,142;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="AuthTokenSubscriber;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\AuthTokenSubscriber.php;f0;36;1;135;;;;vpos;;v;;aSubscriberInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class AuthTokenSubscriber implements SubscriberInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    AuthTokenSubscriber is a Guzzle Subscriber that adds an Authorization header&#10;provided by an object implementing FetchAuthTokenInterface.&#10;The FetchAuthTokenInterface#fetchAuthToken is used to obtain a hash;s one of&#10;the values value in that hash is added as the authorization header.&#10;Requests will be accessed with the authorization header:&#10;&apos;authorization&apos; &apos;Bearer &lt;value of auth_token&gt;&apos;;;d0,37;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\AuthTokenSubscriber.php;f11;60;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        FetchAuthTokenInterface $fetcher,&#10;        callable $httpHandler = null,&#10;        callable $tokenCallback = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new AuthTokenSubscriber.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FetchAuthTokenInterface &lt;b&gt;$fetcher&lt;/b&gt;: is used to fetch the auth token&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: (optional) http client to fetch the token.&#10;    callable &lt;b&gt;$tokenCallback&lt;/b&gt;: (optional) function to be called when a new token is fetched.;;d6,64;;b1,0;;m0;;e0;;i0;;o;;k;;lFetchAuthTokenInterface $fetcher;;pcallable $httpHandler;;pcallable $tokenCallback;;p;;x;;x;;x">
</treenode>
<treenode node="getEvents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\AuthTokenSubscriber.php;f11;73;5;76;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getEvents()&#10;;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\AuthTokenSubscriber.php;f12;129;5;134;;;;vpos;;v;;a;;r;;d4,130;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="onBefore;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\AuthTokenSubscriber.php;f11;102;5;127;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onBefore(BeforeEvent $event)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the request with an Authorization header when auth is &apos;fetched_auth_token&apos;.&#10;Example:&#10;```&#10;use GuzzleHttp\Client;s&#10;use Google\Auth\OAuth2;s&#10;use Google\Auth\Subscriber\AuthTokenSubscriber;s&#10;$config = [..&lt;oauth config param&gt;.];s&#10;$oauth2 = new OAuth2($config)&#10;$subscriber = new AuthTokenSubscriber($oauth2);s&#10;$client = new Client([&#10;&apos;base_url&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;defaults&apos; =&gt; [&apos;auth&apos; =&gt; &apos;google_auth&apos;]&#10;]);s&#10;$client-&gt;getEmitter()-&gt;attach($subscriber);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    BeforeEvent &lt;b&gt;$event&lt;/b&gt;;;d4,103;;b1,0;;m0;;e0;;i0;;o;;k;;lBeforeEvent $event;;p;;x">
</treenode>
</treenode>
<treenode node="BadRequestException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\BadRequestException.php;f0;23;1;26;;;;vpos;;v;;aServiceException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BadRequestException extends ServiceException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a request fails due to an error in the request.&#10;In REST context, this exception indicates a status code 400.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="BadResponseException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\BadResponseException.php;f0;10;1;38;;;;vpos;;v;;aRequestException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BadResponseException extends RequestException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception when an HTTP error occurs (4xx or 5xx error);;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\BadResponseException.php;f11;12;5;20;;;;vpos;;v;;a;;r;;d6,18;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;prequest;;presponse;;pprevious;;phandlerContext;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\BadResponseException.php;f11;33;5;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResponse(): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This function narrows the return type from the parent class and does not allow it to be nullable.;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\BadResponseException.php;f11;25;5;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasResponse(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Current exception and the ones that extend it will always have a response.;;d4,26;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="BatchDaemon;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchDaemon.php;f0;34;1;160;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BatchDaemon&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An external daemon script for executing the batch jobs.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;&#10;The system test is responsible for testing this class.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Tests\System\Core\Batch}&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,35;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchDaemon.php;f11;56;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($entrypoint)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prepare the descriptor spec and install signal handlers.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$entrypoint&lt;/b&gt;: Daemon&apos;s entrypoint script.;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $entrypoint;;p;;x">
</treenode>
<treenode node="job;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchDaemon.php;f11;156;5;159;;;;vpos;;v;;aJobInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    job($idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch the child job by id.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: The id of the job to find;;d4,157;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchDaemon.php;f11;82;5;148;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    run()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A loop for the parent.;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="BatchDaemonTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchDaemonTrait.php;f0;27;1;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait BatchDaemonTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A utility trait related to BatchDaemon functionality.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="isDaemonRunning;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchDaemonTrait.php;f12;34;5;42;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isDaemonRunning()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns whether or not the BatchDaemon is running.;;d4,35;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="BatchJob;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f0;29;1;206;;;;vpos;;v;;aJobInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BatchJob implements JobInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represent batch jobs.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_BATCH_SIZE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f9;31;28;31;;;;vpos;;v;;a;;r100;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_CALL_PERIOD;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f9;32;29;32;;;;vpos;;v;;a;;r2.0;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_WORKERS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f9;33;25;33;;;;vpos;;v;;a;;r1;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f11;75;5;95;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $identifier,&#10;        $func,&#10;        $idNum,&#10;        array $options = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: int $batchSize The size of the batch. **Defaults to** `100`.&#10;&lt;b&gt;type&lt;/b&gt;: float $callPeriod The period in seconds from the last execution&#10;to force executing the job. **Defaults to** `2.0`.&#10;&lt;b&gt;type&lt;/b&gt;: int $numWorkers The number of child processes. It only takes&#10;effect with the {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Batch\BatchDaemon}.&#10;**Defaults to** `1`.&#10;&lt;b&gt;type&lt;/b&gt;: string $bootstrapFile A file to load before executing the&#10;job. It&apos;s needed for registering global functions.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;    callable &lt;b&gt;$func&lt;/b&gt;: Any Callable except for Closure. The callable should accept an array of items as the first argument.&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id for the job.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d6,80;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;pcallable $func;;pint $idNum;;parray $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="callFunc;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f11;181;5;184;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    callFunc(array $items = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finish any pending activity for this job.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$items&lt;/b&gt;;;d4,182;;b1,0;;m0;;e0;;i0;;o;;k;;larray $items;;p;;x">
</treenode>
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f11;163;5;170;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flush(array $items = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finish any pending activity for this job.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$items&lt;/b&gt;;;d4,164;;b1,0;;m0;;e0;;i0;;o;;k;;larray $items;;p;;x">
</treenode>
<treenode node="getBatchSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f11;202;5;205;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBatchSize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the batch size.;;d4,203;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCallPeriod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f11;192;5;195;;;;vpos;;v;;afloat;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCallPeriod()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the period in seconds from the last execution to force&#10;executing the job.;;d4,193;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchJob.php;f11;100;5;155;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    run()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Run the job.;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="BatchRunner;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f0;29;1;211;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BatchRunner&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A class for executing jobs in batch.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;58;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        ConfigStorageInterface $configStorage = null,&#10;        ProcessItemInterface $processor = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine internal implementation and loads the configuration.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConfigStorageInterface &lt;b&gt;$configStorage&lt;/b&gt;: [optional] The ConfigStorage object to use. **Defaults to** null. This is only for testing purpose.&#10;    ProcessItemInterface &lt;b&gt;$processor&lt;/b&gt;: [optional] The processor object to use. **Defaults to** null. This is only for testing purpose.;;d6,61;;b1,0;;m0;;e0;;i0;;o;;k;;lConfigStorageInterface $configStorage;;pProcessItemInterface $processor;;p;;x;;x">
</treenode>
<treenode node="getJobFromId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;150;5;153;;;;vpos;;v;;aBatchJob;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getJobFromId($identifier)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the job with the given identifier.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;p;;x">
</treenode>
<treenode node="getJobFromIdNum;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;162;5;165;;;;vpos;;v;;aBatchJob;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getJobFromIdNum($idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the job with the given numeric id.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id of the job.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,163;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="getJobs;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;172;5;175;;;;vpos;;v;;aBatchJob;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getJobs()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get all the jobs.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,173;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;207;5;210;;;;vpos;;v;;aProcessItemInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProcessor()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the item processor.;;d4,208;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="loadConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;183;5;200;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    loadConfig()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load the config from the storage.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when it fails to load the config.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true on success;;d4,184;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="registerJob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;96;5;120;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    registerJob($identifier, $func, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Register a job for batch execution.&#10;&lt;b&gt;type&lt;/b&gt;: int $batchSize The size of the batch.&#10;&lt;b&gt;type&lt;/b&gt;: float $callPeriod The period in seconds from the last execution&#10;to force executing the job.&#10;&lt;b&gt;type&lt;/b&gt;: int $numWorkers The number of child processes. It only takes&#10;effect with the {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Batch\BatchDaemon}.&#10;&lt;b&gt;type&lt;/b&gt;: string $bootstrapFile A file to load before executing the&#10;job. It&apos;s needed for registering global functions.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException When receiving a Closure.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;    callable &lt;b&gt;$func&lt;/b&gt;: Any Callable except for Closure. The callable should accept an array of items as the first argument.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true on success, false on failure;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;pcallable $func;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="submitItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchRunner.php;f11;131;5;141;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    submitItem($identifier, $item)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Submit an item.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;    mixed &lt;b&gt;$item&lt;/b&gt;: It needs to be serializable.;;d4,132;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;pmixed $item;;p;;x;;x">
</treenode>
</treenode>
<treenode node="BatchTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchTrait.php;f0;29;1;208;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait BatchTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A trait to assist in the registering and processing of batch jobs.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchTrait.php;f11;69;5;78;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flush()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Flushes items in the batch queue that have yet to be delivered. Please&#10;note this will have no effect when using the batch daemon.;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCallback;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchTrait.php;f23;132;45;132;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns an array representation of a callback which will be used to write&#10;batch items.;;d-1,-1;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchTrait.php;f11;87;5;124;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(array $items)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Deliver a list of items in a batch call.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$items&lt;/b&gt;;;d4,88;;b1,0;;m0;;e0;;i0;;o;;k;;larray $items;;p;;x">
</treenode>
<treenode node="setCommonBatchProperties;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\BatchTrait.php;f12;168;5;207;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setCommonBatchProperties(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: resource $debugOutputResource A resource to output debug output&#10;to. **Defaults to** `php://stderr`.&#10;&lt;b&gt;type&lt;/b&gt;: bool $debugOutput Whether or not to output debug information.&#10;Please note that unless a debug output resource is configured&#10;this setting will only apply to CLI based applications.&#10;**Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: array $batchOptions A set of options for a BatchJob.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Batch\BatchJob::__construct()} for&#10;more details.&#10;**Defaults to** [&apos;batchSize&apos; =&gt; 1000,&#10;&apos;callPeriod&apos; =&gt; 2.0,&#10;&apos;numWorkers&apos; =&gt; 2].&#10;&lt;b&gt;type&lt;/b&gt;: array $clientConfig A config used to construct the client upon&#10;which requests will be made.&#10;&lt;b&gt;type&lt;/b&gt;: BatchRunner $batchRunner A BatchRunner object. Mainly used for&#10;the tests to inject a mock. **Defaults to** a newly created&#10;BatchRunner.&#10;&lt;b&gt;type&lt;/b&gt;: string $identifier An identifier for the batch job. This&#10;value must be unique across all job configs.&#10;&lt;b&gt;type&lt;/b&gt;: string $batchMethod The name of the batch method used to&#10;deliver items.&#10;&lt;b&gt;type&lt;/b&gt;: ClosureSerializerInterface $closureSerializer An implementation&#10;responsible for serializing closures used in the&#10;`$clientConfig`. This is especially important when using the&#10;batch daemon. **Defaults to**&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Batch\OpisClosureSerializer} if the&#10;`opis/closure` library is installed.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,169;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
</treenode>
<treenode node="BeforeValidException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\BeforeValidException.php;f0;3;1;5;;;;vpos;;v;;aUnexpectedValueException;;c;;r;;d0,4;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="Blob;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Blob.php;f0;40;1;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Blob&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a Blob value.&#10;Blobs can be used to store binary across data various Google Cloud services.&#10;Example:&#10;```&#10;use Google\Cloud\Core\Blob;s&#10;$blob = new Blob(file_get_contents(__DIR__ .&apos;/family-photo.jpg&apos;));s&#10;```&#10;```&#10;// Get the value of a blob by casting to a string.&#10;echo (string) $blob;s&#10;```;;d0,41;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Blob.php;f11;52;5;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a blob&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|resource|StreamInterface &lt;b&gt;$value&lt;/b&gt;: The blob value;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|resource|StreamInterface $value;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Blob.php;f11;78;5;81;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __toString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cast the blob to a string&#10;&lt;b&gt;access&lt;/b&gt;: private;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Blob.php;f11;67;5;70;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the blob contents as a stream&#10;Example:&#10;```&#10;$value = $blob-&gt;get();s&#10;```;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="BodySummarizer;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\BodySummarizer.php;f6;6;1;27;;;;vpos;;v;;aBodySummarizerInterface;;c;;r;;d0,7;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\BodySummarizer.php;f11;13;5;16;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m0;;e0;;i0;;o;;k;;ltruncateAt;;p;;x">
</treenode>
<treenode node="summarize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\BodySummarizer.php;f11;21;57;21;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a summarized message body.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;p;;x">
</treenode>
</treenode>
<treenode node="BrowserConsoleHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f0;22;1;242;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BrowserConsoleHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler sending logs to browser&apos;s javascript console with no browser extension required&#10;&lt;b&gt;author&lt;/b&gt;: Olivier Poitrey &lt;rs&#10;&lt;b&gt;dailymotion&lt;/b&gt;: .com&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="call;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;231;5;236;;;;vpos;;v;;a string;;r;;d4,232;;b3,5;;m0;;e0;;i0;;o;;k;;largs;;p;;x">
</treenode>
<treenode node="call_array;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;238;5;241;;;;vpos;;v;;a string;;r;;d4,239;;b3,5;;m0;;e0;;i0;;o;;k;;lmethod;;pargs;;p;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f11;77;5;80;;;;vpos;;v;;a void;;r;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dump;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;207;5;224;;;;vpos;;v;;a array;;r;;d4,208;;b3,5;;m0;;e0;;i0;;o;;k;;ltitle;;pdict;;p;;x;;x">
</treenode>
<treenode node="generateScript;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;144;5;165;;;;vpos;;v;;a string;;r;;d4,145;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f14;36;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: }&#10;Formatted output may contain some formatting markers to be transferred to `console.log` using the %c format.&#10;Example of formatted string:&#10;You can do [[blue text]]{color: blue} or [[green background]]{background-color: green;s color: white};;d4,37;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getResponseFormat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f21;124;5;142;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResponseFormat(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks the format of the response&#10;If Content-Type is set to application/javascript or text/javascript -&gt; js&#10;If Content-Type is set to text/html, or is unset -&gt; html&#10;If Content-Type is anything else -&gt; unknown&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   One of &apos;js&apos;, &apos;html&apos; or &apos;unknown&apos;;;d4,125;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleCustomStyles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;187;5;205;;;;vpos;;v;;a string;;r;;d4,188;;b3,5;;m0;;e0;;i0;;o;;k;;lstyle;;pstring;;p;;x;;x">
</treenode>
<treenode node="handleStyles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;167;5;185;;;;vpos;;v;;a array;;r;;d4,168;;b3,5;;m0;;e0;;i0;;o;;k;;lformatted;;p;;x">
</treenode>
<treenode node="quote;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f19;226;5;229;;;;vpos;;v;;a string;;r;;d4,227;;b3,5;;m0;;e0;;i0;;o;;k;;larg;;p;;x">
</treenode>
<treenode node="registerShutdownFunction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f14;100;5;105;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    registerShutdownFunction(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper for register_shutdown_function to allow overriding;;d4,101;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f11;82;5;87;;;;vpos;;v;;a;;r;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="resetStatic;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f18;92;5;95;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resetStatic(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Forget all logged records;;d4,93;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f18;60;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert records to javascript console commands and send it to the browser.&#10;This method is automatically called on PHP shutdown if output is HTML or Javascript.;;d4,61;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f14;44;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,45;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="writeOutput;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BrowserConsoleHandler.php;f21;110;5;113;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    writeOutput(string $str): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper for echo to allow overriding;;d4,111;;b2,5;;m0;;e0;;i0;;o;;k;;lstr;;p;;x">
</treenode>
</treenode>
<treenode node="Bucket;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f0;50;1;1609;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Bucket&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Buckets are the basic containers that hold your data. Everything that you&#10;store in Google Cloud Storage must be contained in a bucket.&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$bucket = $storage-&gt;bucket(&apos;my-bucket&apos;);s&#10;```;;d0,51;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="NOTIFICATION_TEMPLATE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f9;55;31;55;;;;vpos;;v;;a;;r&apos;//pubsub.googleapis.com/%s&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TOPIC_REGEX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f9;57;21;57;;;;vpos;;v;;a;;r&apos;/projects\/[^\/]*\/topics\/(.*)/&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TOPIC_TEMPLATE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f9;56;24;56;;;;vpos;;v;;a;;r&apos;projects/%s/topics/%s&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;100;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ConnectionInterface $connection, $name, array $info = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: Represents a connection to Cloud Storage.&#10;    string &lt;b&gt;$name&lt;/b&gt;: The bucket&apos;s name.&#10;    array &lt;b&gt;$info&lt;/b&gt;: [optional] The bucket&apos;s metadata.;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pstring $name;;parray $info;;p;;x;;x;;x">
</treenode>
<treenode node="acl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;126;5;129;;;;vpos;;v;;aAcl;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    acl()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Configure ACL for this bucket.&#10;Example:&#10;```&#10;$acl = $bucket-&gt;acl();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/access-control More about Access Control Lists&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An ACL instance configured to handle the bucket&apos;s access control policies.;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="compose;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1036;5;1088;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    compose(array $sourceObjects, $name, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Composes a set of objects into a single object.&#10;Please note that all objects to be composed must come from the same&#10;bucket.&#10;Example:&#10;```&#10;$sourceObjects = [&apos;log1.txt&apos;, &apos;log2.txt&apos;];s&#10;$singleObject = $bucket-&gt;compose($sourceObjects, &apos;combined-logs.txt&apos;);s&#10;```&#10;```&#10;// Use an instance of StorageObject.&#10;$sourceObjects = [&#10;$bucket-&gt;object(&apos;log1.txt&apos;),&#10;$bucket-&gt;object(&apos;log2.txt&apos;)&#10;];s&#10;$singleObject = $bucket-&gt;compose($sourceObjects, &apos;combined-logs.txt&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/compose Objects compose API documentation&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the composed&#10;object. Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata Metadata to apply to the composed object. The&#10;available options for metadata are outlined at the&#10;[JSON API docs](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request-body).&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on whether the object&apos;s current generation&#10;matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional on whether the object&apos;s current&#10;metageneration matches the given value.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[]|StorageObject[] &lt;b&gt;$sourceObjects&lt;/b&gt;: The objects to compose.&#10;    string &lt;b&gt;$name&lt;/b&gt;: The name of the composed object.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,1037;;b1,0;;m0;;e0;;i0;;o;;k;;lstring[]|StorageObject[] $sourceObjects;;pstring $name;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="createNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;761;5;776;;;;vpos;;v;;aNotification;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createNotification($topic, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Cloud PubSub notification.&#10;Please note, the desired topic must be given the IAM role of&#10;&quot;pubsub.publisher&quot; from the service account associated with the project&#10;which contains the bucket you would like to receive notifications from.&#10;Please see the example below for a programmatic example of achieving&#10;this.&#10;Example:&#10;```&#10;// Update the permissions on the desired topic prior to creating the&#10;// notification.&#10;use Google\Cloud\Core\Iam\PolicyBuilder;s&#10;use Google\Cloud\PubSub\PubSubClient;s&#10;$pubSub = new PubSubClient();s&#10;$topicName = &apos;my-topic&apos;;s&#10;$serviceAccountEmail = $storage-&gt;getServiceAccount();s&#10;$topic = $pubSub-&gt;topic($topicName);s&#10;$iam = $topic-&gt;iam();s&#10;$updatedPolicy = (new PolicyBuilder($iam-&gt;policy()))&#10;-&gt;addBinding(&apos;roles/pubsub.publisher&apos;, [&#10;&quot;serviceAccount:$serviceAccountEmail&quot;&#10;])&#10;-&gt;result();s&#10;$iam-&gt;setPolicy($updatedPolicy);s&#10;$notification = $bucket-&gt;createNotification($topicName);s&#10;```&#10;```&#10;// Use a fully qualified topic name.&#10;$notification = $bucket-&gt;createNotification(&apos;projects/my-project/topics/my-topic&apos;);s&#10;```&#10;```&#10;// Provide a Topic object from the Cloud PubSub component.&#10;use Google\Cloud\PubSub\PubSubClient;s&#10;$pubSub = new PubSubClient();s&#10;$topic = $pubSub-&gt;topic(&apos;my-topic&apos;);s&#10;$notification = $bucket-&gt;createNotification($topic);s&#10;```&#10;```&#10;// Supplying event types to trigger the notifications.&#10;$notification = $bucket-&gt;createNotification(&apos;my-topic&apos;, [&#10;&apos;event_types&apos; =&gt; [&#10;&apos;OBJECT_DELETE&apos;,&#10;&apos;OBJECT_METADATA_UPDATE&apos;&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/pubsub-notifications Cloud PubSub Notifications.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/notifications/insert Notifications insert API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/reporting-changes Registering Object Changes.&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&lt;b&gt;type&lt;/b&gt;: array $custom_attributes An optional list of additional&#10;attributes to attach to each Cloud PubSub message published for&#10;this notification subscription.&#10;&lt;b&gt;type&lt;/b&gt;: array $event_types If present, only send notifications about&#10;listed event types. If empty, sent notifications for all event&#10;types. Acceptablue values include `&quot;OBJECT_FINALIZE&quot;`,&#10;`&quot;OBJECT_METADATA_UPDATE&quot;`, `&quot;OBJECT_DELETE&quot;`&#10;, `&quot;OBJECT_ARCHIVE&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $object_name_prefix If present, only apply this&#10;notification configuration to object names that begin with this&#10;prefix.&#10;&lt;b&gt;type&lt;/b&gt;: string $payload_format The desired content of the Payload.&#10;Acceptable values include `&quot;JSON_API_V1&quot;`, `&quot;NONE&quot;`.&#10;**Defaults to** `&quot;JSON_API_V1&quot;`.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException When providing a type other than string&#10;or {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\PubSub\Topic} as $topic.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException When a project ID has not been detected.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this&#10;method or class is ready for use, it may change before release in&#10;backwards-incompatible ways. Please use with caution, and test&#10;thoroughly when upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|Topic &lt;b&gt;$topic&lt;/b&gt;: The topic used to publish notifications.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,762;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|Topic $topic;;parray $options;;p;;x;;x">
</treenode>
<treenode node="currentLifecycle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1241;5;1248;;;;vpos;;v;;aLifecycle;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    currentLifecycle(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves a lifecycle builder preconfigured with the lifecycle rules that&#10;already exists on the bucket. Use this if you want to make updates to an&#10;existing configuration without removing existing rules, as would be the&#10;case when using {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::lifecycle()}.&#10;This builder is intended to be used in tandem with&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageClient::createBucket()} and&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::update()}.&#10;Please note, this method may trigger a network request in order to fetch&#10;the existing lifecycle rules from the server.&#10;Example:&#10;```&#10;$lifecycle = $bucket-&gt;currentLifecycle()&#10;-&gt;addDeleteRule([&#10;&apos;age&apos; =&gt; 50,&#10;&apos;isLive&apos; =&gt; true&#10;]);s&#10;$bucket-&gt;update([&#10;&apos;lifecycle&apos; =&gt; $lifecycle&#10;]);s&#10;```&#10;```&#10;// Iterate over existing rules.&#10;$lifecycle = $bucket-&gt;currentLifecycle();s&#10;foreach ($lifecycle as $rule) {&#10;print_r($rule);s&#10;}&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/lifecycle Object Lifecycle Management API Documentation&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.;;d4,1242;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="defaultAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;143;5;146;;;;vpos;;v;;aAcl;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    defaultAcl()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Configure default object ACL for this bucket.&#10;Example:&#10;```&#10;$acl = $bucket-&gt;defaultAcl();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/access-control More about Access Control Lists&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An ACL instance configured to handle the bucket&apos;s default object access control policies.;;d4,144;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;877;5;880;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delete the bucket.&#10;Example:&#10;```&#10;$bucket-&gt;delete();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/delete Buckets delete API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch If set, only deletes the bucket&#10;if its metageneration matches this value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch If set, only deletes the&#10;bucket if its metageneration does not match this value.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,878;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="exists;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;160;5;169;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    exists()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check whether or not the bucket exists.&#10;Example:&#10;```&#10;if ($bucket-&gt;exists()) {&#10;echo &apos;Bucket exists!&apos;;s&#10;}&#10;```;;d4,161;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="generateSignedPostPolicyV4;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1547;5;1560;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateSignedPostPolicyV4($objectName, $expires, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a signed upload policy for uploading objects.&#10;This method generates and signs a policy document. You can use policy&#10;documents to allow visitors to a website to upload files to Google Cloud&#10;Storage without giving them direct write access.&#10;Google Cloud PHP does not support v2 post policies.&#10;Example:&#10;```&#10;$policy = $bucket-&gt;generateSignedPostPolicyV4($objectName, new \DateTime(&apos;tomorrow&apos;), [&#10;&apos;conditions&apos; =&gt; [&#10;[&apos;content-length-range&apos;, 0, 255]&#10;],&#10;&apos;fields&apos; =&gt; [&#10;&apos;x-goog-meta-hello&apos; =&gt; &apos;world&apos;,&#10;&apos;success_action_redirect&apos; =&gt; &apos;https://google.com&apos;&#10;]&#10;]);s&#10;echo &apos;&lt;form action=&quot;&apos; . $policy[&apos;url&apos;] . &apos;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&apos;;s&#10;foreach ($policy[&apos;fields&apos;] as $name =&gt; $value) {&#10;echo &apos;&lt;input type=&quot;hidden&quot; name=&quot;&apos; . $name . &apos;&quot; value=&quot;&apos; . $value . &apos;&quot;&gt;&apos;;s&#10;}&#10;echo &apos;Upload a file!&lt;br&gt;&apos;;s&#10;echo &apos;&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&apos;;s&#10;echo &apos;&lt;button type=&quot;submit&quot;&gt;Submit!&lt;/button&gt;&apos;;s&#10;echo &apos;&lt;/form&gt;&apos;;s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/xml-api/post-object#policydocument Policy Documents&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Timestamp},&#10;[http://php.net/datetimeimmutable](`\DateTimeImmutable`), or a&#10;UNIX timestamp as an integer.&#10;&lt;b&gt;type&lt;/b&gt;: string $bucketBoundHostname The hostname for the bucket, for&#10;instance `cdn.example.com`. May be used for Google Cloud Load&#10;Balancers or for custom bucket CNAMEs. **Defaults to**&#10;`storage.googleapis.com`.&#10;&lt;b&gt;type&lt;/b&gt;: array $conditions A list of arrays containing policy matching&#10;conditions (e.g. `eq`, `starts-with`, `content-length-range`).&#10;&lt;b&gt;type&lt;/b&gt;: array $fields Additional form fields (do not include&#10;`x-goog-signature`, `file`, `policy` or fields with an&#10;`x-ignore` prefix), given as key/value pairs.&#10;&lt;b&gt;type&lt;/b&gt;: bool $forceOpenssl If true, OpenSSL will be used regardless of&#10;whether phpseclib is available. **Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile Keyfile data to use in place of the keyfile with&#10;which the client was constructed. If `$options.keyFilePath` is&#10;set, this option is ignored.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath A path to a valid Keyfile to use in place&#10;of the keyfile with which the client was constructed.&#10;&lt;b&gt;type&lt;/b&gt;: string $scheme Either `http` or `https`. Only used if a custom&#10;hostname is provided via `$options.bucketBoundHostname`. If a&#10;custom bucketBoundHostname is provided, **defaults to** `http`.&#10;In all other cases, **defaults to** `https`.&#10;&lt;b&gt;type&lt;/b&gt;: string|array $scopes One or more authentication scopes to be&#10;used with a key file. This option is ignored unless&#10;`$options.keyFile` or `$options.keyFilePath` is set.&#10;&lt;b&gt;type&lt;/b&gt;: bool $virtualHostedStyle If `true`, URL will be of form&#10;`mybucket.storage.googleapis.com`. If `false`,&#10;`storage.googleapis.com/mybucket`. **Defaults to** `false`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$objectName&lt;/b&gt;: The path to the file in Google Cloud Storage, relative to the bucket.&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: Specifies when the URL will expire. May provide an instance of {&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An associative array, containing (string) `uri` and (array) `fields` keys.;;d4,1548;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $objectName;;pTimestamp|\DateTimeInterface|int $expires;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="getFormattedTopic;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f12;1581;5;1608;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormattedTopic($topic)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a topic name in its fully qualified format.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Topic|string &lt;b&gt;$topic&lt;/b&gt;;;d4,1582;;b3,0;;m0;;e0;;i0;;o;;k;;lTopic|string $topic;;p;;x">
</treenode>
<treenode node="getResumableUploader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;477;5;489;;;;vpos;;v;;aResumableUploader;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResumableUploader($data, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a resumable uploader which can provide greater control over the&#10;upload process. This is recommended when dealing with large files where&#10;reliability is key.&#10;Example:&#10;```&#10;$uploader = $bucket-&gt;getResumableUploader(&#10;fopen(__DIR__ . &apos;/image.jpg&apos;, &apos;r&apos;)&#10;);s&#10;try {&#10;$object = $uploader-&gt;upload();s&#10;} catch (GoogleException $ex) {&#10;$resumeUri = $uploader-&gt;getResumeUri();s&#10;$object = $uploader-&gt;resume($resumeUri);s&#10;}&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#resumable Learn more about resumable&#10;uploads.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/insert Objects insert API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the destination. Required when data is&#10;of type string or null.&#10;&lt;b&gt;type&lt;/b&gt;: bool $validate Indicates whether or not validation will be&#10;applied using md5 hashing functionality. If true and the&#10;calculated hash does not match that of the upstream server the&#10;upload will be rejected.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include `&quot;authenticatedRead`&quot;,&#10;`&quot;bucketOwnerFullControl`&quot;, `&quot;bucketOwnerRead`&quot;, `&quot;private`&quot;,&#10;`&quot;projectPrivate`&quot;, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata The available options for metadata are outlined&#10;at the [JSON API docs](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request-body).&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. If you would prefer to manage encryption&#10;utilizing the Cloud Key Management Service (KMS) please use the&#10;$metadata[&apos;kmsKeyName&apos;] setting. Please note if using KMS the&#10;key ring must use the same location as the bucket.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;&lt;b&gt;type&lt;/b&gt;: callable $uploadProgressCallback The given callable&#10;function/method will be called after each successfully uploaded&#10;chunk. The callable function/method will receive the number of&#10;uploaded bytes after each uploaded chunk as a parameter to this&#10;callable. It&apos;s useful if you want to create a progress bar when&#10;using resumable upload type together with $chunkSize parameter.&#10;If $chunkSize is not set the callable function/method will be&#10;called only once after the successful file upload.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|resource|StreamInterface|null &lt;b&gt;$data&lt;/b&gt;: The data to be uploaded.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,478;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|resource|StreamInterface|null $data;;parray $options;;p;;x;;x">
</treenode>
<treenode node="getStreamableUploader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;545;5;558;;;;vpos;;v;;aStreamableUploader;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getStreamableUploader($data, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a streamable uploader which can provide greater control over the&#10;upload process. This is useful for generating large files and uploading&#10;the contents in chunks.&#10;Example:&#10;```&#10;$uploader = $bucket-&gt;getStreamableUploader(&#10;&apos;initial contents&apos;,&#10;[&apos;name&apos; =&gt; &apos;data.txt&apos;]&#10;);s&#10;// finish uploading the item&#10;$uploader-&gt;upload();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#resumable Learn more about resumable&#10;uploads.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/insert Objects insert API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the destination. Required when data is&#10;of type string or null.&#10;&lt;b&gt;type&lt;/b&gt;: bool $validate Indicates whether or not validation will be&#10;applied using md5 hashing functionality. If true and the&#10;calculated hash does not match that of the upstream server the&#10;upload will be rejected.&#10;&lt;b&gt;type&lt;/b&gt;: int $chunkSize If provided the upload will be done in chunks.&#10;The size must be in multiples of 262144 bytes. With chunking&#10;you have increased reliability at the risk of higher overhead.&#10;It is recommended to not use chunking.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata The available options for metadata are outlined&#10;at the [JSON API docs](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request-body).&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. If you would prefer to manage encryption&#10;utilizing the Cloud Key Management Service (KMS) please use the&#10;$metadata[&apos;kmsKeyName&apos;] setting. Please note if using KMS the&#10;key ring must use the same location as the bucket.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|resource|StreamInterface &lt;b&gt;$data&lt;/b&gt;: The data to be uploaded.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,546;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|resource|StreamInterface $data;;parray $options;;p;;x;;x">
</treenode>
<treenode node="iam;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1308;5;1322;;;;vpos;;v;;aIam;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    iam()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Manage the IAM policy for the current Bucket.&#10;To request a policy with conditions, pass an array with&#10;&apos;[requestedPolicyVersion =&gt; 3]&apos; as argument to the policy() and&#10;reload() methods.&#10;Example:&#10;```&#10;$iam = $bucket-&gt;iam();s&#10;// Returns the stored policy, or fetches the policy if none exists.&#10;$policy = $iam-&gt;policy([&apos;requestedPolicyVersion&apos; =&gt; 3]);s&#10;// Fetches a policy from the server.&#10;$policy = $iam-&gt;reload([&apos;requestedPolicyVersion&apos; =&gt; 3]);s&#10;```&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/access-control/iam-with-json-and-xml Storage Access Control Documentation&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy Get Bucket IAM Policy&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy Set Bucket IAM Policy&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions Test Bucket Permissions&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/iam/docs/policies#versions policy versioning.&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;;;d4,1309;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1116;5;1119;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the bucket&apos;s details. If no bucket data is cached a network&#10;request will be made to retrieve it.&#10;Example:&#10;```&#10;$info = $bucket-&gt;info();s&#10;echo $info[&apos;location&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/get Buckets get API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the return of the bucket&#10;metadata conditional on whether the bucket&apos;s current&#10;metageneration matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the return of the bucket&#10;metadata conditional on whether the bucket&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either `&quot;full&quot;` or `&quot;noAcl&quot;`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,1117;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="isObjectNameRequired;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f12;1568;5;1571;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isObjectNameRequired($data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if an object name is required.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;;;d4,1569;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $data;;p;;x">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1259;5;1278;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isWritable($file = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns whether the bucket with the given file prefix is writable.&#10;Tries to create a temporary file as a resumable upload which will&#10;not be completed (and cleaned up by GCS).&#10;&lt;b&gt;throws&lt;/b&gt;: ServiceException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$file&lt;/b&gt;: [optional] File to try to write.;;d4,1260;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $file;;p;;x">
</treenode>
<treenode node="lifecycle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f18;1197;5;1200;;;;vpos;;v;;aLifecycle;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    lifecycle(array $lifecycle = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves a fresh lifecycle builder. If a lifecyle configuration already&#10;exists on the target bucket and this builder is used, it will fully&#10;replace the configuration with the rules provided by this builder.&#10;This builder is intended to be used in tandem with&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageClient::createBucket()} and&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::update()}.&#10;Example:&#10;```&#10;use Google\Cloud\Storage\Bucket;s&#10;$lifecycle = Bucket::lifecycle()&#10;-&gt;addDeleteRule([&#10;&apos;age&apos; =&gt; 50,&#10;&apos;isLive&apos; =&gt; true&#10;]);s&#10;$bucket-&gt;update([&#10;&apos;lifecycle&apos; =&gt; $lifecycle&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/lifecycle Object Lifecycle Management API Documentation&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$lifecycle&lt;/b&gt;: [optional] A lifecycle configuration. Please see [here](https://cloud.google.com/storage/docs/json_api/v1/buckets#lifecycle) for the expected structure.;;d4,1198;;b1,5;;m0;;e0;;i0;;o;;k;;larray $lifecycle;;p;;x">
</treenode>
<treenode node="lockRetentionPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1368;5;1385;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    lockRetentionPolicy(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Locks a provided retention policy on this bucket. Upon receiving a result,&#10;the local bucket&apos;s data will be updated.&#10;Please note that in order for this call to succeed, the applicable&#10;metageneration value will need to be available. It can either be supplied&#10;explicitly through the `ifMetagenerationMatch` option or detected for you&#10;by ensuring a value is cached locally (by calling&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::reload()} or&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::info()}, for example).&#10;Example:&#10;```&#10;// Set a retention policy.&#10;$bucket-&gt;update([&#10;&apos;retentionPolicy&apos; =&gt; [&#10;&apos;retentionPeriod&apos; =&gt; 604800 // One week in seconds.&#10;]&#10;]);s&#10;// Lock in the policy.&#10;$info = $bucket-&gt;lockRetentionPolicy();s&#10;$retentionPolicy = $info[&apos;retentionPolicy&apos;];s&#10;// View the time from which the policy was enforced and effective. (RFC 3339 format)&#10;echo $retentionPolicy[&apos;effectiveTime&apos;] . PHP_EOL;s&#10;// View whether or not the retention policy is locked. This will be&#10;// `true` after a successful call to `lockRetentionPolicy`.&#10;echo $retentionPolicy[&apos;isLocked&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/bucket-lock Bucket Lock Documentation&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Only locks the retention policy&#10;if the bucket&apos;s metageneration matches this value. If not&#10;provided the locally cached metageneration value will be used,&#10;otherwise an exception will be thrown.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \BadMethodCallException If no metageneration value is available.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,1369;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="name;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1162;5;1165;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    name()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the bucket&apos;s name.&#10;Example:&#10;```&#10;echo $bucket-&gt;name();s&#10;```;;d4,1163;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="notification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;797;5;805;;;;vpos;;v;;aNotification;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    notification($id)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lazily instantiates a notification. There are no network requests made at&#10;this point. To see the operations that can be performed on a notification&#10;please see {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Notification}.&#10;Example:&#10;```&#10;$notification = $bucket-&gt;notification(&apos;4582&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/notifications#resource Notifications API documentation.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this&#10;method or class is ready for use, it may change before release in&#10;backwards-incompatible ways. Please use with caution, and test&#10;thoroughly when upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$id&lt;/b&gt;: The ID of the notification to access.;;d4,798;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $id;;p;;x">
</treenode>
<treenode node="notifications;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;835;5;856;;;;vpos;;v;;aItemIterator;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    notifications(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches all notifications associated with this bucket.&#10;Example:&#10;```&#10;$notifications = $bucket-&gt;notifications();s&#10;foreach ($notifications as $notification) {&#10;echo $notification-&gt;id() . PHP_EOL;s&#10;}&#10;```&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/notifications/list Notifications list API documentation.&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&lt;b&gt;type&lt;/b&gt;: int $resultLimit Limit the number of results returned in total.&#10;**Defaults to** `0` (return all results).&#10;}&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this&#10;method or class is ready for use, it may change before release in&#10;backwards-incompatible ways. Please use with caution, and test&#10;thoroughly when upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;Notification&gt;;;d4,836;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="object;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;586;5;603;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    object($name, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lazily instantiates an object. There are no network requests made at this&#10;point. To see the operations that can be performed on an object please&#10;see {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject}.&#10;Example:&#10;```&#10;$object = $bucket-&gt;object(&apos;file.txt&apos;);s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $generation Request a specific revision of the object.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. It will be neccesary to provide this when a key&#10;was used during the object&apos;s creation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The name of the object to request.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,587;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;parray $options;;p;;x;;x">
</treenode>
<treenode node="objects;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;648;5;670;;;;vpos;;v;;aObjectIterator;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    objects(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches all objects in the bucket.&#10;Example:&#10;```&#10;// Get all objects beginning with the prefix &apos;photo&apos;&#10;$objects = $bucket-&gt;objects([&#10;&apos;prefix&apos; =&gt; &apos;photo&apos;,&#10;&apos;fields&apos; =&gt; &apos;items/name,nextPageToken&apos;&#10;]);s&#10;foreach ($objects as $object) {&#10;echo $object-&gt;name() . PHP_EOL;s&#10;}&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/list Objects list API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $delimiter Returns results in a directory-like mode.&#10;Results will contain only objects whose names, aside from the&#10;prefix, do not contain delimiter. Objects whose names, aside&#10;from the prefix, contain delimiter will have their name,&#10;truncated after the delimiter, returned in prefixes. Duplicate&#10;prefixes are omitted.&#10;&lt;b&gt;type&lt;/b&gt;: int $maxResults Maximum number of results to return per&#10;request. **Defaults to** `1000`.&#10;&lt;b&gt;type&lt;/b&gt;: int $resultLimit Limit the number of results returned in total.&#10;**Defaults to** `0` (return all results).&#10;&lt;b&gt;type&lt;/b&gt;: string $pageToken A previously-returned page token used to&#10;resume the loading of results from a specific point.&#10;&lt;b&gt;type&lt;/b&gt;: string $prefix Filter results with this prefix.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either `&quot;full&quot;` or `&quot;noAcl&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: bool $versions If true, lists all versions of an object as&#10;distinct results. **Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: string $fields Selector which will cause the response to only&#10;return the specified fields.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;StorageObject&gt;;;d4,649;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1147;5;1150;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers a network request to reload the bucket&apos;s details.&#10;Example:&#10;```&#10;$bucket-&gt;reload();s&#10;$info = $bucket-&gt;info();s&#10;echo $info[&apos;location&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/get Buckets get API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the return of the bucket&#10;metadata conditional on whether the bucket&apos;s current&#10;metageneration matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the return of the bucket&#10;metadata conditional on whether the bucket&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either `&quot;full&quot;` or `&quot;noAcl&quot;`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,1148;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="signedUrl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;1454;5;1472;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signedUrl($expires, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Signed URL listing objects in this bucket.&#10;Example:&#10;```&#10;$url = $bucket-&gt;signedUrl(time() + 3600);s&#10;```&#10;```&#10;// Use V4 Signing&#10;$url = $bucket-&gt;signedUrl(time() + 3600, [&#10;&apos;version&apos; =&gt; &apos;v4&apos;&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/access-control/signed-urls Signed URLs&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Timestamp},&#10;[http://php.net/datetimeimmutable](`\DateTimeImmutable`), or a&#10;UNIX timestamp as an integer.&#10;&lt;b&gt;type&lt;/b&gt;: string $cname The CNAME for the bucket, for instance&#10;`https://cdn.example.com`. **Defaults to**&#10;`https://storage.googleapis.com`.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentMd5 The MD5 digest value in base64. If you&#10;provide this, the client must provide this HTTP header with&#10;this same value in its request. If provided, take care to&#10;always provide this value as a base64 encoded string.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType If you provide this value, the client must&#10;provide this HTTP header set to the same value.&#10;&lt;b&gt;type&lt;/b&gt;: bool $forceOpenssl If true, OpenSSL will be used regardless of&#10;whether phpseclib is available. **Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: array $headers If additional headers are provided, the server&#10;will check to make sure that the client provides matching&#10;values. Provide headers as a key/value array, where the key is&#10;the header name, and the value is an array of header values.&#10;Headers with multiple values may provide values as a simple&#10;array, or a comma-separated string. For a reference of allowed&#10;headers, see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers).&#10;Header values will be trimmed of leading and trailing spaces,&#10;multiple spaces within values will be collapsed to a single&#10;space, and line breaks will be replaced by an empty string.&#10;V2 Signed URLs may not provide `x-goog-encryption-key` or&#10;`x-goog-encryption-key-sha256` headers.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile Keyfile data to use in place of the keyfile with&#10;which the client was constructed. If `$options.keyFilePath` is&#10;set, this option is ignored.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath A path to a valid keyfile to use in place&#10;of the keyfile with which the client was constructed.&#10;&lt;b&gt;type&lt;/b&gt;: string|array $scopes One or more authentication scopes to be&#10;used with a key file. This option is ignored unless&#10;`$options.keyFile` or `$options.keyFilePath` is set.&#10;&lt;b&gt;type&lt;/b&gt;: array $queryParams Additional query parameters to be included&#10;as part of the signed URL query string. For allowed values,&#10;see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers#query).&#10;&lt;b&gt;type&lt;/b&gt;: string $version One of &quot;v2&quot; or &quot;v4&quot;. *Defaults to** `&quot;v2&quot;`.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given expiration is invalid or in the past.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given `$options.method` is not valid.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given `$options.keyFilePath` is not valid.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given custom headers are invalid.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the keyfile does not contain the required information.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: Specifies when the URL will expire. May provide an instance of {&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options.;;d4,1455;;b1,0;;m0;;e0;;i0;;o;;k;;lTimestamp|\DateTimeInterface|int $expires;;parray $options;;p;;x;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;983;5;990;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    update(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Update the bucket. Upon receiving a result the local bucket&apos;s data will&#10;be updated.&#10;Example:&#10;```&#10;// Enable logging on an existing bucket.&#10;$bucket-&gt;update([&#10;&apos;logging&apos; =&gt; [&#10;&apos;logBucket&apos; =&gt; &apos;myBucket&apos;,&#10;&apos;logObjectPrefix&apos; =&gt; &apos;prefix&apos;&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/patch Buckets patch API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/key-terms#bucket-labels Bucket Labels&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the return of the bucket&#10;metadata conditional on whether the bucket&apos;s current&#10;metageneration matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the return of the bucket&#10;metadata conditional on whether the bucket&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the bucket.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedDefaultObjectAcl Apply a predefined set of&#10;default object access controls to this bucket. Acceptable&#10;values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either `&quot;full&quot;` or `&quot;noAcl&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $fields Selector which will cause the response to only&#10;return the specified fields.&#10;&lt;b&gt;type&lt;/b&gt;: array $acl Access controls on the bucket.&#10;&lt;b&gt;type&lt;/b&gt;: array $cors The bucket&apos;s Cross-Origin Resource Sharing (CORS)&#10;configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $defaultObjectAcl Default access controls to apply to new&#10;objects when no ACL is provided.&#10;&lt;b&gt;type&lt;/b&gt;: array|Lifecycle $lifecycle The bucket&apos;s lifecycle configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $logging The bucket&apos;s logging configuration, which&#10;defines the destination bucket and optional name prefix for the&#10;current bucket&apos;s logs.&#10;&lt;b&gt;type&lt;/b&gt;: string $storageClass The bucket&apos;s storage class. This defines&#10;how objects in the bucket are stored and determines the SLA and&#10;the cost of storage. Acceptable values include the following&#10;strings: `&quot;STANDARD&quot;`, `&quot;NEARLINE&quot;`, `&quot;COLDLINE&quot;` and&#10;`&quot;ARCHIVE&quot;`. Legacy values including `&quot;MULTI_REGIONAL&quot;`,&#10;`&quot;REGIONAL&quot;` and `&quot;DURABLE_REDUCED_AVAILABILITY&quot;` are also&#10;available, but should be avoided for new implementations. For&#10;more information, refer to the&#10;[Storage Classes](https://cloud.google.com/storage/docs/storage-classes)&#10;documentation. **Defaults to** `&quot;STANDARD&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $versioning The bucket&apos;s versioning configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $website The bucket&apos;s website configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $billing The bucket&apos;s billing configuration.&#10;&lt;b&gt;type&lt;/b&gt;: bool $billing.requesterPays When `true`, requests to this bucket&#10;and objects within it must provide a project ID to which the&#10;request will be billed.&#10;&lt;b&gt;type&lt;/b&gt;: array $labels The Bucket labels. Labels are represented as an&#10;array of keys and values. To remove an existing label, set its&#10;value to `null`.&#10;&lt;b&gt;type&lt;/b&gt;: array $encryption Encryption configuration used by default for&#10;newly inserted objects.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryption.defaultKmsKeyName A Cloud KMS Key used to&#10;encrypt objects uploaded into this bucket. Should be in the&#10;format&#10;`projects/my-project/locations/kr-location/keyRings/my-kr/cryptoKeys/my-key`.&#10;Please note the KMS key ring must use the same location as the&#10;bucket.&#10;&lt;b&gt;type&lt;/b&gt;: bool $defaultEventBasedHold When `true`, newly created objects&#10;in this bucket will be retained indefinitely until an event&#10;occurs, signified by the hold&apos;s release.&#10;&lt;b&gt;type&lt;/b&gt;: array $retentionPolicy Defines the retention policy for a&#10;bucket. In order to lock a retention policy, please see&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::lockRetentionPolicy()}.&#10;&lt;b&gt;type&lt;/b&gt;: int $retentionPolicy.retentionPeriod Specifies the duration&#10;that objects need to be retained, in seconds. Retention&#10;duration must be greater than zero and less than 100 years.&#10;&lt;b&gt;type&lt;/b&gt;: array $iamConfiguration The bucket&apos;s IAM configuration.&#10;&lt;b&gt;type&lt;/b&gt;: bool $iamConfiguration.bucketPolicyOnly.enabled this is an alias&#10;for $iamConfiguration.uniformBucketLevelAccess.&#10;&lt;b&gt;type&lt;/b&gt;: bool $iamConfiguration.uniformBucketLevelAccess.enabled If set and&#10;true, access checks only use bucket-level IAM policies or&#10;above. When enabled, requests attempting to view or manipulate&#10;ACLs will fail with error code 400. **NOTE**: Before using&#10;Uniform bucket-level access, please review the&#10;[feature documentation](https://cloud.google.com/storage/docs/uniform-bucket-level-access),&#10;as well as&#10;[Should You Use uniform bucket-level access](https://cloud.google.com/storage/docs/uniform-bucket-level-access#should-you-use)&#10;}&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,984;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="upload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;280;5;304;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    upload($data, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Upload your data in a simple fashion. Uploads will default to being&#10;resumable if the file size is greater than 5mb.&#10;Example:&#10;```&#10;$object = $bucket-&gt;upload(&#10;fopen(__DIR__ . &apos;/image.jpg&apos;, &apos;r&apos;)&#10;);s&#10;```&#10;```&#10;// Upload an object in a resumable fashion while setting a new name for&#10;// the object and including the content language.&#10;$options = [&#10;&apos;resumable&apos; =&gt; true,&#10;&apos;name&apos; =&gt; &apos;/images/new-name.jpg&apos;,&#10;&apos;metadata&apos; =&gt; [&#10;&apos;contentLanguage&apos; =&gt; &apos;en&apos;&#10;]&#10;];s&#10;$object = $bucket-&gt;upload(&#10;fopen(__DIR__ . &apos;/image.jpg&apos;, &apos;r&apos;),&#10;$options&#10;);s&#10;```&#10;```&#10;// Upload an object with a customer-supplied encryption key.&#10;$key = base64_encode(openssl_random_pseudo_bytes(32));s // Make sure to remember your key.&#10;$object = $bucket-&gt;upload(&#10;fopen(__DIR__ . &apos;/image.jpg&apos;, &apos;r&apos;),&#10;[&apos;encryptionKey&apos; =&gt; $key]&#10;);s&#10;```&#10;```&#10;// Upload an object utilizing an encryption key managed by the Cloud Key Management Service (KMS).&#10;$object = $bucket-&gt;upload(&#10;fopen(__DIR__ . &apos;/image.jpg&apos;, &apos;r&apos;),&#10;[&#10;&apos;metadata&apos; =&gt; [&#10;&apos;kmsKeyName&apos; =&gt; &apos;projects/my-project/locations/kr-location/keyRings/my-kr/cryptoKeys/my-key&apos;&#10;]&#10;]&#10;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#resumable Learn more about resumable&#10;uploads.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/insert Objects insert API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/encryption#customer-supplied Customer-supplied encryption keys.&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/google/php-crc32 crc32c PHP extension for hardware-accelerated validation hashes.&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the destination. Required when data is&#10;of type string or null.&#10;&lt;b&gt;type&lt;/b&gt;: bool $resumable Indicates whether or not the upload will be&#10;performed in a resumable fashion.&#10;&lt;b&gt;type&lt;/b&gt;: bool|string $validate Indicates whether or not validation will&#10;be applied using md5 or crc32c hashing functionality. If&#10;enabled, and the calculated hash does not match that of the&#10;upstream server, the upload will be rejected. Available options&#10;are `true`, `false`, `md5` and `crc32`. If true, either md5 or&#10;crc32c will be chosen based on your platform. If false, no&#10;validation hash will be sent. Choose either `md5` or `crc32` to&#10;force a hash method regardless of performance implications. In&#10;PHP versions earlier than 7.4, performance will be very&#10;adversely impacted by using crc32c unless you install the&#10;`crc32c` PHP extension. **Defaults to** `true`.&#10;&lt;b&gt;type&lt;/b&gt;: int $chunkSize If provided the upload will be done in chunks.&#10;The size must be in multiples of 262144 bytes. With chunking&#10;you have increased reliability at the risk of higher overhead.&#10;It is recommended to not use chunking.&#10;&lt;b&gt;type&lt;/b&gt;: callable $uploadProgressCallback If provided together with&#10;$resumable == true the given callable function/method will be&#10;called after each successfully uploaded chunk. The callable&#10;function/method will receive the number of uploaded bytes&#10;after each uploaded chunk as a parameter to this callable.&#10;It&apos;s useful if you want to create a progress bar when using&#10;resumable upload type together with $chunkSize parameter.&#10;If $chunkSize is not set the callable function/method will be&#10;called only once after the successful file upload.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata The full list of available options are outlined&#10;at the [JSON API docs](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request-body).&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata.metadata User-provided metadata, in key/value pairs.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. If you would prefer to manage encryption&#10;utilizing the Cloud Key Management Service (KMS) please use the&#10;`$metadata.kmsKeyName` setting. Please note if using KMS the&#10;key ring must use the same location as the bucket.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|resource|StreamInterface|null &lt;b&gt;$data&lt;/b&gt;: The data to be uploaded.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,281;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|resource|StreamInterface|null $data;;parray $options;;p;;x;;x">
</treenode>
<treenode node="uploadAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Bucket.php;f11;383;5;414;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uploadAsync($data, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Asynchronously uploads an object.&#10;Please note this method does not support resumable or streaming uploads.&#10;Example:&#10;```&#10;$promise = $bucket-&gt;uploadAsync(&apos;Lorem Ipsum&apos;, [&apos;name&apos; =&gt; &apos;keyToData&apos;]);s&#10;$object = $promise-&gt;wait();s&#10;```&#10;```&#10;// Upload multiple objects to a bucket asynchronously.&#10;$promises = [];s&#10;$objects = [&apos;key1&apos; =&gt; &apos;Lorem&apos;, &apos;key2&apos; =&gt; &apos;Ipsum&apos;, &apos;key3&apos; =&gt; &apos;Gypsum&apos;];s&#10;foreach ($objects as $k =&gt; $v) {&#10;$promises[] = $bucket-&gt;uploadAsync($v, [&apos;name&apos; =&gt; $k])&#10;-&gt;then(function (StorageObject $object) {&#10;echo $object-&gt;name() . PHP_EOL;s&#10;}, function(\Exception $e) {&#10;throw new Exception(&apos;An error has occurred in the matrix.&apos;, null, $e);s&#10;});s&#10;}&#10;foreach ($promises as $promise) {&#10;$promise-&gt;wait();s&#10;}&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/insert Objects insert API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/encryption#customer-supplied Customer-supplied encryption keys.&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/google/php-crc32 crc32c PHP extension for hardware-accelerated validation hashes.&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/guzzle/promises Learn more about Guzzle Promises&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the destination. Required when data is&#10;of type string or null.&#10;&lt;b&gt;type&lt;/b&gt;: bool|string $validate Indicates whether or not validation will&#10;be applied using md5 or crc32c hashing functionality. If&#10;enabled, and the calculated hash does not match that of the&#10;upstream server, the upload will be rejected. Available options&#10;are `true`, `false`, `md5` and `crc32`. If true, either md5 or&#10;crc32c will be chosen based on your platform. If false, no&#10;validation hash will be sent. Choose either `md5` or `crc32` to&#10;force a hash method regardless of performance implications. In&#10;PHP versions earlier than 7.4, performance will be very&#10;adversely impacted by using crc32c unless you install the&#10;`crc32c` PHP extension. **Defaults to** `true`.ß&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata The full list of available options are outlined&#10;at the [JSON API docs](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request-body).&#10;&lt;b&gt;type&lt;/b&gt;: array $metadata.metadata User-provided metadata, in key/value pairs.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. If you would prefer to manage encryption&#10;utilizing the Cloud Key Management Service (KMS) please use the&#10;`$metadata.kmsKeyName` setting. Please note if using KMS the&#10;key ring must use the same location as the bucket.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|resource|StreamInterface|null &lt;b&gt;$data&lt;/b&gt;: The data to be uploaded.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;StorageObject&gt;;;d4,384;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|resource|StreamInterface|null $data;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="BufferHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f0;25;1;160;;;;vpos;;v;;aAbstractHandler;;cProcessableHandlerInterface;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BufferHandler extends AbstractHandler implements ProcessableHandlerInterface, FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Buffers all records until closing the handler and then pass them as batch.&#10;This is useful for a MailHandler to send only one mail per request instead of&#10;sending one per log message.&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;44;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(HandlerInterface $handler, int $bufferLimit = 0, $level = Logger::DEBUG, bool $bubble = true, bool $flushOnOverflow = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    HandlerInterface &lt;b&gt;$handler&lt;/b&gt;: Handler.&#10;    int &lt;b&gt;$bufferLimit&lt;/b&gt;: How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    bool &lt;b&gt;$flushOnOverflow&lt;/b&gt;: If true, the buffer is flushed when the max size has been reached, by default oldest entries are discarded;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;lHandlerInterface $handler;;pint $bufferLimit;;pstring|int $level;;pbool $bubble;;pbool $flushOnOverflow;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;96;5;101;;;;vpos;;v;;a;;r;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;116;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clears the buffer without flushing any messages down to the wrapped handler.;;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;106;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,107;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;86;5;94;;;;vpos;;v;;a void;;r;;d4,87;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;152;5;159;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,153;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;55;5;84;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;122;5;133;;;;vpos;;v;;a;;r;;d4,123;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\BufferHandler.php;f11;138;5;147;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,139;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="BufferStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f0;14;1;139;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class BufferStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a buffer stream that can be written to to fill a buffer, and read&#10;from to remove bytes from the buffer.&#10;This stream returns a &quot;hwm&quot; metadata value that tells upstream consumers&#10;what the configured high water mark of the stream is, or the maximum&#10;preferred size of the buffer.;;d0,15;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;26;5;29;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($hwm = 16384)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$hwm&lt;/b&gt;: High water mark, representing the preferred maximum buffer size. If the size of the buffer exceeds the high water mark, then calls to write will continue to succeed but will return false to inform writers to slow down until the buffer has been drained by reading from it.;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;lint $hwm;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;44;5;47;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;49;5;54;;;;vpos;;v;;a;;r;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;86;5;89;;;;vpos;;v;;a;;r;;d4,87;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;36;5;42;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;131;5;138;;;;vpos;;v;;a;;r;;d4,132;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;56;5;59;;;;vpos;;v;;a;;r;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;61;5;64;;;;vpos;;v;;a;;r;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;71;5;74;;;;vpos;;v;;a;;r;;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;66;5;69;;;;vpos;;v;;a;;r;;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;99;5;114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    read($length)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reads data from the buffer.;;d4,100;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;76;5;79;;;;vpos;;v;;a;;r;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;81;5;84;;;;vpos;;v;;a;;r;;d4,82;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;91;5;94;;;;vpos;;v;;a;;r;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\BufferStream.php;f11;119;5;129;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write($string)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes data to the buffer.;;d4,120;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="Builtin;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f6;25;1;86;;;;vpos;;v;;aCRCInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Builtin implements CRCInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A CRC32 implementation based on the PHP hash functions.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__clone;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f11;82;5;85;;;;vpos;;v;;a;;r;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f11;50;5;58;;;;vpos;;v;;a;;r;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lpolynomial;;p;;x">
</treenode>
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f11;70;5;75;;;;vpos;;v;;a;;r;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;lraw_output;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f11;60;5;63;;;;vpos;;v;;a;;r;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="supports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f18;41;5;48;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    supports($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if this $polynomial is supported by the builtin PHP hash function.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The polynomial;;d4,42;;b1,5;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f11;65;5;68;;;;vpos;;v;;a;;r;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="version;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Builtin.php;f11;77;5;80;;;;vpos;;v;;a;;r;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="BuiltinTest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\BuiltinTest.php;f6;24;1;49;;;;vpos;;v;;aTestCase;;c;;r;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="supports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\BuiltinTest.php;f11;41;5;48;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testSupports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\BuiltinTest.php;f11;36;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testSupports($algo, $expected)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: supports;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lalgo;;pexpected;;p;;x;;x">
</treenode>
<treenode node="testUnsupported;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\BuiltinTest.php;f11;26;5;31;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="CRC32;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f0;35;1;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CRC32&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Various CRC32 implementations.&#10;```&#10;use Google\CRC32\CRC32;s&#10;$crc = CRC32::create(CRC32::CASTAGNOLI);s&#10;$crc-&gt;update(&apos;hello&apos;);s&#10;echo $crc-&gt;hash();s&#10;```;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="CASTAGNOLI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f9;50;20;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Castagnoli&apos;s polynomial, used in iSCSI, SCTP, Google Cloud Storage,&#10;Apache Kafka, and has hardware-accelerated in modern intel CPUs.&#10;https://doi.org/10.1109/26.231911;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="IEEE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f9;43;14;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    IEEE polynomial as used by ethernet (IEEE 802.3), v.42, fddi, gzip,&#10;zip, png, ...;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="KOOPMAN;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f9;56;17;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Koopman&apos;s polynomial.&#10;https://doi.org/10.1109/DSN.2002.1028931;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SIZE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f9;61;14;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The size of the checksum in bytes.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f12;69;5;72;;;;vpos;;v;;a;;r;;d4,70;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="create;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f18;83;5;95;;;;vpos;;v;;aCRC32Interface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    create($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the best CRC implementation available on this machine.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The CRC polynomial. Use a 32-bit number, or one of the supplied constants, CRC32::IEEE, CRC32::CASTAGNOLI, or CRC32::KOOPMAN.;;d4,84;;b1,5;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
<treenode node="string;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRC32.php;f18;104;5;110;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    string($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prints the human friendly name for this polynomial.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The CRC polynomial.;;d4,105;;b1,5;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
</treenode>
<treenode node="CRC32Test;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f6;24;1;157;;;;vpos;;v;;aTestCase;;c;;r;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="crcs;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;26;5;29;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="data;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testClone;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;127;5;156;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testClone($crc_class, $poly)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: crcs;;d4,128;;b1,0;;m0;;e0;;i0;;o;;k;;lcrc_class;;ppoly;;p;;x;;x">
</treenode>
<treenode node="testExtendedHash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;76;5;95;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testExtendedHash($crc_class, $poly, $input, $expected)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Extended hashing. Read increasingly sized chunks of input.&#10;&lt;b&gt;dataProvider&lt;/b&gt;: data;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;lcrc_class;;ppoly;;pinput;;pexpected;;p;;x;;x;;x;;x">
</treenode>
<treenode node="testHash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;39;5;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testHash($crc_class, $poly, $input, $expected)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: data;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lcrc_class;;ppoly;;pinput;;pexpected;;p;;x;;x;;x;;x">
</treenode>
<treenode node="testHashRaw;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;60;5;70;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testHashRaw($crc_class, $poly, $input, $expected)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: data;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;lcrc_class;;ppoly;;pinput;;pexpected;;p;;x;;x;;x;;x">
</treenode>
<treenode node="testReset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\CRC32Test.php;f11;100;5;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testReset($crc_class, $poly)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: crcs;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lcrc_class;;ppoly;;p;;x;;x">
</treenode>
</treenode>
<treenode node="CRCIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f0;20;1;75;;;;vpos;;v;;aIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CRCIterator implements Iterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2019 Google LLC&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="current;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;53;5;56;;;;vpos;;v;;a;;r;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="key;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;48;5;51;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="next;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;58;5;74;;;;vpos;;v;;a;;r;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;36;5;40;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="valid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;42;5;46;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="CRCTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCTrait.php;f0;19;1;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait CRCTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2019 Google LLC&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="crcHash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCTrait.php;f19;45;5;52;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    crcHash($crc, $raw_output)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    { function_description }&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$crc&lt;/b&gt;: The CRC hash&#10;    boolean &lt;b&gt;$raw_output&lt;/b&gt;: When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a string containing the calculated CRC as lowercase hexits unless raw_output is set to true in which case the raw binary representation of the CRC is returned.;;d4,46;;b3,5;;m0;;e0;;i0;;o;;k;;linteger $crc;;pboolean $raw_output;;p;;x;;x">
</treenode>
<treenode node="int2hex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\CRCTrait.php;f19;28;5;31;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    int2hex($i)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts a integer into a 8 character hex string in lower case.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$i&lt;/b&gt;: Integer to convert.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   8 character hex string in lower case.;;d4,29;;b3,5;;m0;;e0;;i0;;o;;k;;linteger $i;;p;;x">
</treenode>
</treenode>
<treenode node="CacheTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CacheTrait.php;f0;19;1;82;;;;vpos;;v;;a;;r;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getCachedValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CacheTrait.php;f12;27;5;42;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCachedValue($k)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the cached value if it is present in the cache when that is&#10;available.;;d4,28;;b3,0;;m0;;e0;;i0;;o;;k;;lk;;p;;x">
</treenode>
<treenode node="getFullCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CacheTrait.php;f12;64;5;81;;;;vpos;;v;;a;;r;;d4,65;;b3,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="setCachedValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CacheTrait.php;f12;47;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setCachedValue($k, $v)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Saves the value in the cache when that is available.;;d4,48;;b3,0;;m0;;e0;;i0;;o;;k;;lk;;pv;;p;;x;;x">
</treenode>
</treenode>
<treenode node="CachingStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f0;10;1;138;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CachingStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stream decorator that can cache previously read bytes from a sequentially&#10;read stream.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;26;5;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        StreamInterface $stream,&#10;        StreamInterface $target = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    We will treat the buffer object as the body of the stream&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to cache&#10;    StreamInterface &lt;b&gt;$target&lt;/b&gt;: Optionally specify where data is cached;;d6,29;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pStreamInterface $target;;p;;x;;x">
</treenode>
<treenode node="cacheEntireStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f12;131;5;137;;;;vpos;;v;;a;;r;;d4,132;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;126;5;129;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Close both the remote stream and buffer stream;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;118;5;121;;;;vpos;;v;;a;;r;;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;34;5;37;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;75;5;102;;;;vpos;;v;;a;;r;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;39;5;42;;;;vpos;;v;;a;;r;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;44;5;73;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\CachingStream.php;f11;104;5;116;;;;vpos;;v;;a;;r;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="CallTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\CallTrait.php;f0;22;1;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait CallTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provide magic method support for fetching values from results;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__call;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\CallTrait.php;f11;27;5;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __call($name, array $args)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private;;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;lname;;pargs;;p;;x;;x">
</treenode>
</treenode>
<treenode node="CancellationException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\CancellationException.php;f0;7;1;9;;;;vpos;;v;;aRejectionException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CancellationException extends RejectionException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception that is set as the reason for a promise that has been cancelled.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ChannelLevelActivationStrategy;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ChannelLevelActivationStrategy.php;f0;35;1;65;;;;vpos;;v;;aActivationStrategyInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ChannelLevelActivationStrategy implements ActivationStrategyInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Channel and Error level based monolog activation strategy. Allows to trigger activation&#10;based on level per channel. e.g. trigger activation on level &apos;ERROR&apos; by default, except&#10;for records of the &apos;sql&apos; channel;s those should trigger activation on level &apos;WARN&apos;.&#10;Example:&#10;&lt;code&gt;&#10;$activationStrategy = new ChannelLevelActivationStrategy(&#10;Logger::CRITICAL,&#10;array(&#10;&apos;request&apos; =&gt; Logger::ALERT,&#10;&apos;sensitive&apos; =&gt; Logger::ERROR,&#10;)&#10;);s&#10;$handler = new FingersCrossedHandler(new StreamHandler(&apos;php://stderr&apos;), $activationStrategy);s&#10;&lt;/code&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Mike Meessen &lt;netmikey&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ChannelLevelActivationStrategy.php;f11;51;5;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($defaultActionLevel, array $channelToActionLevel = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$defaultActionLevel&lt;/b&gt;: The default action level to be used if the record&apos;s category doesn&apos;t match any&#10;    array &lt;b&gt;$channelToActionLevel&lt;/b&gt;: An array that maps channel names to action levels.;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;lint|string $defaultActionLevel;;parray $channelToActionLevel;;p;;x;;x">
</treenode>
<treenode node="isHandlerActivated;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ChannelLevelActivationStrategy.php;f11;57;5;64;;;;vpos;;v;;a bool;;r;;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="CheckForClassTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\CheckForClassTrait.php;f0;25;1;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait CheckForClassTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Trait CheckForClassTrait&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="checkAndSkipTest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\CheckForClassTrait.php;f14;35;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    checkAndSkipTest(array $requiredClasses)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check whether all required classes are available, otherwise skip the tests.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$requiredClasses&lt;/b&gt;: List of classes that must be available.;;d4,36;;b2,0;;m0;;e0;;i0;;o;;k;;larray $requiredClasses;;p;;x">
</treenode>
</treenode>
<treenode node="ChromePHPFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ChromePHPFormatter.php;f0;20;1;80;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ChromePHPFormatter implements FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a log message according to the ChromePHP array format&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ChromePHPFormatter.php;f11;39;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ChromePHPFormatter.php;f11;70;5;79;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
</treenode>
<treenode node="ChromePHPHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f0;25;1;192;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ChromePHPHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler sending logs to the ChromePHP extension (http://www.chromephp.com/)&#10;This also works out of the box with Firefox 43+&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="HEADER_NAME;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f19;37;31;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Header name;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="USER_AGENT_REGEX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f19;42;36;42;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Regular expression to detect supported browsers (matches any Chrome, or Firefox 43+);;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="VERSION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f19;32;27;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Version of the extension;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f11;67;5;73;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;pbool $bubble;;p;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f14;103;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,104;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f11;78;5;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="headersAccepted;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f14;184;5;191;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headersAccepted(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verifies if the headers are accepted by the current user agent;;d4,185;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f14;130;5;169;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends the log header&#10;&lt;b&gt;see&lt;/b&gt;: sendHeader();;d4,131;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="sendHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f14;174;5;179;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendHeader(string $header, string $content): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send header string to the client;;d4,175;;b2,0;;m0;;e0;;i0;;o;;k;;lheader;;pcontent;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ChromePHPHandler.php;f14;114;5;123;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates &amp; sends header for a record&#10;&lt;b&gt;see&lt;/b&gt;: sendHeader()&#10;&lt;b&gt;see&lt;/b&gt;: send();;d4,115;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="ClassLoader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f0;42;1;470;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ClassLoader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ClassLoader implements a PSR-0, PSR-4 and classmap class loader.&#10;$loader = new \Composer\Autoload\ClassLoader();s&#10;// register classes with namespaces&#10;$loader-&gt;add(&apos;Symfony\Component&apos;, __DIR__.&apos;/component&apos;);s&#10;$loader-&gt;add(&apos;Symfony&apos;,           __DIR__.&apos;/framework&apos;);s&#10;// activate the autoloader&#10;$loader-&gt;register();s&#10;// to enable searching the include path (eg. for PEAR packages)&#10;$loader-&gt;setUseIncludePath(true);s&#10;In this example, if you try to use a class in the Symfony\Component&#10;namespace or one of its children (Symfony\Component\Console for instance),&#10;the autoloader will first look for the class under the component/&#10;directory, and it will then fallback to the framework/ directory if not&#10;found before giving up.&#10;This class is loosely based on the Symfony UniversalClassLoader.&#10;&lt;b&gt;author&lt;/b&gt;: Fabien Potencier &lt;fabien&#10;&lt;b&gt;symfony&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://www.php-fig.org/psr/psr-0/&#10;&lt;b&gt;see&lt;/b&gt;: https://www.php-fig.org/psr/psr-4/;;d0,43;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;63;5;66;;;;vpos;;v;;a;;r;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;lvendorDir;;p;;x">
</treenode>
<treenode node="add;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;117;5;152;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add($prefix, $paths, $prepend = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-0 directories for a given prefix, either&#10;appending or prepending to the ones previously set for this prefix.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-0 root directories&#10;    bool &lt;b&gt;$prepend&lt;/b&gt;: Whether to prepend the directories;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $prefix;;parray|string $paths;;pbool $prepend;;p;;x;;x;;x">
</treenode>
<treenode node="addClassMap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;100;5;107;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addClassMap(array $classMap)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$classMap&lt;/b&gt;: Class to filename map;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;larray $classMap;;p;;x">
</treenode>
<treenode node="addPsr4;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;164;5;200;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addPsr4($prefix, $paths, $prepend = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-4 directories for a given namespace, either&#10;appending or prepending to the ones previously set for this namespace.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix/namespace, with trailing &apos;\\&apos;&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-4 base directories&#10;    bool &lt;b&gt;$prepend&lt;/b&gt;: Whether to prepend the directories;;d4,165;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $prefix;;parray|string $paths;;pbool $prepend;;p;;x;;x;;x">
</treenode>
<treenode node="findFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;360;5;393;;;;vpos;;v;;astring|false;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    findFile($class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finds the path to the file where the class is defined.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The name of the class&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The path if found, false otherwise;;d4,361;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $class;;p;;x">
</treenode>
<treenode node="findFileWithExtension;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f12;405;5;469;;;;vpos;;v;;a;;r;;d4,406;;b3,0;;m0;;e0;;i0;;o;;k;;lclass;;pext;;p;;x;;x">
</treenode>
<treenode node="getApcuPrefix;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;298;5;301;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getApcuPrefix()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The APCu prefix in use, or null if APCu caching is not enabled.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,299;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClassMap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;92;5;95;;;;vpos;;v;;a;;r;;d4,93;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFallbackDirs;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;82;5;85;;;;vpos;;v;;a;;r;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFallbackDirsPsr4;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;87;5;90;;;;vpos;;v;;a;;r;;d4,88;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPrefixes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;68;5;75;;;;vpos;;v;;a;;r;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPrefixesPsr4;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;77;5;80;;;;vpos;;v;;a;;r;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRegisteredLoaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f18;400;5;403;;;;vpos;;v;;aself;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRegisteredLoaders()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the currently registered loaders indexed by their corresponding vendor directories.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,401;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUseIncludePath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;257;5;260;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUseIncludePath()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Can be used to check if the autoloader uses the include path to check&#10;for classes.;;d4,258;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isClassMapAuthoritative;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;278;5;281;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isClassMapAuthoritative()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Should class lookup fail if not found in the current class map?;;d4,279;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="loadClass;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;342;5;351;;;;vpos;;v;;atrue|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    loadClass($class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Loads the given class or interface.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The name of the class&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if loaded, null otherwise;;d4,343;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $class;;p;;x">
</treenode>
<treenode node="register;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;308;5;322;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    register($prepend = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers this instance as an autoloader.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$prepend&lt;/b&gt;: Whether to prepend the autoloader or not;;d4,309;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $prepend;;p;;x">
</treenode>
<treenode node="set;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;209;5;216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    set($prefix, $paths)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-0 directories for a given prefix,&#10;replacing any others previously set for this prefix.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-0 base directories;;d4,210;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $prefix;;parray|string $paths;;p;;x;;x">
</treenode>
<treenode node="setApcuPrefix;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;288;5;291;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setApcuPrefix($apcuPrefix)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    APCu prefix to use to cache found/not-found classes, if the extension is enabled.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$apcuPrefix&lt;/b&gt;;;d4,289;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $apcuPrefix;;p;;x">
</treenode>
<treenode node="setClassMapAuthoritative;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;268;5;271;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setClassMapAuthoritative($classMapAuthoritative)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Turns off searching the prefix and fallback directories for classes&#10;that have not been registered with the class map.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$classMapAuthoritative&lt;/b&gt;;;d4,269;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $classMapAuthoritative;;p;;x">
</treenode>
<treenode node="setPsr4;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;227;5;239;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPsr4($prefix, $paths)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-4 directories for a given namespace,&#10;replacing any others previously set for this namespace.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix/namespace, with trailing &apos;\\&apos;&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-4 base directories;;d4,228;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $prefix;;parray|string $paths;;p;;x;;x">
</treenode>
<treenode node="setUseIncludePath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;246;5;249;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUseIncludePath($useIncludePath)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Turns on searching the include path for class files.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$useIncludePath&lt;/b&gt;;;d4,247;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $useIncludePath;;p;;x">
</treenode>
<treenode node="unregister;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f11;327;5;334;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unregister()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Unregisters this instance as an autoloader.;;d4,328;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Client;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f0;16;1;473;;;;vpos;;v;;aClientInterface;;cClientInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Client implements ClientInterface, \Psr\Http\Client\ClientInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;final&lt;/b&gt;;;d0,17;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__call;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;80;5;92;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __call($method, $args)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;: Client::__call will be removed in guzzlehttp/guzzle:8.0.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |ResponseInterface;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;parray $args;;p;;x;;x">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;56;5;70;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clients accept an array of constructor parameters.&#10;Here&apos;s an example of creating a client using a base_uri and an array of&#10;default request options to apply to each request:&#10;$client = new Client([&#10;&apos;base_uri&apos;        =&gt; &apos;http://www.foo.com/1.0/&apos;,&#10;&apos;timeout&apos;         =&gt; 0,&#10;&apos;allow_redirects&apos; =&gt; false,&#10;&apos;proxy&apos;           =&gt; &apos;192.168.16.1:10&apos;&#10;]);s&#10;Client configuration settings include the following options:&#10;- handler: (callable) Function that transfers HTTP requests over the&#10;wire. The function is called with a Psr7\Http\Message\RequestInterface&#10;and array of transfer options, and must return a&#10;GuzzleHttp\Promise\PromiseInterface that is fulfilled with a&#10;Psr7\Http\Message\ResponseInterface on success.&#10;If no handler is provided, a default handler will be created&#10;that enables all of the request options below by attaching all of the&#10;default middleware to the handler.&#10;- base_uri: (string|UriInterface) Base URI of the client that is merged&#10;into relative URIs. Can be a string or instance of UriInterface.&#10;- **: any request option&#10;&lt;b&gt;see&lt;/b&gt;: \GuzzleHttp\RequestOptions for a list of available request options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: Client configuration settings.;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="applyOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f12;339;5;460;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    applyOptions(RequestInterface $request, array &amp;$options): RequestInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Applies the array of request options to a request.;;d4,340;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="buildUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f12;209;5;221;;;;vpos;;v;;a UriInterface;;r;;d4,210;;b3,0;;m0;;e0;;i0;;o;;k;;luri;;pconfig;;p;;x;;x">
</treenode>
<treenode node="configureDefaults;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f12;226;5;273;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    configureDefaults(array $config): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Configures the default options for a client.;;d4,227;;b3,0;;m0;;e0;;i0;;o;;k;;lconfig;;p;;x">
</treenode>
<treenode node="getConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;202;5;207;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getConfig(?string $option = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a client configuration option.&#10;These options include default request options of the client, a &quot;handler&quot;&#10;(if utilized by the concrete client), and a &quot;base_uri&quot; if utilized by&#10;the concrete client.&#10;&lt;b&gt;deprecated&lt;/b&gt;: Client::getConfig will be removed in guzzlehttp/guzzle:8.0.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$option&lt;/b&gt;: The config option to retrieve.;;d4,203;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $option;;p;;x">
</treenode>
<treenode node="invalidBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f12;465;5;472;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    invalidBody(): InvalidArgumentException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an InvalidArgumentException with pre-set message.;;d4,466;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="prepareDefaults;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f12;280;5;313;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    prepareDefaults(array $options): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Merges default options into the array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Options to modify by reference;;d4,281;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="request;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;183;5;187;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    request(string $method, $uri = &apos;&apos;, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method.&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply. See \GuzzleHttp\RequestOptions.;;d4,184;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="requestAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;151;5;168;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    requestAsync(string $method, $uri = &apos;&apos;, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply. See \GuzzleHttp\RequestOptions.;;d4,152;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;119;5;123;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(RequestInterface $request, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an HTTP request.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply to the given request and to the transfer. See \GuzzleHttp\RequestOptions.;;d4,120;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="sendAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;100;5;109;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendAsync(RequestInterface $request, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Asynchronously send an HTTP request.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply to the given request and to the transfer. See \GuzzleHttp\RequestOptions.;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="sendRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f11;130;5;137;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendRequest(RequestInterface $request): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The HttpClient PSR (PSR-18) specify this method.&#10;&lt;b&gt;inheritDoc&lt;/b&gt;;;d4,131;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;p;;x">
</treenode>
<treenode node="transfer;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Client.php;f12;323;5;334;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    transfer(RequestInterface $request, array $options): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Transfers the given request and applies request options.&#10;The URI of the request is not modified and the request options are used&#10;as-is without merging in default options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: See \GuzzleHttp\RequestOptions.;;d4,324;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ClientException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\ClientException.php;f0;7;1;9;;;;vpos;;v;;aBadResponseException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ClientException extends BadResponseException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception when a client error is encountered (4xx codes);;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ClientTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f0;12;1;240;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f0;29;1;272;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ClientTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Client interface for sending HTTP requests.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="configureAuthentication;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f12;96;5;102;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    configureAuthentication(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch and validate the keyfile and set the project ID.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,97;;b3,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;126;5;129;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete($uri, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP DELETE request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="deleteAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;236;5;239;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteAsync($uri, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP DELETE request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,237;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="detectProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f12;172;5;238;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    detectProjectId(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detect and return a project ID.&#10;Process:&#10;1. If $config[&apos;projectId&apos;] is set, use that.&#10;2. If an emulator is enabled, return a dummy value.&#10;3. If $config[&apos;keyFile&apos;] is set, attempt to retrieve a project ID from&#10;that.&#10;4. Check `GOOGLE_CLOUD_PROJECT` environment variable.&#10;5. Check `GCLOUD_PROJECT` environment variable.&#10;6. If code is running on compute engine, try to get the project ID from&#10;the metadata store.&#10;7. Throw exception.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,173;;b3,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;41;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get($uri, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP GET request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="getAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;156;5;159;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAsync($uri, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP GET request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,157;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="getConnectionType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f12;46;5;64;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getConnectionType(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get either a gRPC or REST connection based on the provided config&#10;and the system dependencies available.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,47;;b3,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="getGrpcInstallationMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f12;84;5;88;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getGrpcInstallationMessage()&#10;;;d4,85;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getKeyFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f12;119;5;152;;;;vpos;;v;;aarray|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getKeyFile(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a keyfile if it exists.&#10;Process:&#10;1. If $config[&apos;keyFile&apos;] is set, use that.&#10;2. If $config[&apos;keyFilePath&apos;] is set, load the file and use that.&#10;3. If GOOGLE_APPLICATION_CREDENTIALS environment variable is set, load&#10;from that location and use that.&#10;4. If OS-specific well-known-file is set, load from that location and use&#10;that.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Key data;;d4,120;;b3,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="getMetaData;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f14;257;5;260;;;;vpos;;v;;aMetadata;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMetaData()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Abstract the Metadata instantiation for unit testing&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d4,258;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="head;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;58;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    head($uri, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP HEAD request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="headAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;172;5;175;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headAsync($uri, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP HEAD request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,173;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="isGrpcLoaded;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f14;268;5;271;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isGrpcLoaded()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Abstract the checking of the grpc extension for unit testing.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d4,269;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="onGce;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f14;246;5;249;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onGce($httpHandler)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Abstract the GCECredentials call so we can mock it in the unit tests!&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d4,247;;b2,0;;m0;;e0;;i0;;o;;k;;lhttpHandler;;p;;x">
</treenode>
<treenode node="patch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;109;5;112;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    patch($uri, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP PATCH request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,110;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="patchAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;220;5;223;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    patchAsync($uri, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP PATCH request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,221;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="post;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;92;5;95;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    post($uri, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP POST request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,93;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="postAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;204;5;207;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    postAsync($uri, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP POST request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,205;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="put;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;75;5;78;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    put($uri, array $options = []): ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP PUT request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="putAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f11;188;5;191;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    putAsync($uri, array $options = []): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP PUT request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d4,189;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;parray $options;;p;;x;;x">
</treenode>
<treenode node="request;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f20;27;98;27;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an HTTP request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well.&#10;&lt;b&gt;throws&lt;/b&gt;: GuzzleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method.&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="requestAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\ClientTrait.php;f20;143;102;143;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and send an asynchronous HTTP request.&#10;Use an absolute path to override the base path of the client, or a&#10;relative path to append to the base path of the client. The URL can&#10;contain the query string as well. Use an array to provide a URL&#10;template and additional variables to use in the URL template expansion.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI object or string.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request options to apply.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="requireGrpc;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ClientTrait.php;f12;71;5;79;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    requireGrpc()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Throw an exception if the gRPC extension is not loaded.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException;;d4,72;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ComposerAutoloaderInit1abd67626b33567d3bb45833fe81e955;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\autoload_real.php;f0;4;1;65;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getLoader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\autoload_real.php;f18;18;5;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLoader()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    \Composer\Autoload\ClassLoader;;d4,19;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="loadClassLoader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\autoload_real.php;f18;8;5;13;;;;vpos;;v;;a;;r;;d4,9;;b1,5;;m0;;e0;;i0;;o;;k;;lclass;;p;;x">
</treenode>
</treenode>
<treenode node="ComposerStaticInit1abd67626b33567d3bb45833fe81e955;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\autoload_static.php;f0;6;1;122;;;;vpos;;v;;a;;r;;d0,7;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getInitializer;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\autoload_static.php;f18;112;5;121;;;;vpos;;v;;a;;r;;d4,113;;b1,5;;m0;;e0;;i0;;o;;k;;lloader;;p;;x">
</treenode>
</treenode>
<treenode node="ConcurrencyControlTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ConcurrencyControlTrait.php;f0;22;1;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ConcurrencyControlTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Methods to control concurrent updates.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="applyEtagHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ConcurrencyControlTrait.php;f12;31;5;46;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    applyEtagHeader(array $options, $argName = &apos;etag&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Apply the If-Match header to requests requiring concurrency control.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;&#10;    string &lt;b&gt;$argName&lt;/b&gt;;;d4,32;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;pstring $argName;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ConflictException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ConflictException.php;f0;23;1;26;;;;vpos;;v;;aServiceException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ConflictException extends ServiceException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a request fails due to a conflict.&#10;In REST context, this exception indicates a status code 409.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ConnectException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\ConnectException.php;f0;12;1;55;;;;vpos;;v;;aTransferException;;cNetworkExceptionInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ConnectException extends TransferException implements NetworkExceptionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a connection cannot be established.&#10;Note that no response is present for a ConnectException;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\ConnectException.php;f11;24;5;33;;;;vpos;;v;;a;;r;;d6,29;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;prequest;;pprevious;;phandlerContext;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getHandlerContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\ConnectException.php;f11;51;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandlerContext(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get contextual information about the error from the underlying handler.&#10;The contents of this array will vary depending on which handler you are&#10;using. It may also be just an empty array. Relying on this data will&#10;couple you to a specific handler, but can give more debug information&#10;when needed.;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\ConnectException.php;f11;38;5;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRequest(): RequestInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the request that caused the exception;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Container;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Container.php;f0;25;1;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Container&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class Container&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Container.php;f18;36;5;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reset()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reset the container statics.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,37;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="CookieJar;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f0;10;1;312;;;;vpos;;v;;aCookieJarInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CookieJar implements CookieJarInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cookie jar that stores cookies as an array;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;29;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(bool $strictMode = false, array $cookieArray = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$strictMode&lt;/b&gt;: Set to true to throw exceptions when invalid cookies are added to the cookie jar.&#10;    array &lt;b&gt;$cookieArray&lt;/b&gt;: Array of SetCookie objects or a hash of arrays that can be used with the SetCookie constructor;;d4,30;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $strictMode;;parray $cookieArray;;p;;x;;x">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;111;5;141;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear(?string $domain = null, ?string $path = null, ?string $name = null): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritDoc&lt;/b&gt;;;d4,112;;b1,0;;m0;;e0;;i0;;o;;k;;ldomain;;ppath;;pname;;p;;x;;x;;x">
</treenode>
<treenode node="clearSessionCookies;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;146;5;154;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearSessionCookies(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritDoc&lt;/b&gt;;;d4,147;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="count;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;219;5;222;;;;vpos;;v;;a int;;r;;d4,220;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="extractCookies;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;232;5;246;;;;vpos;;v;;a void;;r;;d4,233;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;presponse;;p;;x;;x">
</treenode>
<treenode node="fromArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f18;47;5;60;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromArray(array $cookies, string $domain): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new Cookie jar from an associative array and domain.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$cookies&lt;/b&gt;: Cookies to create the jar from&#10;    string &lt;b&gt;$domain&lt;/b&gt;: Domain to set the cookies to;;d4,48;;b1,5;;m0;;e0;;i0;;o;;k;;larray $cookies;;pstring $domain;;p;;x;;x">
</treenode>
<treenode node="getCookieByName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;87;50;87;;;;vpos;;v;;aSetCookie|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finds and returns the cookie based on the name&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: cookie name to search for&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   cookie that was found or null if not found;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="getCookiePathFromRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f12;253;5;271;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCookiePathFromRequest(RequestInterface $request): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Computes cookie path following RFC 6265 section 5.1.4&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc6265#section-5.1.4;;d4,254;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;p;;x">
</treenode>
<treenode node="getIterator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;227;34;227;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    \ArrayIterator&lt;int, SetCookie&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="removeCookieIfEmpty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f12;301;5;311;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeCookieIfEmpty(SetCookie $cookie): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    If a cookie already exists and the server asks to set it again with a&#10;null value, the cookie must be deleted.;;d4,302;;b3,0;;m0;;e0;;i0;;o;;k;;lcookie;;p;;x">
</treenode>
<treenode node="setCookie;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;159;5;217;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setCookie(SetCookie $cookie): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritDoc&lt;/b&gt;;;d4,160;;b1,0;;m0;;e0;;i0;;o;;k;;lcookie;;p;;x">
</treenode>
<treenode node="shouldPersist;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f18;69;5;78;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    shouldPersist(SetCookie $cookie, bool $allowSessionCookies = false): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Evaluate if this cookie should be persisted to storage&#10;that survives between requests.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    SetCookie &lt;b&gt;$cookie&lt;/b&gt;: Being evaluated.&#10;    bool &lt;b&gt;$allowSessionCookies&lt;/b&gt;: If we should persist session cookies;;d4,70;;b1,5;;m0;;e0;;i0;;o;;k;;lSetCookie $cookie;;pbool $allowSessionCookies;;p;;x;;x">
</treenode>
<treenode node="toArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;101;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    toArray(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritDoc&lt;/b&gt;;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withCookieHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\CookieJar.php;f11;273;5;295;;;;vpos;;v;;a RequestInterface;;r;;d4,274;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;p;;x">
</treenode>
</treenode>
<treenode node="Coroutine;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f6;44;1;168;;;;vpos;;v;;aPromiseInterface;;cPromise;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Coroutine implements PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a promise that is resolved using a generator that yields values or&#10;promises (somewhat similar to C#&apos;s async keyword).&#10;When called, the Coroutine::of method will start an instance of the generator&#10;and returns a promise that is fulfilled with its final yielded value.&#10;Control is returned back to the generator when the yielded promise settles.&#10;This can lead to less verbose code when doing lots of sequential async calls&#10;with minimal processing in between.&#10;use GuzzleHttp\Promise;s&#10;function createPromise($value) {&#10;return new Promise\FulfilledPromise($value);s&#10;}&#10;$promise = Promise\Coroutine::of(function () {&#10;$value = (yield createPromise(&apos;a&apos;));s&#10;try {&#10;$value = (yield createPromise($value . &apos;b&apos;));s&#10;} catch (\Exception $e) {&#10;// The promise was rejected.&#10;}&#10;yield $value . &apos;c&apos;;s&#10;});s&#10;// Outputs &quot;abc&quot;&#10;$promise-&gt;then(function ($v) { echo $v;s });s&#10;&lt;b&gt;link&lt;/b&gt;: https://github.com/petkaantonov/bluebird/blob/master/API.md#generators inspiration&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$generatorFn&lt;/b&gt;: Generator function to wrap into a promise.;;d0,45;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;61;5;76;;;;vpos;;v;;a;;r;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;lgeneratorFn;;p;;x">
</treenode>
<treenode node="_handleFailure;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;155;5;167;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _handleFailure($reason)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;internal&lt;/b&gt;;;d4,156;;b1,0;;m0;;e0;;i0;;o;;k;;lreason;;p;;x">
</treenode>
<treenode node="_handleSuccess;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;135;5;150;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _handleSuccess($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;internal&lt;/b&gt;;;d4,136;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;120;5;124;;;;vpos;;v;;a;;r;;d4,121;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;105;5;108;;;;vpos;;v;;a;;r;;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="nextCoroutine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f12;126;5;130;;;;vpos;;v;;a;;r;;d4,127;;b3,0;;m0;;e0;;i0;;o;;k;;lyielded;;p;;x">
</treenode>
<treenode node="of;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f18;83;5;86;;;;vpos;;v;;aself;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    of(callable $generatorFn)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new coroutine.;;d4,84;;b1,5;;m0;;e0;;i0;;o;;k;;lgeneratorFn;;p;;x">
</treenode>
<treenode node="otherwise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;95;5;98;;;;vpos;;v;;a;;r;;d4,96;;b1,0;;m0;;e0;;i0;;o;;k;;lonRejected;;p;;x">
</treenode>
<treenode node="reject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;115;5;118;;;;vpos;;v;;a;;r;;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;lreason;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;110;5;113;;;;vpos;;v;;a;;r;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="then;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;88;5;93;;;;vpos;;v;;a;;r;;d6,91;;b1,0;;m0;;e0;;i0;;o;;k;;lonFulfilled;;ponRejected;;p;;x;;x">
</treenode>
<treenode node="wait;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Coroutine.php;f11;100;5;103;;;;vpos;;v;;a;;r;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lunwrap;;p;;x">
</treenode>
</treenode>
<treenode node="CouchDBHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CouchDBHandler.php;f0;22;1;72;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CouchDBHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    CouchDB handler&#10;&lt;b&gt;author&lt;/b&gt;: Markus Bachmann &lt;markus.bachmann&#10;&lt;b&gt;bachi&lt;/b&gt;: .biz&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CouchDBHandler.php;f11;26;5;37;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;loptions;;plevel;;pbubble;;p;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CouchDBHandler.php;f14;68;5;71;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,69;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CouchDBHandler.php;f14;42;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,43;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="Coverage;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f0;27;1;127;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Coverage&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class Coverage&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f11;59;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ScannerInterface $scanner)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ScannerInterface &lt;b&gt;$scanner&lt;/b&gt;: The scanner to use;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lScannerInterface $scanner;;p;;x">
</treenode>
<treenode node="buildListToCover;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f11;77;5;85;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildListToCover()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a list of all snippets which should be covered.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="cache;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f11;121;5;126;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cache($identifier)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$identifier&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,122;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $identifier;;p;;x">
</treenode>
<treenode node="cover;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f11;96;5;99;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cover($identifier)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Mark a snippet as covered.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: The identifier of the snippet being covered.;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;p;;x">
</treenode>
<treenode node="getSnippetExcludeList;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f12;64;5;67;;;;vpos;;v;;a;;r;;d4,65;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="uncovered;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Coverage.php;f11;109;5;112;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uncovered()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a list of all snippets not marked a covered.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,110;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Create;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Create.php;f6;4;1;83;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="exceptionFor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Create.php;f18;55;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    exceptionFor($reason)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create an exception for a rejected promise value.&#10;\Exception|\Throwable&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;;;d4,56;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $reason;;p;;x">
</treenode>
<treenode node="iterFor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Create.php;f18;71;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    iterFor($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns an iterator for the given value.&#10;\Iterator&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;;;d4,72;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="promiseFor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Create.php;f18;13;5;29;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    promiseFor($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a promise for a value if the value is not a promise.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: Promise or value.;;d4,14;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="rejectionFor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Create.php;f18;39;5;46;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rejectionFor($reason)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a rejected promise for a reason if the reason is not a promise.&#10;If the provided reason is a promise, then it is returned as-is.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;: Promise or reason.;;d4,40;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $reason;;p;;x">
</treenode>
</treenode>
<treenode node="CreatedHmacKey;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\CreatedHmacKey.php;f0;31;1;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CreatedHmacKey&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a newly created HMAC key. Provides access to the key metadata and&#10;secret.&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$response = $storage-&gt;createHmacKey($serviceAccountEmail);s&#10;```;;d0,32;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\CreatedHmacKey.php;f11;47;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(HmacKey $hmacKey, $secret)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    HmacKey &lt;b&gt;$hmacKey&lt;/b&gt;: The HMAC Key object.&#10;    string &lt;b&gt;$secret&lt;/b&gt;: The HMAC key secret.;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;lHmacKey $hmacKey;;pstring $secret;;p;;x;;x">
</treenode>
<treenode node="hmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\CreatedHmacKey.php;f11;63;5;66;;;;vpos;;v;;aHmacKey;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hmacKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the HMAC key object.&#10;Example:&#10;```&#10;$key = $response-&gt;hmacKey();s&#10;```;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="secret;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\CreatedHmacKey.php;f11;81;5;84;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    secret()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the HMAC key secret.&#10;This value will never be returned from the API after first creation. Make&#10;sure to record it for later use immediately upon key creation.&#10;Example:&#10;```&#10;$secret = $response-&gt;secret();s&#10;```;;d4,82;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="CredentialsLoader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f9;28;1;249;;;;vpos;;v;;aFetchAuthTokenInterface;;cUpdateMetadataInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CredentialsLoader implements&#10;    FetchAuthTokenInterface,&#10;    UpdateMetadataInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    CredentialsLoader contains the behaviour used to locate and find default&#10;credentials files on the file system.;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ENV_VAR;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f9;33;17;33;;;;vpos;;v;;a;;r&apos;GOOGLE_APPLICATION_CREDENTIALS&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="NON_WINDOWS_WELL_KNOWN_PATH_BASE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f9;35;42;35;;;;vpos;;v;;a;;r&apos;.config&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TOKEN_CREDENTIAL_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f9;32;30;32;;;;vpos;;v;;a;;r&apos;https://oauth2.googleapis.com/token&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="WELL_KNOWN_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f9;34;25;34;;;;vpos;;v;;a;;r&apos;gcloud/application_default_credentials.json&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fromEnv;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f18;85;5;97;;;;vpos;;v;;aarray|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromEnv()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load a JSON key from the path specified in the environment.&#10;Load a JSON key from the path specified in the environment&#10;variable GOOGLE_APPLICATION_CREDENTIALS. Return null if&#10;GOOGLE_APPLICATION_CREDENTIALS is not specified.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   JSON key | null;;d4,86;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fromWellKnownFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f18;111;5;125;;;;vpos;;v;;aarray|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromWellKnownFile()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load a JSON key from a well known path.&#10;The well known path is OS dependent:&#10;* windows: %APPDATA%/gcloud/application_default_credentials.json&#10;* others: $HOME/.config/gcloud/application_default_credentials.json&#10;If the file does not exist, this returns null.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   JSON key | null;;d4,112;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getGuzzleMajorVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f19;63;5;74;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getGuzzleMajorVersion()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the currently available major Guzzle version.;;d4,64;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUpdateMetadataFunc;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f11;218;5;221;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUpdateMetadataFunc()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    export a callback function which updates runtime metadata.&#10;&lt;b&gt;deprecated&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updateMetadata function;;d4,219;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isOnWindows;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f19;53;5;56;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isOnWindows()&#10;;;d4,54;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="makeCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f18;139;5;159;;;;vpos;;v;;aServiceAccountCredentials;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    makeCredentials(&#10;        $scope,&#10;        array $jsonKey,&#10;        $defaultScope = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new Credentials instance.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$scope&lt;/b&gt;: the scope of the access request, expressed either as an Array or as a space-delimited String.&#10;    array &lt;b&gt;$jsonKey&lt;/b&gt;: the JSON credentials.&#10;    string|array &lt;b&gt;$defaultScope&lt;/b&gt;: The default scope to use if no user-defined scopes exist, expressed either as an Array or as a space-delimited string.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |UserRefreshCredentials;;d6,143;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|array $scope;;parray $jsonKey;;pstring|array $defaultScope;;p;;x;;x;;x">
</treenode>
<treenode node="makeHttpClient;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f18;170;5;200;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    makeHttpClient(&#10;        FetchAuthTokenInterface $fetcher,&#10;        array $httpClientOptions = [],&#10;        callable $httpHandler = null,&#10;        callable $tokenCallback = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create an authorized HTTP Client from an instance of FetchAuthTokenInterface.&#10;\GuzzleHttp\Client&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FetchAuthTokenInterface &lt;b&gt;$fetcher&lt;/b&gt;: is used to fetch the auth token&#10;    array &lt;b&gt;$httpClientOptions&lt;/b&gt;: (optional) Array of request options to apply.&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: (optional) http client to fetch the token.&#10;    callable &lt;b&gt;$tokenCallback&lt;/b&gt;: (optional) function to be called when a new token is fetched.;;d6,175;;b1,5;;m0;;e0;;i0;;o;;k;;lFetchAuthTokenInterface $fetcher;;parray $httpClientOptions;;pcallable $httpHandler;;pcallable $tokenCallback;;p;;x;;x;;x;;x">
</treenode>
<treenode node="makeInsecureCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f18;207;5;210;;;;vpos;;v;;aInsecureCredentials;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    makeInsecureCredentials()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new instance of InsecureCredentials.;;d4,208;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="unableToReadEnv;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f19;41;5;48;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unableToReadEnv($cause)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$cause&lt;/b&gt;;;d4,42;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $cause;;p;;x">
</treenode>
<treenode node="updateMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\CredentialsLoader.php;f11;231;5;248;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateMetadata(&#10;        $metadata,&#10;        $authUri = null,&#10;        callable $httpHandler = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates metadata with the authorization token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: metadata hashmap&#10;    string &lt;b&gt;$authUri&lt;/b&gt;: optional auth uri&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updated metadata hashmap;;d6,235;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;pstring $authUri;;pcallable $httpHandler;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="CubeHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f0;22;1;154;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CubeHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs to Cube.&#10;&lt;b&gt;link&lt;/b&gt;: http://square.github.com/cube/&#10;&lt;b&gt;author&lt;/b&gt;: Wan Chen &lt;kami&#10;&lt;b&gt;kamisama&lt;/b&gt;: .me&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f11;38;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $url, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Cube handler&#10;&lt;b&gt;throws&lt;/b&gt;: \UnexpectedValueException when given url is not a valid url.&#10;A valid url must consist of three parts : protocol://host:port&#10;Only valid protocols used by Cube are http and udp;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lurl;;plevel;;pbubble;;p;;x;;x;;x">
</treenode>
<treenode node="connectHttp;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f14;88;5;102;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    connectHttp(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Establish a connection to an http server&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException           when unable to connect to the socket&#10;&lt;b&gt;throws&lt;/b&gt;: MissingExtensionException when no curl extension;;d4,89;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="connectUdp;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f14;66;5;80;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    connectUdp(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Establish a connection to an UDP socket&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException           when unable to connect to the socket&#10;&lt;b&gt;throws&lt;/b&gt;: MissingExtensionException when there is no socket extension;;d4,67;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f14;107;5;129;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,108;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="writeHttp;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f12;140;5;153;;;;vpos;;v;;a void;;r;;d4,141;;b3,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="writeUdp;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\CubeHandler.php;f12;131;5;138;;;;vpos;;v;;a void;;r;;d4,132;;b3,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
</treenode>
<treenode node="CurlFactory;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f0;19;1;585;;;;vpos;;v;;aCurlFactoryInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CurlFactory implements CurlFactoryInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates curl resources from a request&#10;&lt;b&gt;final&lt;/b&gt;;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="CURL_VERSION_STR;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f16;21;33;21;;;;vpos;;v;;a;;r&apos;curl_version&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="LOW_CURL_VERSION_NUMBER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f16;26;40;26;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f11;41;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(int $maxHandles)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$maxHandles&lt;/b&gt;: Maximum number of idle handles.;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;lint $maxHandles;;p;;x">
</treenode>
<treenode node="applyBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;272;5;309;;;;vpos;;v;;a void;;r;;d4,273;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pconf;;p;;x;;x;;x">
</treenode>
<treenode node="applyHandlerOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;348;5;493;;;;vpos;;v;;a void;;r;;d4,349;;b3,0;;m0;;e0;;i0;;o;;k;;leasy;;pconf;;p;;x;;x">
</treenode>
<treenode node="applyHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;311;5;330;;;;vpos;;v;;a void;;r;;d4,312;;b3,0;;m0;;e0;;i0;;o;;k;;leasy;;pconf;;p;;x;;x">
</treenode>
<treenode node="applyMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;245;5;270;;;;vpos;;v;;a void;;r;;d4,246;;b3,0;;m0;;e0;;i0;;o;;k;;leasy;;pconf;;p;;x;;x">
</treenode>
<treenode node="create;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f11;46;5;72;;;;vpos;;v;;a EasyHandle;;r;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="createHeaderFn;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;540;5;584;;;;vpos;;v;;a callable;;r;;d4,541;;b3,0;;m0;;e0;;i0;;o;;k;;leasy;;p;;x">
</treenode>
<treenode node="createRejection;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f19;160;5;213;;;;vpos;;v;;a PromiseInterface;;r;;d4,161;;b3,5;;m0;;e0;;i0;;o;;k;;leasy;;pctx;;p;;x;;x">
</treenode>
<treenode node="finish;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f18;102;5;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    finish(callable $handler, EasyHandle $easy, CurlFactoryInterface $factory): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Completes a cURL transaction, either returning a response promise or a&#10;rejected promise.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(RequestInterface,: array): PromiseInterface $handler&#10;    CurlFactoryInterface &lt;b&gt;$factory&lt;/b&gt;: Dictates how the handle is released;;d4,103;;b1,5;;m0;;e0;;i0;;o;;k;;lhandler;;peasy;;pfactory;;p;;x;;x;;x">
</treenode>
<treenode node="finishError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f19;141;5;158;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    finishError(callable $handler, EasyHandle $easy, CurlFactoryInterface $factory): PromiseInterface&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(RequestInterface,: array): PromiseInterface $handler;;d4,142;;b3,5;;m0;;e0;;i0;;o;;k;;lhandler;;peasy;;pfactory;;p;;x;;x;;x">
</treenode>
<treenode node="getDefaultConf;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;218;5;243;;;;vpos;;v;;aarray&lt;int|string,;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultConf(EasyHandle $easy): array&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   mixed&gt;;;d4,219;;b3,0;;m0;;e0;;i0;;o;;k;;leasy;;p;;x">
</treenode>
<treenode node="invokeStats;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f19;124;5;136;;;;vpos;;v;;a void;;r;;d4,125;;b3,5;;m0;;e0;;i0;;o;;k;;leasy;;p;;x">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f11;74;5;93;;;;vpos;;v;;a void;;r;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;leasy;;p;;x">
</treenode>
<treenode node="removeHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f12;338;5;346;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeHeader(string $name, array &amp;$options): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Remove a header from the options array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Case-insensitive header to remove&#10;    array &lt;b&gt;$options&lt;/b&gt;: Array of options to modify;;d4,339;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $name;;parray $options;;p;;x;;x">
</treenode>
<treenode node="retryFailedRewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlFactory.php;f19;506;5;538;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    retryFailedRewind(callable $handler, EasyHandle $easy, array $ctx): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This function ensures that a response was set on a transaction. If one&#10;was not set, then the request is retried if possible. This error&#10;typically means you are sending a payload, curl encountered a&#10;&quot;Connection died, retrying a fresh connect&quot; error, tried to rewind the&#10;stream, and then encountered a &quot;necessary data rewind wasn&apos;t possible&quot;&#10;error, causing the request to be sent through curl_multi_info_read()&#10;without an error status.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(RequestInterface,: array): PromiseInterface $handler;;d4,507;;b3,5;;m0;;e0;;i0;;o;;k;;lhandler;;peasy;;pctx;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="CurlHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlHandler.php;f0;16;1;48;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CurlHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    HTTP handler that uses cURL easy handles as a transport layer.&#10;When using the CurlHandler, custom curl options can be specified as an&#10;associative array of curl option constants mapping to values in the&#10;**curl** key of the &quot;client&quot; key of the request.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,17;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlHandler.php;f11;30;5;34;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Accepts an associative array of options:&#10;- factory: Optional curl factory used to create cURL handles.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Array of options to use with the handler;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlHandler.php;f11;36;5;47;;;;vpos;;v;;a PromiseInterface;;r;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
</treenode>
<treenode node="CurlMultiHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f0;21;1;252;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class CurlMultiHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns an asynchronous response using curl_multi_* functions.&#10;When using the CurlMultiHandler, custom curl options can be specified as an&#10;associative array of curl option constants mapping to values in the&#10;**curl** key of the provided request options.&#10;Internal use only. Lazy loaded multi-handle.&#10;&lt;b&gt;final&lt;/b&gt; resource|\CurlMultiHandle $_mh;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f11;66;5;80;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This handler accepts the following options:&#10;- handle_factory: An optional factory  used to create curl handles&#10;- select_timeout: Optional timeout (in seconds) to block before timing&#10;out while selecting curl handles. Defaults to 1 second.&#10;- options: An associative array of CURLMOPT_* options and&#10;corresponding values for curl_multi_setopt();;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;loptions;;p;;x">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f11;112;5;118;;;;vpos;;v;;a;;r;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f11;90;5;110;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __get($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \BadMethodCallException when another field as `_mh` will be gotten&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException       when curl can not initialize a multi handle&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |\CurlMultiHandle;;d4,91;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f11;120;5;135;;;;vpos;;v;;a PromiseInterface;;r;;d4,121;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="addRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f12;186;5;196;;;;vpos;;v;;a void;;r;;d4,187;;b3,0;;m0;;e0;;i0;;o;;k;;lentry;;p;;x">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f12;205;5;218;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cancel($id): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cancels a handle from sending and removes references to it.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$id&lt;/b&gt;: Handle ID to cancel and remove.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True on success, false on failure.;;d4,206;;b3,0;;m0;;e0;;i0;;o;;k;;lint $id;;p;;x">
</treenode>
<treenode node="execute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f11;173;5;184;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    execute(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runs until all outstanding connections have completed.;;d4,174;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="processMessages;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f12;220;5;238;;;;vpos;;v;;a void;;r;;d4,221;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="tick;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f11;140;5;168;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    tick(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Ticks the curl event loop.;;d4,141;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="timeToNext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\CurlMultiHandler.php;f12;240;5;251;;;;vpos;;v;;a int;;r;;d4,241;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="DataIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f0;77;1;186;;;;vpos;;v;;aIterator;;c;;r;;d0,78;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="current;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;161;5;164;;;;vpos;;v;;a;;r;;d4,162;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="key;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;156;5;159;;;;vpos;;v;;a;;r;;d4,157;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="next;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;166;5;185;;;;vpos;;v;;a;;r;;d4,167;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;142;5;147;;;;vpos;;v;;a;;r;;d4,143;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="valid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\DataIterator.php;f11;149;5;154;;;;vpos;;v;;a;;r;;d4,150;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="DatastoreOperationRefreshTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\DatastoreOperationRefreshTrait.php;f0;29;1;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait DatastoreOperationRefreshTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Refresh Datastore operation class&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="refreshOperation;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\DatastoreOperationRefreshTrait.php;f11;45;5;67;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    refreshOperation($stub, ConnectionInterface $connection, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Refresh the operation property of a given stubbed class.&#10;&lt;b&gt;type&lt;/b&gt;: string $projectId the project id.&#10;&lt;b&gt;type&lt;/b&gt;: bool $returnInt64AsObject if true, will encode int64s as objects.&#10;&lt;b&gt;type&lt;/b&gt;: bool $encode whether to base64-encode certain values.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$stub&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options;;d4,46;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $stub;;pConnectionInterface $connection;;parray $options;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="DateTimeImmutable;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\DateTimeImmutable.php;f0;21;1;48;;;;vpos;;v;;aDateTimeImmutable;;cJsonSerializable;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DateTimeImmutable extends \DateTimeImmutable implements \JsonSerializable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Overrides default json encoding of date time objects&#10;&lt;b&gt;author&lt;/b&gt;: Menno Holtkamp&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\DateTimeImmutable.php;f11;28;5;33;;;;vpos;;v;;a;;r;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;luseMicroseconds;;ptimezone;;p;;x;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\DateTimeImmutable.php;f11;44;5;47;;;;vpos;;v;;a string;;r;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="jsonSerialize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\DateTimeImmutable.php;f11;35;5;42;;;;vpos;;v;;a string;;r;;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="DeadlineExceededException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\DeadlineExceededException.php;f0;23;1;26;;;;vpos;;v;;aServiceException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DeadlineExceededException extends ServiceException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a request takes too long to complete.&#10;In REST context, this exception indicates a status code 504.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DebugInfoTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\DebugInfoTrait.php;f0;24;1;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait DebugInfoTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides easier to read debug information when dumping a class to stdout.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__debugInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\DebugInfoTrait.php;f11;30;5;48;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __debugInfo()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="DeduplicationHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DeduplicationHandler.php;f0;35;1;172;;;;vpos;;v;;aBufferHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DeduplicationHandler extends BufferHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Simple handler wrapper that deduplicates log records across multiple requests&#10;It also includes the BufferHandler functionality and will buffer&#10;all messages until the end of the request or flush() is called.&#10;This works by storing all log records&apos; messages above $deduplicationLevel&#10;to the file specified by $deduplicationStore. When further logs come in at the end of the&#10;request (or when flush() is called), all those above $deduplicationLevel are checked&#10;against the existing stored logs. If they match and the timestamps in the stored log is&#10;not older than $time seconds, the new log record is discarded. If no log record is new, the&#10;whole data set is discarded.&#10;This is mainly useful in combination with Mail handlers or things like Slack or HipChat handlers&#10;that send messages to people, to avoid spamming with the same message over and over in case of&#10;a major component failure like a database server being down which makes all requests fail in the&#10;same way.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DeduplicationHandler.php;f11;64;5;71;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(HandlerInterface $handler, ?string $deduplicationStore = null, $deduplicationLevel = Logger::ERROR, int $time = 60, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    HandlerInterface &lt;b&gt;$handler&lt;/b&gt;: Handler.&#10;    string &lt;b&gt;$deduplicationStore&lt;/b&gt;: The file/path where the deduplication log should be kept&#10;    string|int &lt;b&gt;$deduplicationLevel&lt;/b&gt;: The minimum logging level for log records to be looked at for deduplication purposes&#10;    int &lt;b&gt;$time&lt;/b&gt;: The period (in seconds) during which duplicate entries should be suppressed after a given log is sent through&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;lHandlerInterface $handler;;pstring $deduplicationStore;;pstring|int $deduplicationLevel;;pint $time;;pbool $bubble;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="appendRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DeduplicationHandler.php;f12;168;5;171;;;;vpos;;v;;a void;;r;;d4,169;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="collectLogs;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DeduplicationHandler.php;f12;132;5;166;;;;vpos;;v;;a void;;r;;d4,133;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DeduplicationHandler.php;f11;73;5;100;;;;vpos;;v;;a void;;r;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isDuplicate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DeduplicationHandler.php;f12;102;5;130;;;;vpos;;v;;a bool;;r;;d4,103;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="DeletionQueue;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\DeletionQueue.php;f0;29;1;112;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DeletionQueue&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Manage a queue of items to be cleaned up at the end of the test run.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\DeletionQueue.php;f11;48;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($acceptAllInputs = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$acceptAllInputs&lt;/b&gt;: If false, only callables or objects with `delete` methods are allowed. **Defaults to** `false`.;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $acceptAllInputs;;p;;x">
</treenode>
<treenode node="add;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\DeletionQueue.php;f11;64;5;81;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add($toDelete)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an item to be cleaned up.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$toDelete&lt;/b&gt;: Unless the class was created with `$acceptAllInputs = true`, either a callable with no arguments, or an object with a `delete` method.;;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $toDelete;;p;;x">
</treenode>
<treenode node="process;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\DeletionQueue.php;f11;91;5;111;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    process(callable $action = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Process all items in the deletion queue.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;laction;;p;;x">
</treenode>
</treenode>
<treenode node="DocBlockStripSpaces;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\DocBlockStripSpaces.php;f0;27;1;48;;;;vpos;;v;;aDocBlock;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DocBlockStripSpaces extends DocBlock&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class DocBlockStripSpaces&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="cleanInput;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\DocBlockStripSpaces.php;f11;40;5;47;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cleanInput($comment, $spaces = 4)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Strips extra whitespace from the DocBlock comment.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$comment&lt;/b&gt;: String containing the comment text.&#10;    int &lt;b&gt;$spaces&lt;/b&gt;: The number of spaces to strip.;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $comment;;pint $spaces;;p;;x;;x">
</treenode>
</treenode>
<treenode node="DoctrineCouchDBHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DoctrineCouchDBHandler.php;f0;23;1;45;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DoctrineCouchDBHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    CouchDB handler for Doctrine CouchDB ODM&#10;&lt;b&gt;author&lt;/b&gt;: Markus Bachmann &lt;markus.bachmann&#10;&lt;b&gt;bachi&lt;/b&gt;: .biz&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DoctrineCouchDBHandler.php;f11;27;5;31;;;;vpos;;v;;a;;r;;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;lclient;;plevel;;pbubble;;p;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DoctrineCouchDBHandler.php;f14;41;5;44;;;;vpos;;v;;a FormatterInterface;;r;;d4,42;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DoctrineCouchDBHandler.php;f14;36;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,37;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="DroppingStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\DroppingStream.php;f0;10;1;42;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DroppingStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stream decorator that begins dropping data once the size of the underlying&#10;stream becomes too full.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\DroppingStream.php;f11;20;5;24;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(StreamInterface $stream, $maxLength)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Underlying stream to decorate.&#10;    int &lt;b&gt;$maxLength&lt;/b&gt;: Maximum size before dropping data.;;d4,21;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pint $maxLength;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\DroppingStream.php;f11;26;5;41;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="DummyTest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\DummyTest.php;f0;11;1;17;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DummyTest&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This class is internal and does not follow the BC promise.&#10;Do NOT use this class in any way.&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,12;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\DummyTest.php;f11;13;5;16;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Duration;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Duration.php;f0;36;1;103;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Duration&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a Duration type.&#10;Example:&#10;```&#10;use Google\Cloud\Core\Duration;s&#10;$seconds = 100;s&#10;$nanoSeconds = 1000;s&#10;$duration = new Duration($seconds, $nanoSeconds);s&#10;```&#10;```&#10;// Duration objects can be cast to json-encoded strings.&#10;echo (string) $duration;s&#10;```;;d0,37;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="TYPE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Duration.php;f9;38;14;38;;;;vpos;;v;;a;;r&apos;DURATION&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Duration.php;f11;54;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($seconds, $nanos = 0)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$seconds&lt;/b&gt;: The number of seconds in the duration.&#10;    int &lt;b&gt;$nanos&lt;/b&gt;: [optional] The number of nanoseconds in the duration.;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;lint $seconds;;pint $nanos;;p;;x;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Duration.php;f11;99;5;102;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __toString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format the value as a string.&#10;&lt;b&gt;access&lt;/b&gt;: private;;d4,100;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="formatAsString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Duration.php;f11;88;5;91;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatAsString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format the value as a string.&#10;Example:&#10;```&#10;echo $duration-&gt;formatAsString();s&#10;```;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Duration.php;f11;70;5;76;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the duration&#10;Example:&#10;```&#10;$res = $duration-&gt;get();s&#10;```;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="DynamoDbHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DynamoDbHandler.php;f0;26;1;102;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class DynamoDbHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Amazon DynamoDB handler (http://aws.amazon.com/dynamodb/)&#10;&lt;b&gt;link&lt;/b&gt;: https://github.com/aws/aws-sdk-php/&#10;&lt;b&gt;author&lt;/b&gt;: Andrew Lawson &lt;adlawson&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DATE_FORMAT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DynamoDbHandler.php;f16;28;28;28;;;;vpos;;v;;a;;r&apos;Y-m-d\TH:i:s.uO&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DynamoDbHandler.php;f11;53;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(DynamoDbClient $client, string $table, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$level&lt;/b&gt;;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;lclient;;ptable;;plevel;;pbubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="filterEmptyFields;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DynamoDbHandler.php;f14;88;5;93;;;;vpos;;v;;a array;;r;;d4,89;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DynamoDbHandler.php;f14;98;5;101;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,99;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\DynamoDbHandler.php;f14;72;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,73;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="Each;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Each.php;f6;4;1;89;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="of;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Each.php;f18;25;5;34;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    of(&#10;        $iterable,&#10;        callable $onFulfilled = null,&#10;        callable $onRejected = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Given an iterator that yields promises or values, returns a promise that&#10;is fulfilled with a null value when the iterator has been consumed or&#10;the aggregate promise has been fulfilled or rejected.&#10;$onFulfilled is a function that accepts the fulfilled value, iterator&#10;index, and the aggregate promise. The callback can invoke any necessary&#10;side effects and choose to resolve or reject the aggregate if needed.&#10;$onRejected is a function that accepts the rejection reason, iterator&#10;index, and the aggregate promise. The callback can invoke any necessary&#10;side effects and choose to resolve or reject the aggregate if needed.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;: Iterator or array to iterate over.&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;&#10;    callable &lt;b&gt;$onRejected&lt;/b&gt;;;d6,29;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;pcallable $onFulfilled;;pcallable $onRejected;;p;;x;;x;;x">
</treenode>
<treenode node="ofLimit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Each.php;f18;51;5;62;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ofLimit(&#10;        $iterable,&#10;        $concurrency,&#10;        callable $onFulfilled = null,&#10;        callable $onRejected = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Like of, but only allows a certain number of outstanding promises at any&#10;given time.&#10;$concurrency may be an integer or a function that accepts the number of&#10;pending promises and returns a numeric concurrency limit value to allow&#10;for dynamic a concurrency size.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;&#10;    int|callable &lt;b&gt;$concurrency&lt;/b&gt;&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;&#10;    callable &lt;b&gt;$onRejected&lt;/b&gt;;;d6,56;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;pint|callable $concurrency;;pcallable $onFulfilled;;pcallable $onRejected;;p;;x;;x;;x;;x">
</treenode>
<treenode node="ofLimitAll;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Each.php;f18;75;5;88;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ofLimitAll(&#10;        $iterable,&#10;        $concurrency,&#10;        callable $onFulfilled = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Like limit, but ensures that no promise in the given $iterable argument&#10;is rejected. If any promise is rejected, then the aggregate promise is&#10;rejected with the encountered rejection.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;&#10;    int|callable &lt;b&gt;$concurrency&lt;/b&gt;&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;;;d6,79;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;pint|callable $concurrency;;pcallable $onFulfilled;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="EachPromise;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f0;8;1;252;;;;vpos;;v;;aPromisorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class EachPromise implements PromisorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a promise that iterates over many promises and invokes&#10;side-effect functions in the process.;;d0,9;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f11;51;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($iterable, array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Configuration hash can include the following key value pairs:&#10;- fulfilled: (callable) Invoked when a promise fulfills. The function&#10;is invoked with three arguments: the fulfillment value, the index&#10;position from the iterable list of the promise, and the aggregate&#10;promise that manages all of the promises. The aggregate promise may&#10;be resolved from within the callback to short-circuit the promise.&#10;- rejected: (callable) Invoked when a promise is rejected. The&#10;function is invoked with three arguments: the rejection reason, the&#10;index position from the iterable list of the promise, and the&#10;aggregate promise that manages all of the promises. The aggregate&#10;promise may be resolved from within the callback to short-circuit&#10;the promise.&#10;- concurrency: (integer) Pass this configuration option to limit the&#10;allowed number of outstanding concurrently executing promises,&#10;creating a capped pool of promises. There is no limit by default.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;: Promises or values to iterate.&#10;    array &lt;b&gt;$config&lt;/b&gt;: Configuration options;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;parray $config;;p;;x;;x">
</treenode>
<treenode node="addPending;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f12;156;5;197;;;;vpos;;v;;a;;r;;d4,157;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="advanceIterator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f12;199;5;222;;;;vpos;;v;;a;;r;;d4,200;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="checkIfFinished;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f12;242;5;251;;;;vpos;;v;;a;;r;;d4,243;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createPromise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f12;103;5;126;;;;vpos;;v;;a;;r;;d4,104;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="promise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f11;69;5;101;;;;vpos;;v;;a;;r;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="refillPending;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f12;128;5;154;;;;vpos;;v;;a;;r;;d4,129;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="step;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\EachPromise.php;f12;224;5;240;;;;vpos;;v;;a;;r;;d4,225;;b3,0;;m0;;e0;;i0;;o;;k;;lidx;;p;;x">
</treenode>
</treenode>
<treenode node="EasyHandle;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\EasyHandle.php;f6;15;1;117;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class EasyHandle&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a cURL easy handle and the data it populates.&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,16;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\EasyHandle.php;f11;112;5;116;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __get($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \BadMethodCallException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="createResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\EasyHandle.php;f11;67;5;103;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createResponse(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attach a response to the easy handle based on the received headers.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if no headers have been received.;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ElasticaFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticaFormatter.php;f0;20;1;84;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ElasticaFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a log message into an Elastica Document&#10;&lt;b&gt;author&lt;/b&gt;: Jelle Vink &lt;jelle.vink&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticaFormatter.php;f11;36;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $index, ?string $type)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ?string $type  Elastic Search document type, deprecated as of Elastica 7&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$index&lt;/b&gt;: Elastic Search index name&#10;    ;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $index;;p;;p;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticaFormatter.php;f11;48;5;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDocument;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticaFormatter.php;f14;73;5;83;;;;vpos;;v;;aDocument;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDocument(array $record): Document&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a log message into an Elastica Document&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,74;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="getIndex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticaFormatter.php;f11;55;5;58;;;;vpos;;v;;a string;;r;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticaFormatter.php;f11;63;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getType(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;: since Elastica 7 type has no effect;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ElasticaHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f0;35;1;123;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ElasticaHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Elastic Search handler&#10;Usage example:&#10;$client = new \Elastica\Client();s&#10;$options = array(&#10;&apos;index&apos; =&gt; &apos;elastic_index_name&apos;,&#10;&apos;type&apos; =&gt; &apos;elastic_doc_type&apos;, Types have been removed in Elastica 7&#10;);s&#10;$handler = new ElasticaHandler($client, $options);s&#10;$log = new Logger(&apos;application&apos;);s&#10;$log-&gt;pushHandler($handler);s&#10;&lt;b&gt;author&lt;/b&gt;: Jelle Vink &lt;jelle.vink&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f11;53;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(Client $client, array $options = [], $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Client &lt;b&gt;$client&lt;/b&gt;: Elastica Client object&#10;    array &lt;b&gt;$options&lt;/b&gt;: Handler configuration&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;lClient $client;;parray $options;;pint|string $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="bulkSend;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f14;113;5;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    bulkSend(array $documents): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Use Elasticsearch bulk API to send list of documents&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException;;d4,114;;b2,0;;m0;;e0;;i0;;o;;k;;ldocuments;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f14;95;5;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,96;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f11;87;5;90;;;;vpos;;v;;a array;;r;;d4,88;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f11;103;5;107;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f11;78;5;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticaHandler.php;f14;70;5;73;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,71;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="ElasticsearchFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticsearchFormatter.php;f0;20;1;88;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ElasticsearchFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a log message into an Elasticsearch record&#10;&lt;b&gt;author&lt;/b&gt;: Avtandil Kikabidze &lt;akalongman&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticsearchFormatter.php;f11;36;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $index, string $type)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$index&lt;/b&gt;: Elasticsearch index name&#10;    string &lt;b&gt;$type&lt;/b&gt;: Elasticsearch record type;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $index;;pstring $type;;p;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticsearchFormatter.php;f11;48;5;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDocument;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticsearchFormatter.php;f14;81;5;87;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDocument(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a log message into an Elasticsearch record&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: Log message;;d4,82;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="getIndex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticsearchFormatter.php;f11;60;5;63;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIndex(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Getter index;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ElasticsearchFormatter.php;f11;70;5;73;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getType(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Getter type;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ElasticsearchHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f0;43;1;188;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ElasticsearchHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Elasticsearch handler&#10;&lt;b&gt;link&lt;/b&gt;: https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html&#10;Simple usage example:&#10;$client = \Elasticsearch\ClientBuilder::create()&#10;-&gt;setHosts($hosts)&#10;-&gt;build();s&#10;$options = array(&#10;&apos;index&apos; =&gt; &apos;elastic_index_name&apos;,&#10;&apos;type&apos;  =&gt; &apos;elastic_doc_type&apos;,&#10;);s&#10;$handler = new ElasticsearchHandler($client, $options);s&#10;$log = new Logger(&apos;application&apos;);s&#10;$log-&gt;pushHandler($handler);s&#10;&lt;b&gt;author&lt;/b&gt;: Avtandil Kikabidze &lt;akalongman&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,44;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f11;61;5;73;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(Client $client, array $options = [], $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Client &lt;b&gt;$client&lt;/b&gt;: Elasticsearch Client object&#10;    array &lt;b&gt;$options&lt;/b&gt;: Handler configuration&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;lClient $client;;parray $options;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="bulkSend;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f14;128;5;157;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    bulkSend(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Use Elasticsearch bulk API to send list of documents&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$records&lt;/b&gt;;;d4,129;;b2,0;;m0;;e0;;i0;;o;;k;;larray $records;;p;;x">
</treenode>
<treenode node="createExceptionFromError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f14;182;5;187;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createExceptionFromError(array $error): ElasticsearchRuntimeException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates elasticsearch exception from error array&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$error&lt;/b&gt;;;d4,183;;b2,0;;m0;;e0;;i0;;o;;k;;larray $error;;p;;x">
</treenode>
<treenode node="createExceptionFromResponses;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f14;166;5;175;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createExceptionFromResponses(array $responses): ElasticsearchRuntimeException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates elasticsearch exception from responses array&#10;Only the first error is converted into an exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$responses&lt;/b&gt;: returned by $this-&gt;client-&gt;bulk();;d4,167;;b2,0;;m0;;e0;;i0;;o;;k;;larray $responses;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f14;108;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,109;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f11;100;5;103;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getOptions(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Getter options;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f11;116;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f11;86;5;93;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,87;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ElasticsearchHandler.php;f14;78;5;81;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,79;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="EmptyMetadataProvider;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\EmptyMetadataProvider.php;f0;23;1;71;;;;vpos;;v;;aMetadataProviderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class EmptyMetadataProvider implements MetadataProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An empty MetadataProvider.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="labels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\EmptyMetadataProvider.php;f11;67;5;70;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    labels()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the labels.;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="monitoredResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\EmptyMetadataProvider.php;f11;31;5;34;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    monitoredResource()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an array representing MonitoredResource.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/logging/docs/reference/v2/rest/v2/MonitoredResource};;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="projectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\EmptyMetadataProvider.php;f11;40;5;43;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    projectId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the project id.;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="serviceId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\EmptyMetadataProvider.php;f11;49;5;52;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    serviceId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the service id.;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="versionId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\EmptyMetadataProvider.php;f11;58;5;61;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    versionId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the version id.;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="EmulatorTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\EmulatorTrait.php;f0;22;1;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait EmulatorTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides common logic for configuring the usage of an emulator.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="emulatorBaseUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\EmulatorTrait.php;f12;55;5;63;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    emulatorBaseUri($emulatorHost)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a valid base uri for a service emulator.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$emulatorHost&lt;/b&gt;;;d4,56;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $emulatorHost;;p;;x">
</treenode>
<treenode node="emulatorGapicConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\EmulatorTrait.php;f12;30;5;48;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    emulatorGapicConfig($emulatorHost)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Configure the gapic configuration to use a service emulator.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$emulatorHost&lt;/b&gt;;;d4,31;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $emulatorHost;;p;;x">
</treenode>
<treenode node="getEmulatorBaseUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\EmulatorTrait.php;f11;77;5;84;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getEmulatorBaseUri($baseUri, $emulatorHost = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    When emulators are enabled, use them as the service host.&#10;This method is deprecated and will be removed in a future major release.&#10;&lt;b&gt;deprecated&lt;/b&gt;&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$baseUri&lt;/b&gt;&#10;    string &lt;b&gt;$emulatorHost&lt;/b&gt;: [optional];;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $baseUri;;pstring $emulatorHost;;p;;x;;x">
</treenode>
</treenode>
<treenode node="EncryptionTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\EncryptionTrait.php;f0;24;1;146;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait EncryptionTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Trait which provides helper methods for customer-supplied encryption.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="buildHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\EncryptionTrait.php;f12;90;5;110;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildHeaders($key, $keySHA256, $useCopySourceHeaders)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds out customer-supplied encryption headers.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;&#10;    string &lt;b&gt;$keySHA256&lt;/b&gt;&#10;    bool &lt;b&gt;$useCopySourceHeaders&lt;/b&gt;;;d4,91;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $key;;pstring $keySHA256;;pbool $useCopySourceHeaders;;p;;x;;x;;x">
</treenode>
<treenode node="formatEncryptionHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\EncryptionTrait.php;f11;51;5;80;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatEncryptionHeaders(array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats options for customer-supplied encryption headers.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="signString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\EncryptionTrait.php;f14;125;5;145;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signString($privateKey, $data, $forceOpenssl = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using a given private key.&#10;&lt;b&gt;deprecated&lt;/b&gt;: Please use the {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Auth\SignBlobInterface::signBlob()}&#10;and implementations for signing strings.&#10;This method will be removed in a future release.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$privateKey&lt;/b&gt;: The private key to use to sign the data.&#10;    string &lt;b&gt;$data&lt;/b&gt;: The data to sign.&#10;    bool &lt;b&gt;$forceOpenssl&lt;/b&gt;: If true, OpenSSL will be used regardless of whether phpseclib is available. **Defaults to** `false`.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The signature;;d4,126;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $privateKey;;pstring $data;;pbool $forceOpenssl;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="ErrorHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f0;25;1;265;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ErrorHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog error handler&#10;A facility to enable logging of runtime errors, exceptions and fatal errors.&#10;Quick setup: &lt;code&gt;ErrorHandler::register($logger);s&lt;/code&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f11;42;5;45;;;;vpos;;v;;a;;r;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;llogger;;p;;x">
</treenode>
<treenode node="codeToString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f19;228;5;264;;;;vpos;;v;;a string;;r;;d4,229;;b3,5;;m0;;e0;;i0;;o;;k;;lcode;;p;;x">
</treenode>
<treenode node="defaultErrorLevelMap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f14;129;5;148;;;;vpos;;v;;a array;;r;;d4,130;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="defaultExceptionLevelMap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f14;121;5;127;;;;vpos;;v;;a array;;r;;d4,122;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f11;180;5;203;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleError($code, $message, $file = &apos;&apos;, $line = 0, $context = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;private&lt;/b&gt;;;d4,181;;b1,0;;m0;;e0;;i0;;o;;k;;lcode;;pmessage;;pfile;;pline;;pcontext;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="handleException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f12;150;5;175;;;;vpos;;v;;a;;r;;d4,151;;b3,0;;m0;;e0;;i0;;o;;k;;le;;p;;x">
</treenode>
<treenode node="handleFatalError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f11;208;5;226;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleFatalError()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;private&lt;/b&gt;;;d4,209;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="register;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f18;58;5;73;;;;vpos;;v;;aErrorHandler;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    register(LoggerInterface $logger, $errorLevelMap = [], $exceptionLevelMap = [], $fatalLevel = null): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a new ErrorHandler for a given Logger&#10;By default it will handle errors, exceptions and fatal errors&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LoggerInterface &lt;b&gt;$logger&lt;/b&gt;&#10;    array|false &lt;b&gt;$errorLevelMap&lt;/b&gt;: an array of E_* constant to LogLevel::* constant mapping, or false to disable error handling&#10;    array|false &lt;b&gt;$exceptionLevelMap&lt;/b&gt;: an array of class name to LogLevel::* constant mapping, or false to disable exception handling&#10;    string|null|false &lt;b&gt;$fatalLevel&lt;/b&gt;: a LogLevel::* constant, null to use the default LogLevel::ALERT or false to disable fatal error handling;;d4,59;;b1,5;;m0;;e0;;i0;;o;;k;;lLoggerInterface $logger;;parray|false $errorLevelMap;;parray|false $exceptionLevelMap;;pstring|null|false $fatalLevel;;p;;x;;x;;x;;x">
</treenode>
<treenode node="registerErrorHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f11;93;5;104;;;;vpos;;v;;a self;;r;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;llevelMap;;pcallPrevious;;perrorTypes;;phandleOnlyReportedErrors;;p;;x;;x;;x;;x">
</treenode>
<treenode node="registerExceptionHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f11;75;5;91;;;;vpos;;v;;a self;;r;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;llevelMap;;pcallPrevious;;p;;x;;x">
</treenode>
<treenode node="registerFatalHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\ErrorHandler.php;f11;110;5;119;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    registerFatalHandler($level = null, int $reservedMemorySize = 20): self&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$level&lt;/b&gt;: a LogLevel::* constant, null to use the default LogLevel::ALERT or false to disable fatal error handling&#10;    int &lt;b&gt;$reservedMemorySize&lt;/b&gt;: Amount of KBs to reserve in memory so that it can be freed when handling fatal errors giving Monolog some room in memory to get its job done;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $level;;pint $reservedMemorySize;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ErrorLevelActivationStrategy;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy.php;f0;20;1;39;;;;vpos;;v;;aActivationStrategyInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ErrorLevelActivationStrategy implements ActivationStrategyInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Error level based activation strategy.&#10;&lt;b&gt;author&lt;/b&gt;: Johannes M. Schmitt &lt;schmittjoh&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy.php;f11;30;5;33;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($actionLevel)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$actionLevel&lt;/b&gt;: Level or name or value;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;lint|string $actionLevel;;p;;x">
</treenode>
<treenode node="isHandlerActivated;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy.php;f11;35;5;38;;;;vpos;;v;;a bool;;r;;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="ErrorLogHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f0;22;1;85;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ErrorLogHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores to PHP error_log() handler.&#10;&lt;b&gt;author&lt;/b&gt;: Elan Ruusamäe &lt;glen&#10;&lt;b&gt;delfi&lt;/b&gt;: .ee&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="OPERATING_SYSTEM;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f16;24;33;24;;;;vpos;;v;;a;;r0;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SAPI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f16;25;21;25;;;;vpos;;v;;a;;r4;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f11;36;5;48;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(int $messageType = self::OPERATING_SYSTEM, $level = Logger::DEBUG, bool $bubble = true, bool $expandNewlines = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$messageType&lt;/b&gt;: Says where the error should go.&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    bool &lt;b&gt;$expandNewlines&lt;/b&gt;: If set to true, newlines in the message will be expanded to be take multiple log entries;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lint $messageType;;pint|string $level;;pbool $bubble;;pbool $expandNewlines;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getAvailableTypes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f18;53;5;59;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAvailableTypes(): array&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   With all available types;;d4,54;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f14;64;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,65;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ErrorLogHandler.php;f14;72;5;84;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,73;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="ExcludeFilter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ExcludeFilter.php;f0;28;1;57;;;;vpos;;v;;aFilterIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ExcludeFilter extends FilterIterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class ExcludeFilter is used to exclude directories from an iterable list&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ExcludeFilter.php;f11;37;5;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(Iterator $iterator, array $excludeDirs)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ExcludeFilter constructor.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Iterator &lt;b&gt;$iterator&lt;/b&gt;&#10;    array &lt;b&gt;$excludeDirs&lt;/b&gt;;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lIterator $iterator;;parray $excludeDirs;;p;;x;;x">
</treenode>
<treenode node="accept;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ExcludeFilter.php;f11;46;5;56;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    accept()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Determines whether to accept or exclude a path;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ExpiredException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\ExpiredException.php;f0;3;1;5;;;;vpos;;v;;aUnexpectedValueException;;c;;r;;d0,4;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ExponentialBackoff;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f0;22;1;135;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ExponentialBackoff&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exponential backoff implementation.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="MAX_DELAY_MICROSECONDS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f9;24;32;24;;;;vpos;;v;;a;;r60000000;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f11;50;5;60;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($retries = null, callable $retryFunction = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$retries&lt;/b&gt;: [optional] Number of retries for a failed request.&#10;    callable &lt;b&gt;$retryFunction&lt;/b&gt;: [optional] returns bool for whether or not to retry;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lint $retries;;pcallable $retryFunction;;p;;x;;x">
</treenode>
<treenode node="calculateDelay;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f18;128;5;134;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    calculateDelay($attempt)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Calculates exponential delay.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$attempt&lt;/b&gt;: The attempt number used to calculate the delay.;;d4,129;;b1,5;;m0;;e0;;i0;;o;;k;;lint $attempt;;p;;x">
</treenode>
<treenode node="execute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f11;70;5;97;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    execute(callable $function, array $arguments = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Executes the retry process.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception The last exception caught while retrying.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$function&lt;/b&gt;&#10;    array &lt;b&gt;$arguments&lt;/b&gt;: [optional];;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $function;;parray $arguments;;p;;x;;x">
</treenode>
<treenode node="setCalcDelayFunction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f11;117;5;120;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setCalcDelayFunction(callable $calcDelayFunction)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    If not set, defaults to using&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ExponentialBackoff::calculateDelay()}.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$calcDelayFunction&lt;/b&gt;;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $calcDelayFunction;;p;;x">
</treenode>
<treenode node="setDelayFunction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ExponentialBackoff.php;f11;105;5;108;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setDelayFunction(callable $delayFunction)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    If not set, defaults to using `usleep`.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$delayFunction&lt;/b&gt;;;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $delayFunction;;p;;x">
</treenode>
</treenode>
<treenode node="Expression;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f0;10;1;164;;;;vpos;;v;;aAbstraction;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Expression extends Abstraction&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Description;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;28;5;34;;;;vpos;;v;;a;;r;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;ltoken;;poperator;;pvariables;;pforwardLookupSeparator;;p;;x;;x;;x;;x">
</treenode>
<treenode node="expand;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;73;5;90;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expand(Parser $parser, array $params = array())&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |string;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;parray $params;;p;;x;;x">
</treenode>
<treenode node="getForwardLookupSeparator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;55;5;58;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getForwardLookupSeparator()&#10;;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getOperator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;39;5;42;;;;vpos;;v;;aOperator;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getOperator()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   \Abstraction;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getVariables;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;47;5;50;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getVariables()&#10;;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="match;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;101;5;147;;;;vpos;;v;;anull|array;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    match(Parser $parser, $uri, $params = array(), $strict = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Matches given URI against current node&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;&#10;    bool &lt;b&gt;$strict&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   `uri and params` or `null` if not match and $strict is true;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;pstring $uri;;parray $params;;pbool $strict;;p;;x;;x;;x;;x">
</treenode>
<treenode node="setForwardLookupSeparator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f11;63;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setForwardLookupSeparator($forwardLookupSeparator)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$forwardLookupSeparator&lt;/b&gt;;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $forwardLookupSeparator;;p;;x">
</treenode>
<treenode node="sortVariables;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Expression.php;f14;156;5;163;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sortVariables(array $vars)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sort variables before extracting data from uri.&#10;We have to sort vars by non-explode to explode.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$vars&lt;/b&gt;;;d4,157;;b2,0;;m0;;e0;;i0;;o;;k;;larray $vars;;p;;x">
</treenode>
</treenode>
<treenode node="FailedPreconditionException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\FailedPreconditionException.php;f0;23;1;26;;;;vpos;;v;;aServiceException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FailedPreconditionException extends ServiceException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a request fails due to a failed precondition.&#10;In REST context, this exception indicates a status code 412.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FallbackGroupHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FallbackGroupHandler.php;f0;15;1;59;;;;vpos;;v;;aGroupHandler;;c;;r;;d0,16;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FallbackGroupHandler.php;f11;20;5;35;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,21;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FallbackGroupHandler.php;f11;40;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
</treenode>
<treenode node="FetchAuthTokenCache;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f0;25;1;262;;;;vpos;;v;;aFetchAuthTokenInterface;;cGetQuotaProjectInterface;;cSignBlobInterface;;cProjectIdProviderInterface;;cUpdateMetadataInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FetchAuthTokenCache implements&#10;    FetchAuthTokenInterface,&#10;    GetQuotaProjectInterface,&#10;    SignBlobInterface,&#10;    ProjectIdProviderInterface,&#10;    UpdateMetadataInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A class to implement caching for any object implementing&#10;FetchAuthTokenInterface;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;54;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        FetchAuthTokenInterface $fetcher,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FetchAuthTokenInterface &lt;b&gt;$fetcher&lt;/b&gt;: A credentials fetcher&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: Configuration for the cache&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;;;d6,58;;b1,0;;m0;;e0;;i0;;o;;k;;lFetchAuthTokenInterface $fetcher;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x;;x">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;77;5;88;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Implements FetchAuthTokenInterface#fetchAuthToken.&#10;Checks the cache for a valid auth token and fetches the auth tokens&#10;from the supplied fetcher.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the response;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="fetchAuthTokenFromCache;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f12;220;5;248;;;;vpos;;v;;a;;r;;d4,221;;b3,0;;m0;;e0;;i0;;o;;k;;lauthUri;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;93;5;96;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;112;5;115;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientName(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the client name from the fetcher.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: An HTTP handler to deliver PSR7 requests.;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;101;5;104;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;161;5;171;;;;vpos;;v;;a;;r;;d4,162;;b1,0;;m0;;e0;;i0;;o;;k;;lhttpHandler;;p;;x">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;146;5;151;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getQuotaProject()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the quota project used for this API request from the credentials&#10;fetcher.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,147;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="saveAuthTokenInCache;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f12;250;5;261;;;;vpos;;v;;a;;r;;d4,251;;b3,0;;m0;;e0;;i0;;o;;k;;lauthToken;;pauthUri;;p;;x;;x">
</treenode>
<treenode node="signBlob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;128;5;138;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signBlob($stringToSign, $forceOpenSsl = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a blob using the fetcher.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the fetcher does not implement&#10;`Google\Auth\SignBlobInterface`.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$stringToSign&lt;/b&gt;: The string to sign.&#10;    bool &lt;b&gt;$forceOpenSsl&lt;/b&gt;: Require use of OpenSSL for local signing. Does not apply to signing done using external services. **Defaults to** `false`.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The resulting signature.;;d4,129;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $stringToSign;;pbool $forceOpenSsl;;p;;x;;x">
</treenode>
<treenode node="updateMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\FetchAuthTokenCache.php;f11;183;5;218;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateMetadata(&#10;        $metadata,&#10;        $authUri = null,&#10;        callable $httpHandler = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates metadata with the authorization token.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the fetcher does not implement&#10;`Google\Auth\UpdateMetadataInterface`.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: metadata hashmap&#10;    string &lt;b&gt;$authUri&lt;/b&gt;: optional auth uri&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updated metadata hashmap;;d6,187;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;pstring $authUri;;pcallable $httpHandler;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="FileCookieJar;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\FileCookieJar.php;f0;9;1;100;;;;vpos;;v;;aCookieJar;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FileCookieJar extends CookieJar&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Persists non-session cookies using a JSON formatted file;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\FileCookieJar.php;f11;30;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $cookieFile, bool $storeSessionCookies = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new FileCookieJar object&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the file cannot be found or created&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$cookieFile&lt;/b&gt;: File to store the cookie data&#10;    bool &lt;b&gt;$storeSessionCookies&lt;/b&gt;: Set to true to store session cookies in the cookie jar.;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $cookieFile;;pbool $storeSessionCookies;;p;;x;;x">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\FileCookieJar.php;f11;44;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __destruct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Saves the file when shutting down;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="load;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\FileCookieJar.php;f11;81;5;99;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    load(string $filename): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load cookies from a JSON formatted file.&#10;Old cookies are kept unless overwritten by newly loaded ones.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the file cannot be loaded.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;: Cookie file to load.;;d4,82;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $filename;;p;;x">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\FileCookieJar.php;f11;56;5;70;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    save(string $filename): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Saves the cookies to a file.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the file cannot be found or created&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;: File to save;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $filename;;p;;x">
</treenode>
</treenode>
<treenode node="FileListFilterIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\FileListFilterIterator.php;f0;25;1;103;;;;vpos;;v;;aFilterIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FileListFilterIterator extends \FilterIterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Filter to create a list of only required files&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\FileListFilterIterator.php;f11;41;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $projectRootPath,&#10;        \Iterator $iterator,&#10;        array $fileTypes,&#10;        array $testPaths,&#10;        array $excludes&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$projectRootPath&lt;/b&gt;: The path to the root of the project.&#10;    \Iterator &lt;b&gt;$iterator&lt;/b&gt;: The iterator to find files.&#10;    array &lt;b&gt;$fileTypes&lt;/b&gt;: A list of file types to include&#10;    array &lt;b&gt;$testPaths&lt;/b&gt;: A list of known patterns for test files.&#10;    array &lt;b&gt;$excludes&lt;/b&gt;: A list of patterns to exclude from the result.;;d6,47;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $projectRootPath;;p\Iterator $iterator;;parray $fileTypes;;parray $testPaths;;parray $excludes;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="accept;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\FileListFilterIterator.php;f11;64;5;102;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    accept()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decides whether to include the file or exclude it.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="FilterHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f0;25;1;188;;;;vpos;;v;;aHandler;;cProcessableHandlerInterface;;cResettableInterface;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FilterHandler extends Handler implements ProcessableHandlerInterface, ResettableInterface, FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Simple handler wrapper that filters records based on a list of levels&#10;It can be configured with an exact list of levels to allow, or a min/max level.&#10;&lt;b&gt;author&lt;/b&gt;: Hennadiy Verkh&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;58;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($handler, $minLevelOrList = Logger::DEBUG, $maxLevel = Logger::EMERGENCY, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param HandlerInterface|callable(?array, HandlerInterface): HandlerInterface $handler&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable|HandlerInterface &lt;b&gt;$handler&lt;/b&gt;: Handler or factory callable($record|null, $filterHandler).&#10;    int|array &lt;b&gt;$minLevelOrList&lt;/b&gt;: A list of levels to accept or a minimum level if maxLevel is provided&#10;    int|string &lt;b&gt;$maxLevel&lt;/b&gt;: Maximum level to accept, only used if $minLevelOrList is not an array&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable|HandlerInterface $handler;;pint|array $minLevelOrList;;pint|string $maxLevel;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getAcceptedLevels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;69;5;72;;;;vpos;;v;;a array;;r;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;174;5;182;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,175;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;144;5;154;;;;vpos;;v;;aHandlerInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandler(array $record = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the nested handler&#10;If the handler was provided as a factory callable, this will trigger the handler&apos;s instantiation.;;d4,145;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;105;5;118;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;123;5;135;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;97;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,98;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;184;5;187;;;;vpos;;v;;a;;r;;d4,185;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setAcceptedLevels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;78;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setAcceptedLevels($minLevelOrList = Logger::DEBUG, $maxLevel = Logger::EMERGENCY): self&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string|array &lt;b&gt;$minLevelOrList&lt;/b&gt;: A list of levels to accept or a minimum level or level name if maxLevel is provided&#10;    int|string &lt;b&gt;$maxLevel&lt;/b&gt;: Maximum level or level name to accept, only used if $minLevelOrList is not an array;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;lint|string|array $minLevelOrList;;pint|string $maxLevel;;p;;x;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FilterHandler.php;f11;159;5;169;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,160;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="FingersCrossedHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f0;35;1;227;;;;vpos;;v;;aHandler;;cProcessableHandlerInterface;;cResettableInterface;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FingersCrossedHandler extends Handler implements ProcessableHandlerInterface, ResettableInterface, FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Buffers all records until a certain level is reached&#10;The advantage of this approach is that you don&apos;t get any clutter in your log files.&#10;Only requests which actually trigger an error (or whatever your actionLevel is) will be&#10;in the logs, but they will contain all records, not only those above the level threshold.&#10;You can then have a passthruLevel as well which means that at the end of the request,&#10;even if it did not get activated, it will still send through log records of e.g. at least a&#10;warning level.&#10;You can find the various activation strategies in the&#10;Monolog\Handler\FingersCrossed\ namespace.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;59;5;83;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($handler, $activationStrategy = null, int $bufferSize = 0, bool $bubble = true, bool $stopBuffering = true, $passthruLevel = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param HandlerInterface|callable(?array, FingersCrossedHandler): HandlerInterface $handler&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable|HandlerInterface &lt;b&gt;$handler&lt;/b&gt;: Handler or factory callable($record|null, $fingersCrossedHandler).&#10;    int|string|ActivationStrategyInterface &lt;b&gt;$activationStrategy&lt;/b&gt;: Strategy which determines when this handler takes action, or a level name/value at which the handler is activated&#10;    int &lt;b&gt;$bufferSize&lt;/b&gt;: How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    bool &lt;b&gt;$stopBuffering&lt;/b&gt;: Whether the handler should stop buffering after being triggered (default true)&#10;    int|string &lt;b&gt;$passthruLevel&lt;/b&gt;: Minimum level to always flush to handler on close, even if strategy not triggered;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable|HandlerInterface $handler;;pint|string|ActivationStrategyInterface $activationStrategy;;pint $bufferSize;;pbool $bubble;;pbool $stopBuffering;;pint|string $passthruLevel;;p;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="activate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;96;5;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    activate(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Manually activate this logger regardless of the activation strategy;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;156;5;160;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clears the buffer without flushing any messages down to the wrapped handler.&#10;It also resets the handler to its initial buffering state.;;d4,157;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;133;5;138;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flushBuffer;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f12;165;5;179;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flushBuffer(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resets the state of the handler. Stops forwarding records to the wrapped handler.;;d4,166;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;218;5;226;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,219;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;188;5;198;;;;vpos;;v;;aHandlerInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandler(array $record = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the nested handler&#10;If the handler was provided as a factory callable, this will trigger the handler&apos;s instantiation.;;d4,189;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;109;5;128;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,110;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;88;5;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;140;5;149;;;;vpos;;v;;a;;r;;d4,141;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FingersCrossedHandler.php;f11;203;5;213;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,204;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="FirePHPHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f0;21;1;165;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FirePHPHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Simple FirePHP Handler (http://www.firephp.org/), which uses the Wildfire protocol.&#10;&lt;b&gt;author&lt;/b&gt;: Eric Clemmons (&#10;&lt;b&gt;ericclemmons&lt;/b&gt;: ) &lt;eric&#10;&lt;b&gt;uxdriven&lt;/b&gt;: .com&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="HEADER_PREFIX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f19;43;33;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Header prefix for Wildfire to recognize &amp; parse headers;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PLUGIN_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f19;38;30;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Must reference a &quot;known&quot; plugin, otherwise headers won&apos;t display in FirePHP;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PROTOCOL_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f19;28;32;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    WildFire JSON header message format;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="STRUCTURE_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f19;33;33;33;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    FirePHP structure for parsing messages &amp; their presentation;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;65;5;70;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createHeader(array $meta, string $message): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Base header creation function used by init headers &amp; record headers&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$meta&lt;/b&gt;: Wildfire Plugin, Protocol &amp; Structure Indexes&#10;    string &lt;b&gt;$message&lt;/b&gt;: Log message&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Complete header string ready for the client as key and message as value;;d4,66;;b2,0;;m0;;e0;;i0;;o;;k;;larray $meta;;pstring $message;;p;;x;;x">
</treenode>
<treenode node="createRecordHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;77;5;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createRecordHeader(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates message header from record&#10;&lt;b&gt;see&lt;/b&gt;: createHeader();;d4,78;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;90;5;93;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,91;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getInitHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;101;5;109;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInitHeaders(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wildfire initialization headers to enable message parsing&#10;&lt;b&gt;see&lt;/b&gt;: createHeader()&#10;&lt;b&gt;see&lt;/b&gt;: sendHeader();;d4,102;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="headersAccepted;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;157;5;164;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headersAccepted(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verifies if the headers are accepted by the current user agent;;d4,158;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="sendHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;114;5;119;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendHeader(string $header, string $content): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send header string to the client;;d4,115;;b2,0;;m0;;e0;;i0;;o;;k;;lheader;;pcontent;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FirePHPHandler.php;f14;128;5;152;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates &amp; sends header for a record, ensuring init headers have been sent prior&#10;&lt;b&gt;see&lt;/b&gt;: sendHeader()&#10;&lt;b&gt;see&lt;/b&gt;: sendInitHeaders()&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,129;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="Fixtures;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Fixtures.php;f0;25;1;34;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Fixtures&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class containing static functions to provide path to shared test fixtures&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="KEYFILE_STUB_FIXTURE;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Fixtures.php;f18;30;5;33;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    KEYFILE_STUB_FIXTURE()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Path the keyfile-stub.json fixture;;d4,31;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="FleepHookHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f0;25;1;115;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FleepHookHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends logs to Fleep.io using Webhook integrations&#10;You&apos;ll need a Fleep.io account to use this handler.&#10;&lt;b&gt;see&lt;/b&gt;: https://fleep.io/integrations/webhooks/ Fleep Webhooks Documentation&#10;&lt;b&gt;author&lt;/b&gt;: Ando Roots &lt;ando&#10;&lt;b&gt;sqroot&lt;/b&gt;: .eu&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FLEEP_HOOK_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f19;29;34;29;;;;vpos;;v;;a;;r&apos;/hook/&apos;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FLEEP_HOST;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f19;27;30;27;;;;vpos;;v;;a;;r&apos;fleep.io&apos;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f11;47;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $token, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Construct a new Fleep.io Handler.&#10;For instructions on how to create a new web hook in your conversations&#10;see https://fleep.io/integrations/webhooks/&#10;&lt;b&gt;throws&lt;/b&gt;: MissingExtensionException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: Webhook token&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="buildContent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f12;107;5;114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildContent(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the body of API call;;d4,108;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="buildHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f12;93;5;102;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildHeader(string $content): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the header of the API Call;;d4,94;;b3,0;;m0;;e0;;i0;;o;;k;;lcontent;;p;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f14;83;5;88;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateDataStream(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,84;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f14;66;5;69;;;;vpos;;v;;aLineFormatter;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the default formatter to use with this handler&#10;Overloaded to remove empty context and extra arrays from the end of the log message.;;d4,67;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FleepHookHandler.php;f11;74;5;78;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handles a log record;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="FlockLock;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f0;28;1;153;;;;vpos;;v;;aLockInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FlockLock implements LockInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Flock based lock implementation.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.flock.php&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FILE_PATH_TEMPLATE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f9;32;28;32;;;;vpos;;v;;a;;r&apos;%s/%s.lock&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f11;59;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($fileName, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: bool $exclusive If true, acquire an excluse (write) lock. If&#10;false, acquire a shared (read) lock. **Defaults to** true.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If an invalid fileName is provided.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$fileName&lt;/b&gt;: The name of the file to use as a lock.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $fileName;;parray $options;;p;;x;;x">
</treenode>
<treenode node="acquire;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f11;89;5;105;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    acquire(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Acquires a lock that will block until released.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to be acquired.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="initializeHandle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f12;131;5;140;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    initializeHandle()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initializes the handle.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock file fails to open.;;d4,132;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="lockType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f12;142;5;152;;;;vpos;;v;;a;;r;;d4,143;;b3,0;;m0;;e0;;i0;;o;;k;;loptions;;p;;x">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\FlockLock.php;f11;112;5;123;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    release()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Releases the lock.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to release.;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="FlowdockFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FlowdockFormatter.php;f0;18;1;106;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FlowdockFormatter implements FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    formats the record to be used in the FlowdockHandler&#10;&lt;b&gt;author&lt;/b&gt;: Dominik Liebler &lt;liebler.dominik&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FlowdockFormatter.php;f11;30;5;34;;;;vpos;;v;;a;;r;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;lsource;;psourceEmail;;p;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FlowdockFormatter.php;f11;39;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FlowdockFormatter.php;f11;73;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="getShortMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FlowdockFormatter.php;f11;84;5;105;;;;vpos;;v;;a string;;r;;d4,85;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;p;;x">
</treenode>
</treenode>
<treenode node="FlowdockHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f0;29;1;115;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FlowdockHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends notifications through the Flowdock push API&#10;This must be configured with a FlowdockFormatter instance via setFormatter()&#10;Notes:&#10;API token - Flowdock API token&#10;&lt;b&gt;author&lt;/b&gt;: Dominik Liebler &lt;liebler.dominik&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://www.flowdock.com/api/push;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f11;42;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $apiToken, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException if OpenSSL is missing&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;lapiToken;;plevel;;pbubble;;p;;x;;x;;x">
</treenode>
<treenode node="buildContent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f12;97;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildContent(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the body of API call;;d4,98;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="buildHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f12;105;5;114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildHeader(string $content): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the header of the API Call;;d4,106;;b3,0;;m0;;e0;;i0;;o;;k;;lcontent;;p;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f14;87;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateDataStream(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,88;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f14;67;5;70;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the default formatter.;;d4,68;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f11;55;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FlowdockHandler.php;f14;77;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,78;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="FluentdFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FluentdFormatter.php;f0;36;1;87;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FluentdFormatter implements FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class FluentdFormatter&#10;Serializes a log message to Fluentd unix socket protocol&#10;Fluentd config:&#10;&lt;source&gt;&#10;type unix&#10;path /var/run/td-agent/td-agent.sock&#10;&lt;/source&gt;&#10;Monolog setup:&#10;$logger = new Monolog\Logger(&apos;fluent.tag&apos;);s&#10;$fluentHandler = new Monolog\Handler\SocketHandler(&apos;unix:///var/run/td-agent/td-agent.sock&apos;);s&#10;$fluentHandler-&gt;setFormatter(new Monolog\Formatter\FluentdFormatter());s&#10;$logger-&gt;pushHandler($fluentHandler);s&#10;&lt;b&gt;author&lt;/b&gt;: Andrius Putna &lt;fordnox&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,37;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FluentdFormatter.php;f11;43;5;50;;;;vpos;;v;;a;;r;;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;llevelTag;;p;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FluentdFormatter.php;f11;57;5;76;;;;vpos;;v;;a string;;r;;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FluentdFormatter.php;f11;78;5;86;;;;vpos;;v;;a string;;r;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="isUsingLevelsInTag;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\FluentdFormatter.php;f11;52;5;55;;;;vpos;;v;;a bool;;r;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="FnStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f0;12;1;159;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FnStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Compose stream implementations based on a hash of functions.&#10;Allows for easy testing and extension of a provided stream without needing&#10;to create a concrete class for a simple extension point.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;25;5;33;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $methods)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$methods&lt;/b&gt;: Hash of method name to a callable.;;d4,26;;b1,0;;m0;;e0;;i0;;o;;k;;larray $methods;;p;;x">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;49;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __destruct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The close method is called on the underlying stream only if possible.;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;40;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __get($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lazily determine which methods are not implemented.&#10;&lt;b&gt;throws&lt;/b&gt;: \BadMethodCallException;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lname;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;85;5;88;;;;vpos;;v;;a;;r;;d4,86;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__wakeup;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;60;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __wakeup()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An unserialize would allow the __destruct to run when the unserialized value goes out of scope.&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;90;5;93;;;;vpos;;v;;a;;r;;d4,91;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="decorate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f18;74;5;83;;;;vpos;;v;;aFnStream;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    decorate(StreamInterface $stream, array $methods)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds custom functionality to an underlying stream by intercepting&#10;specific method calls.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to decorate&#10;    array &lt;b&gt;$methods&lt;/b&gt;: Hash of method name to a closure;;d4,75;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;parray $methods;;p;;x;;x">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;95;5;98;;;;vpos;;v;;a;;r;;d4,96;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;110;5;113;;;;vpos;;v;;a;;r;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;150;5;153;;;;vpos;;v;;a;;r;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;155;5;158;;;;vpos;;v;;a;;r;;d4,156;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;100;5;103;;;;vpos;;v;;a;;r;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;140;5;143;;;;vpos;;v;;a;;r;;d4,141;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;115;5;118;;;;vpos;;v;;a;;r;;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;130;5;133;;;;vpos;;v;;a;;r;;d4,131;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;145;5;148;;;;vpos;;v;;a;;r;;d4,146;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;120;5;123;;;;vpos;;v;;a;;r;;d4,121;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;125;5;128;;;;vpos;;v;;a;;r;;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;105;5;108;;;;vpos;;v;;a;;r;;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\FnStream.php;f11;135;5;138;;;;vpos;;v;;a;;r;;d4,136;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="FormattableHandlerTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerTrait.php;f0;21;1;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait FormattableHandlerTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper trait for implementing FormattableInterface&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerTrait.php;f14;55;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the default formatter.&#10;Overwrite this if the LineFormatter is not a good default for your handler.;;d4,56;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerTrait.php;f11;41;5;48;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\FormattableHandlerTrait.php;f11;31;5;36;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="FormatterTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\FormatterTrait.php;f0;22;1;46;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait FormatterTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Shared trait to enrich and format a record with&#10;App Engine Flex specific information.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="formatPayload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Logger\FormatterTrait.php;f14;24;5;45;;;;vpos;;v;;a;;r;;d4,25;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;pmessage;;p;;x;;x">
</treenode>
</treenode>
<treenode node="FulfilledPromise;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f0;10;1;83;;;;vpos;;v;;aPromiseInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class FulfilledPromise implements PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A promise that has been fulfilled.&#10;Thenning off of this promise will invoke the onFulfilled callback&#10;immediately and ignore other callbacks.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;14;5;23;;;;vpos;;v;;a;;r;;d4,15;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;79;5;82;;;;vpos;;v;;a;;r;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;62;5;65;;;;vpos;;v;;a;;r;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="otherwise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;52;5;55;;;;vpos;;v;;a;;r;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lonRejected;;p;;x">
</treenode>
<treenode node="reject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;74;5;77;;;;vpos;;v;;a;;r;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lreason;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;67;5;72;;;;vpos;;v;;a;;r;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="then;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;25;5;50;;;;vpos;;v;;a;;r;;d6,28;;b1,0;;m0;;e0;;i0;;o;;k;;lonFulfilled;;ponRejected;;p;;x;;x">
</treenode>
<treenode node="wait;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\FulfilledPromise.php;f11;57;5;60;;;;vpos;;v;;a;;r;;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;lunwrap;;pdefaultDelivery;;p;;x;;x">
</treenode>
</treenode>
<treenode node="GAEFlexMetadataProvider;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEFlexMetadataProvider.php;f0;22;1;28;;;;vpos;;v;;aGAEMetadataProvider;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GAEFlexMetadataProvider extends GAEMetadataProvider&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An MetadataProvider for GAE Flex.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getTraceValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEFlexMetadataProvider.php;f14;24;5;27;;;;vpos;;v;;a;;r;;d4,25;;b2,0;;m0;;e0;;i0;;o;;k;;lserver;;p;;x">
</treenode>
</treenode>
<treenode node="GAEMetadataProvider;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f9;22;1;111;;;;vpos;;v;;aMetadataProviderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GAEMetadataProvider implements MetadataProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    MetadataProvider for GAE.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f11;33;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $server)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$server&lt;/b&gt;: An array for holding the values. Normally just use $_SERVER.;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;larray $server;;p;;x">
</treenode>
<treenode node="getTraceValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f23;24;54;24;;;;vpos;;v;;a;;r;;d-1,-1;;b2,0;;m0;;e0;;i0;;o;;k;;lserver;;p;;x">
</treenode>
<treenode node="labels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f11;107;5;110;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    labels()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the labels. We need to evaluate $_SERVER for each request.;;d4,108;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="monitoredResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f11;71;5;74;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    monitoredResource()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an array representing MonitoredResource.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/logging/docs/reference/v2/rest/v2/MonitoredResource};;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="projectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f11;80;5;83;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    projectId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the project id.;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="serviceId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f11;89;5;92;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    serviceId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the service id.;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="versionId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEMetadataProvider.php;f11;98;5;101;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    versionId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the version id.;;d4,99;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="GAEStandardMetadataProvider;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEStandardMetadataProvider.php;f0;22;1;36;;;;vpos;;v;;aGAEMetadataProvider;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GAEStandardMetadataProvider extends GAEMetadataProvider&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    An MetadataProvider for GAE Standard.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getTraceValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\GAEStandardMetadataProvider.php;f14;24;5;35;;;;vpos;;v;;a;;r;;d4,25;;b2,0;;m0;;e0;;i0;;o;;k;;lserver;;p;;x">
</treenode>
</treenode>
<treenode node="GCECache;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GCECache.php;f0;37;1;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GCECache&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A class to implement caching for calls to GCECredentials::onGce. This class&#10;is used automatically when you pass a `Psr\Cache\CacheItemPoolInterface`&#10;cache object to `ApplicationDefaultCredentials::getCredentials`.&#10;```&#10;$sysvCache = new Google\Auth\SysvCacheItemPool();s&#10;$creds = Google\Auth\ApplicationDefaultCredentials::getCredentials(&#10;$scope,&#10;null,&#10;null,&#10;$sysvCache&#10;);s&#10;```;;d0,38;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="GCE_CACHE_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GCECache.php;f9;39;23;39;;;;vpos;;v;;a;;r&apos;google_auth_on_gce_cache&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GCECache.php;f11;57;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: Configuration for the cache&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;;;d6,60;;b1,0;;m0;;e0;;i0;;o;;k;;larray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x">
</treenode>
<treenode node="onGce;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\GCECache.php;f11;75;5;90;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onGce(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Caches the result of onGce so the metadata server is not called multiple&#10;times.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if this a GCEInstance, false otherwise;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
</treenode>
<treenode node="GCECredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f0;57;1;541;;;;vpos;;v;;aCredentialsLoader;;cSignBlobInterface;;cProjectIdProviderInterface;;cGetQuotaProjectInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GCECredentials extends CredentialsLoader implements&#10;    SignBlobInterface,&#10;    ProjectIdProviderInterface,&#10;    GetQuotaProjectInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    GCECredentials supports authorization on Google Compute Engine.&#10;It can be used to authorize requests using the AuthTokenMiddleware, but will&#10;only succeed if being run on GCE:&#10;use Google\Auth\Credentials\GCECredentials;s&#10;use Google\Auth\Middleware\AuthTokenMiddleware;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$gce = new GCECredentials();s&#10;$middleware = new AuthTokenMiddleware($gce);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_uri&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;auth&apos; =&gt; &apos;google_auth&apos;&#10;]);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s;;d0,61;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="CLIENT_ID_URI_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;87;28;87;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The metadata path of the client ID.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="COMPUTE_PING_CONNECTION_TIMEOUT_S;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;110;43;110;;;;vpos;;v;;a;;r0.5;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FLAVOR_HEADER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;97;23;97;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The header whose presence indicates GCE presence.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ID_TOKEN_URI_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;82;27;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The metadata path of the default id token.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="MAX_COMPUTE_PING_TRIES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;109;32;109;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Note: the explicit `timeout` and `tries` below is a workaround. The underlying&#10;issue is that resolving an unknown host on some networks will take&#10;20-30 seconds;s making this timeout short fixes the issue, but&#10;could lead to false negatives in the event that we are on GCE, but&#10;the metadata resolution was particularly slow. The latter case is&#10;&quot;unlikely&quot; since the expected 4-nines time is about 0.5 seconds.&#10;This allows us to limit the total ping maximum timeout to 1.5 seconds&#10;for developer desktop scenarios.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="METADATA_IP;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;72;21;72;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The metadata IP address on appengine instances.&#10;The IP is used instead of the domain &apos;metadata&apos; to avoid slow responses&#10;when not on Compute Engine.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PROJECT_ID_URI_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;92;29;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The metadata path of the project ID.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TOKEN_URI_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;77;24;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The metadata path of the default token.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="cacheKey;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f9;63;18;63;;;;vpos;;v;;a;;r&apos;GOOGLE_AUTH_PHP_GCE&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;176;5;209;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        Iam $iam = null,&#10;        $scope = null,&#10;        $targetAudience = null,&#10;        $quotaProject = null,&#10;        $serviceAccountIdentity = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Iam &lt;b&gt;$iam&lt;/b&gt;: [optional] An IAM instance.&#10;    string|array &lt;b&gt;$scope&lt;/b&gt;: [optional] the scope of the access request, expressed either as an array or as a space-delimited string.&#10;    string &lt;b&gt;$targetAudience&lt;/b&gt;: [optional] The audience for the ID token.&#10;    string &lt;b&gt;$quotaProject&lt;/b&gt;: [optional] Specifies a project to bill for access charges associated with the request.&#10;    string &lt;b&gt;$serviceAccountIdentity&lt;/b&gt;: [optional] Specify a service account identity name to use instead of &quot;default&quot;.;;d6,182;;b1,0;;m0;;e0;;i0;;o;;k;;lIam $iam;;pstring|array $scope;;pstring $targetAudience;;pstring $quotaProject;;pstring $serviceAccountIdentity;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;364;5;393;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Implements FetchAuthTokenInterface#fetchAuthToken.&#10;Fetches the auth tokens from the GCE metadata host if it is available.&#10;If $httpHandler is not specified a the default HttpHandler is used.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A set of auth related metadata, based on the token type. Access tokens have the following keys: - access_token (string) - expires_in (int) - token_type (string) ID tokens have the following keys: - id_token (string);;d4,365;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;398;5;401;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,399;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;426;5;450;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientName(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the client name from GCE metadata.&#10;Subsequent calls will return a cached value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request;;d4,427;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getClientNameUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f18;240;5;254;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientNameUri($serviceAccountIdentity = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The full uri for accessing the default service account.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$serviceAccountIdentity&lt;/b&gt;: [optional] Specify a service account identity name to use instead of &quot;default&quot;.;;d4,241;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $serviceAccountIdentity;;p;;x">
</treenode>
<treenode node="getFromMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f12;519;5;530;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFromMetadata(callable $httpHandler, $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch the value of a GCE metadata server URI.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: An HTTP Handler to deliver PSR7 requests.&#10;    string &lt;b&gt;$uri&lt;/b&gt;: The metadata URI.;;d4,520;;b3,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;pstring $uri;;p;;x;;x">
</treenode>
<treenode node="getIdTokenUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f19;263;5;277;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIdTokenUri($serviceAccountIdentity = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The full uri for accesesing the default identity token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$serviceAccountIdentity&lt;/b&gt;: [optional] Specify a service account identity name to use instead of &quot;default&quot;.;;d4,264;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $serviceAccountIdentity;;p;;x">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;406;5;416;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,407;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;490;5;510;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectId(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch the default Project ID from compute engine.&#10;Returns null if called outside GCE.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,491;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getProjectIdUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f19;284;5;289;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectIdUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The full uri for accessing the default project ID.;;d4,285;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;537;5;540;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getQuotaProject()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the quota project used for this API request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,538;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTokenUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f18;218;5;231;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getTokenUri($serviceAccountIdentity = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The full uri for accessing the default token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$serviceAccountIdentity&lt;/b&gt;: [optional] Specify a service account identity name to use instead of &quot;default&quot;.;;d4,219;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $serviceAccountIdentity;;p;;x">
</treenode>
<treenode node="onAppEngineFlexible;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f18;297;5;300;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onAppEngineFlexible()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if this an App Engine Flexible instance, by accessing the&#10;GAE_INSTANCE environment variable.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true if this an App Engine Flexible Instance, false otherwise;;d4,298;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="onGce;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f18;310;5;343;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onGce(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if this a GCE instance, by accessing the expected metadata&#10;host.&#10;If $httpHandler is not specified a the default HttpHandler is used.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if this a GCEInstance, false otherwise;;d4,311;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="signBlob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\GCECredentials.php;f11;464;5;480;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signBlob($stringToSign, $forceOpenSsl = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using the default service account private key.&#10;This implementation uses IAM&apos;s signBlob API.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/signBlob SignBlob&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$stringToSign&lt;/b&gt;: The string to sign.&#10;    bool &lt;b&gt;$forceOpenSsl&lt;/b&gt;: [optional] Does not apply to this credentials type.;;d4,465;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $stringToSign;;pbool $forceOpenSsl;;p;;x;;x">
</treenode>
</treenode>
<treenode node="GcTestListener;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\GcTestListener.php;f0;17;1;23;;;;vpos;;v;;aPHPUnit_Framework_BaseTestListener;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GcTestListener extends PHPUnit_Framework_BaseTestListener&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2019 Google LLC&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,18;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="endTestSuite;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\GcTestListener.php;f11;19;5;22;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m0;;e0;;i0;;o;;k;;lsuite;;p;;x">
</treenode>
</treenode>
<treenode node="GelfHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GelfHandler.php;f0;24;1;58;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GelfHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler to send messages to a Graylog2 (http://www.graylog2.org) server&#10;&lt;b&gt;author&lt;/b&gt;: Matt Lehner &lt;mlehner&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Benjamin Zikarsky &lt;benjamin&#10;&lt;b&gt;zikarsky&lt;/b&gt;: .de&gt;;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GelfHandler.php;f11;36;5;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(PublisherInterface $publisher, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    PublisherInterface &lt;b&gt;$publisher&lt;/b&gt;: a publisher object&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lPublisherInterface $publisher;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GelfHandler.php;f14;54;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,55;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GelfHandler.php;f14;46;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,47;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="GelfMessageFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\GelfMessageFormatter.php;f0;23;1;146;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GelfMessageFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Serializes a log message to GELF&#10;&lt;b&gt;see&lt;/b&gt;: http://docs.graylog.org/en/latest/pages/gelf.html&#10;&lt;b&gt;author&lt;/b&gt;: Matt Lehner &lt;mlehner&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_MAX_LENGTH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\GelfMessageFormatter.php;f19;25;38;25;;;;vpos;;v;;a;;r32766;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\GelfMessageFormatter.php;f11;61;5;70;;;;vpos;;v;;a;;r;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;lsystemName;;pextraPrefix;;pcontextPrefix;;pmaxLength;;p;;x;;x;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\GelfMessageFormatter.php;f11;75;5;145;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): Message&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="GeoPoint;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f0;35;1;206;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GeoPoint&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a geographical point.&#10;Unless specified otherwise, this must conform to the&#10;[WGS84](http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf) standard.&#10;Values must be within normalized ranges.&#10;Example:&#10;```&#10;use Google\Cloud\Core\GeoPoint;s&#10;$point = new GeoPoint(37.423147, -122.085015);s&#10;```;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f11;65;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($latitude, $longitude, $allowNull = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a GeoPoint.&#10;Ints will be converted to floats. Values not passing the `is_numeric()`&#10;check will result in an exception.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    float|int|null &lt;b&gt;$latitude&lt;/b&gt;: The GeoPoint Latitude. **Note** that `null` is not a generally valid value, and will throw an `InvalidArgumentException` unless `$allowNull` is set to `true`.&#10;    float|int|null &lt;b&gt;$longitude&lt;/b&gt;: The GeoPoint Longitude. **Note** that `null` is not a generally valid value, and will throw an `InvalidArgumentException` unless `$allowNull` is set to `true`.&#10;    bool &lt;b&gt;$allowNull&lt;/b&gt;: [optional] If true, null values will be allowed in the constructor only. This switch exists to handle a rare case wherein a geopoint may be empty and is not intended for use from outside the client. **Defaults to** `false`.;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;lfloat|int|null $latitude;;pfloat|int|null $longitude;;pbool $allowNull;;p;;x;;x;;x">
</treenode>
<treenode node="checkContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f12;171;5;179;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    checkContext($method, array $args)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Let people know if they accidentally use the getter in setter context.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: the method name&#10;    array &lt;b&gt;$args&lt;/b&gt;: The method arguments;;d4,172;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $method;;parray $args;;p;;x;;x">
</treenode>
<treenode node="latitude;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f11;81;5;85;;;;vpos;;v;;afloat;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    latitude()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the latitude&#10;Example:&#10;```&#10;$latitude = $point-&gt;latitude();s&#10;```&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,82;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="longitude;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f11;118;5;122;;;;vpos;;v;;afloat;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    longitude()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the longitude&#10;Example:&#10;```&#10;$longitude = $point-&gt;longitude();s&#10;```&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="point;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f11;155;5;161;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    point()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a GeoPoint&#10;Example:&#10;```&#10;$point = $point-&gt;point();s&#10;```&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [LatLng](https://cloud.google.com/datastore/reference/rest/Shared.Types/LatLng);;d4,156;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setLatitude;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f11;101;5;106;;;;vpos;;v;;aGeoPoint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLatitude($latitude)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the latitude&#10;Non-numeric values will result in an exception&#10;Example:&#10;```&#10;$point-&gt;setLatitude(42.279594);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|float &lt;b&gt;$latitude&lt;/b&gt;: The new latitude;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;lint|float $latitude;;p;;x">
</treenode>
<treenode node="setLongitude;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f11;138;5;143;;;;vpos;;v;;aGeoPoint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLongitude($longitude)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the longitude&#10;Non-numeric values will result in an exception.&#10;Example:&#10;```&#10;$point-&gt;setLongitude(-83.732124);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    float|int &lt;b&gt;$longitude&lt;/b&gt;: The new longitude value;;d4,139;;b1,0;;m0;;e0;;i0;;o;;k;;lfloat|int $longitude;;p;;x">
</treenode>
<treenode node="validateValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GeoPoint.php;f12;193;5;205;;;;vpos;;v;;afloat;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    validateValue($value, $type, $allowNull = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check a given value&apos;s validity as a coordinate.&#10;Numeric values will be cast to type `float`. All other values will raise&#10;an exception with the exception of `null`, if `$allowNull` is set to true.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The coordinate value.&#10;    string &lt;b&gt;$type&lt;/b&gt;: The coordinate type for error reporting.&#10;    bool &lt;b&gt;$allowNull&lt;/b&gt;: [optional] Whether null values should be allowed. **Defaults to** `false`.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,194;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;pstring $type;;pbool $allowNull;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="GitProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\GitProcessor.php;f0;21;1;62;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GitProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects Git branch and Git commit SHA in all records&#10;&lt;b&gt;author&lt;/b&gt;: Nick Otter&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\GitProcessor.php;f11;29;5;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this Processor will be triggered;;d4,30;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\GitProcessor.php;f11;34;5;44;;;;vpos;;v;;a array;;r;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getGitInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\GitProcessor.php;f19;46;5;61;;;;vpos;;v;;a array;;r;;d4,47;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Google;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f6;28;1;66;;;;vpos;;v;;aCRCInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Google implements CRCInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A CRC32 implementation using hardware acceleration.&#10;This uses the C++ https://github.com/google/crc32c library, thus depends on&#10;the `crc32c` PHP extension.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f11;35;5;42;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f11;54;5;60;;;;vpos;;v;;a;;r;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;lraw_output;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f11;44;5;47;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="supports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f18;30;5;33;;;;vpos;;v;;a;;r;;d4,31;;b1,5;;m0;;e0;;i0;;o;;k;;lalgo;;p;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f11;49;5;52;;;;vpos;;v;;a;;r;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="version;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Google.php;f11;62;5;65;;;;vpos;;v;;a;;r;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="GoogleException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\GoogleException.php;f0;24;1;27;;;;vpos;;v;;aException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GoogleException extends Exception&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a request fails.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="GoogleTest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\GoogleTest.php;f6;24;1;55;;;;vpos;;v;;aTestCase;;c;;r;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="supports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\GoogleTest.php;f11;47;5;54;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testSupports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\GoogleTest.php;f11;42;5;45;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testSupports($algo, $expected)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: supports;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;lalgo;;pexpected;;p;;x;;x">
</treenode>
<treenode node="testUnsupported;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\tests\GoogleTest.php;f11;26;5;37;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="GroupHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f0;21;1;126;;;;vpos;;v;;aHandler;;cProcessableHandlerInterface;;cResettableInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GroupHandler extends Handler implements ProcessableHandlerInterface, ResettableInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Forwards records to multiple handlers&#10;&lt;b&gt;author&lt;/b&gt;: Lenar Lõhmus &lt;lenar&#10;&lt;b&gt;city&lt;/b&gt;: .ee&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;33;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $handlers, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    HandlerInterface[] &lt;b&gt;$handlers&lt;/b&gt;: Array of Handlers.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;lHandlerInterface[] $handlers;;pbool $bubble;;p;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;104;5;111;;;;vpos;;v;;a void;;r;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;62;5;73;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;78;5;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;48;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;93;5;102;;;;vpos;;v;;a;;r;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\GroupHandler.php;f11;116;5;125;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="GrpcRequestWrapper;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcRequestWrapper.php;f0;34;1;258;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GrpcRequestWrapper&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The GrpcRequestWrapper is responsible for delivering gRPC requests.;;d0,35;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcRequestWrapper.php;f11;86;5;99;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\RequestWrapperTrait::setCommonDefaults()} for&#10;the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: callable $authHttpHandler A handler used to deliver Psr7&#10;requests specifically for authentication.&#10;&lt;b&gt;type&lt;/b&gt;: Serializer $serializer A serializer used to encode responses.&#10;&lt;b&gt;type&lt;/b&gt;: array $grpcOptions gRPC specific configuration options passed&#10;off to the ApiCore library.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. Please see {;;d4,87;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="convertToGoogleException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcRequestWrapper.php;f12;203;5;257;;;;vpos;;v;;aException;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    convertToGoogleException($ex)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a ApiCore exception to a Google Exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Exception &lt;b&gt;$ex&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   \ServiceException;;d4,204;;b3,0;;m0;;e0;;i0;;o;;k;;l\Exception $ex;;p;;x">
</treenode>
<treenode node="handleResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcRequestWrapper.php;f12;158;5;177;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleResponse($response)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Serializes a gRPC response.&#10;\Generator|OperationResponse|array|null&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$response&lt;/b&gt;;;d4,159;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $response;;p;;x">
</treenode>
<treenode node="handleStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcRequestWrapper.php;f12;185;5;195;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleStream($response)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handles a streaming response.&#10;\Generator|array|null&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ServerStream &lt;b&gt;$response&lt;/b&gt;;;d4,186;;b3,0;;m0;;e0;;i0;;o;;k;;lServerStream $response;;p;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcRequestWrapper.php;f11;117;5;150;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(callable $request, array $args, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Deliver the request.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `60`.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: array $grpcOptions gRPC specific configuration options.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$request&lt;/b&gt;: The request to execute.&#10;    array &lt;b&gt;$args&lt;/b&gt;: The arguments for the request.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Request options.;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $request;;parray $args;;parray $options;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="GrpcTestTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\GrpcTestTrait.php;f0;25;1;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait GrpcTestTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides checks for whether to run gRPC tests&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="checkAndSkipGrpcTests;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\GrpcTestTrait.php;f11;33;5;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    checkAndSkipGrpcTests()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks for the grpc extension, and if it is missing, marked the test as skipped&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="shouldSkipGrpcTests;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\GrpcTestTrait.php;f11;49;5;52;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    shouldSkipGrpcTests()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   True if grpc tests should be skipped, otherwise false;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="GrpcTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f0;29;1;313;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait GrpcTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides shared functionality for gRPC service implementations.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="constructGapic;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f14;309;5;312;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    constructGapic($gapicName, array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Construct a gapic client. Allows for tests to intercept.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$gapicName&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,310;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $gapicName;;parray $config;;p;;x;;x">
</treenode>
<treenode node="flattenListValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;188;5;191;;;;vpos;;v;;a;;r;;d4,189;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="flattenStruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;170;5;173;;;;vpos;;v;;a;;r;;d4,171;;b3,0;;m0;;e0;;i0;;o;;k;;lstruct;;p;;x">
</treenode>
<treenode node="flattenValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;175;5;186;;;;vpos;;v;;a;;r;;d4,176;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="formatDurationForApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;279;5;300;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatDurationForApi($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a duration for the API.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|Duration &lt;b&gt;$value&lt;/b&gt;;;d4,280;;b3,0;;m0;;e0;;i0;;o;;k;;lstring|Duration $value;;p;;x">
</treenode>
<treenode node="formatListForApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;199;5;208;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatListForApi(array $list)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a list for the API.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$list&lt;/b&gt;;;d4,200;;b3,0;;m0;;e0;;i0;;o;;k;;larray $list;;p;;x">
</treenode>
<treenode node="formatStructForApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;128;5;137;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatStructForApi(array $fields)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a struct for the API.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$fields&lt;/b&gt;;;d4,129;;b3,0;;m0;;e0;;i0;;o;;k;;larray $fields;;p;;x">
</treenode>
<treenode node="formatTimestampForApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;263;5;271;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatTimestampForApi($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a timestamp for the API with nanosecond precision.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$value&lt;/b&gt;;;d4,264;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $value;;p;;x">
</treenode>
<treenode node="formatTimestampFromApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;245;5;255;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatTimestampFromApi(array $timestamp)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a gRPC timestamp to match the format returned by the REST API.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$timestamp&lt;/b&gt;;;d4,246;;b3,0;;m0;;e0;;i0;;o;;k;;larray $timestamp;;p;;x">
</treenode>
<treenode node="formatValueForApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;216;5;237;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatValueForApi($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a value for the API.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$value&lt;/b&gt;;;d4,217;;b3,0;;m0;;e0;;i0;;o;;k;;larray $value;;p;;x">
</treenode>
<treenode node="getGaxConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;95;5;120;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getGaxConfig($version, callable $authHttpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the default configuration for generated clients.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$version&lt;/b&gt;&#10;    callable|null &lt;b&gt;$authHttpHandler&lt;/b&gt;;;d4,96;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $version;;pcallable|null $authHttpHandler;;p;;x;;x">
</treenode>
<treenode node="requestWrapper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f11;56;5;59;;;;vpos;;v;;aGrpcRequestWrapper;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    requestWrapper()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the GrpcRequestWrapper.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f11;69;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(callable $request, array $args, $whitelisted = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delivers a request.&#10;\Generator|array&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$request&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;&#10;    bool &lt;b&gt;$whitelisted&lt;/b&gt;;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $request;;parray $args;;pbool $whitelisted;;p;;x;;x;;x">
</treenode>
<treenode node="setRequestWrapper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f11;46;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setRequestWrapper(GrpcRequestWrapper $requestWrapper)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the request wrapper.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    GrpcRequestWrapper &lt;b&gt;$requestWrapper&lt;/b&gt;;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;lGrpcRequestWrapper $requestWrapper;;p;;x">
</treenode>
<treenode node="unpackStructFromApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;139;5;146;;;;vpos;;v;;a;;r;;d4,140;;b3,0;;m0;;e0;;i0;;o;;k;;lstruct;;p;;x">
</treenode>
<treenode node="unpackValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\GrpcTrait.php;f12;148;5;168;;;;vpos;;v;;a;;r;;d4,149;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
</treenode>
<treenode node="Guzzle5HttpHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle5HttpHandler.php;f0;27;1;125;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Guzzle5HttpHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2015 Google Inc. All Rights Reserved.&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle5HttpHandler.php;f11;37;5;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ClientInterface $client)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ClientInterface &lt;b&gt;$client&lt;/b&gt;;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lClientInterface $client;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle5HttpHandler.php;f11;49;5;56;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(RequestInterface $request, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Accepts a PSR-7 Request and an array of options and returns a PSR-7 response.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="async;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle5HttpHandler.php;f11;65;5;101;;;;vpos;;v;;aPromise;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    async(RequestInterface $request, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Accepts a PSR-7 request and an array of options and returns a PromiseInterface&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="createGuzzle5Request;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle5HttpHandler.php;f12;103;5;113;;;;vpos;;v;;a;;r;;d4,104;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="createPsr7Response;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle5HttpHandler.php;f12;115;5;124;;;;vpos;;v;;a;;r;;d4,116;;b3,0;;m0;;e0;;i0;;o;;k;;lresponse;;p;;x">
</treenode>
</treenode>
<treenode node="Guzzle6HttpHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle6HttpHandler.php;f0;22;1;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Guzzle6HttpHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2015 Google Inc. All Rights Reserved.&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle6HttpHandler.php;f11;32;5;35;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ClientInterface $client)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ClientInterface &lt;b&gt;$client&lt;/b&gt;;;d4,33;;b1,0;;m0;;e0;;i0;;o;;k;;lClientInterface $client;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle6HttpHandler.php;f11;44;5;47;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(RequestInterface $request, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Accepts a PSR-7 request and an array of options and returns a PSR-7 response.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="async;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle6HttpHandler.php;f11;57;5;60;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    async(RequestInterface $request, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Accepts a PSR-7 request and an array of options and returns a PromiseInterface&#10;\GuzzleHttp\Promise\PromiseInterface&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="Guzzle7HttpHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\Guzzle7HttpHandler.php;f0;18;1;20;;;;vpos;;v;;aGuzzle6HttpHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Guzzle7HttpHandler extends Guzzle6HttpHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2020 Google LLC&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="HandleFailureTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\HandleFailureTrait.php;f0;27;1;97;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait HandleFailureTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A utility trait for handling failed items.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getFailedFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\HandleFailureTrait.php;f12;92;5;96;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFailedFiles()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get all the filenames for the failure files.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Filenames for all the failure files.;;d4,93;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleFailure;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\HandleFailureTrait.php;f11;76;5;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleFailure($idNum, array $items)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Save the items to the failureFile. We silently abandon the items upon&#10;failures in this method because there&apos;s nothing we can do.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id for the job.&#10;    array &lt;b&gt;$items&lt;/b&gt;: Items to save.;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;parray $items;;p;;x;;x">
</treenode>
<treenode node="initFailureFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\HandleFailureTrait.php;f12;42;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    initFailureFile()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine the failureFile.;;d4,43;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Handler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Handler.php;f9;18;1;52;;;;vpos;;v;;aHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Handler implements HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Base Handler class providing basic close() support as well as handleBatch&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Handler.php;f11;37;5;44;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__sleep;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Handler.php;f11;46;5;51;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Handler.php;f11;33;5;35;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Handler.php;f11;23;5;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,24;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
</treenode>
<treenode node="HandlerStack;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f0;14;1;270;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HandlerStack&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a composed Guzzle handler function by stacking middlewares on top of&#10;an HTTP handler function.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,15;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;60;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(callable $handler = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    null|callable(RequestInterface,: array): PromiseInterface $handler Underlying HTTP handler.;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;lnull|callable(RequestInterface,;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;70;5;75;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(RequestInterface $request, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Invokes the handler stack as a composed handler&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |PromiseInterface;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;82;5;105;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __toString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Dumps a string representation of the stack.;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="after;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;170;5;173;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    after(string $findName, callable $middleware, string $withName = &apos;&apos;): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a middleware after another middleware by name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$findName&lt;/b&gt;: Middleware to find&#10;    callable(callable):: callable $middleware Middleware function&#10;    string &lt;b&gt;$withName&lt;/b&gt;: Name to register for this middleware.;;d4,171;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $findName;;pcallable(callable):;;pstring $withName;;p;;x;;x;;x">
</treenode>
<treenode node="before;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;158;5;161;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    before(string $findName, callable $middleware, string $withName = &apos;&apos;): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a middleware before another middleware by name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$findName&lt;/b&gt;: Middleware to find&#10;    callable(callable):: callable $middleware Middleware function&#10;    string &lt;b&gt;$withName&lt;/b&gt;: Name to register for this middleware.;;d4,159;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $findName;;pcallable(callable):;;pstring $withName;;p;;x;;x;;x">
</treenode>
<treenode node="create;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f18;46;5;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    create(?callable $handler = null): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a default handler stack that can be used by clients.&#10;The returned handler will wrap the provided handler or use the most&#10;appropriate default handler for your system. The returned HandlerStack has&#10;support for cookies, redirects, HTTP error exceptions, and preparing a body&#10;before sending.&#10;The returned handler stack can be passed to a client in the &quot;handler&quot;&#10;option.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    null|callable(RequestInterface,: array): PromiseInterface $handler HTTP handler function to use with the stack. If no handler is provided, the best handler for your system will be utilized.;;d4,47;;b1,5;;m0;;e0;;i0;;o;;k;;lnull|callable(RequestInterface,;;p;;x">
</treenode>
<treenode node="debugCallable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f12;255;5;269;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    debugCallable($fn): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a debug string for a given callable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$fn&lt;/b&gt;: Function to write as a string.;;d4,256;;b3,0;;m0;;e0;;i0;;o;;k;;lcallable $fn;;p;;x">
</treenode>
<treenode node="findByName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f12;215;5;224;;;;vpos;;v;;a int;;r;;d4,216;;b3,0;;m0;;e0;;i0;;o;;k;;lname;;p;;x">
</treenode>
<treenode node="hasHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;122;5;125;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasHandler(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if the builder has a handler.;;d4,123;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="push;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;145;5;149;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    push(callable $middleware, string $name = &apos;&apos;): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Push a middleware to the top of the stack.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(callable):: callable $middleware Middleware function&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name to register for this middleware.;;d4,146;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable(callable):;;pstring $name;;p;;x;;x">
</treenode>
<treenode node="remove;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;180;5;190;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    remove($remove): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Remove a middleware by instance or name from the stack.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable|string &lt;b&gt;$remove&lt;/b&gt;: Middleware to remove by instance or name.;;d4,181;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable|string $remove;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;197;5;213;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resolve(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Compose the middleware and handler into a single callable function.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (RequestInterface, array): PromiseInterface;;d4,198;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;113;5;117;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setHandler(callable $handler): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the HTTP handler that actually returns a promise.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(RequestInterface,: array): PromiseInterface $handler Accepts a request and array of options and returns a Promise.;;d4,114;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable(RequestInterface,;;p;;x">
</treenode>
<treenode node="splice;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f12;229;5;248;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    splice(string $findName, string $withName, callable $middleware, bool $before): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Splices a function into the middleware list at a specific position.;;d4,230;;b3,0;;m0;;e0;;i0;;o;;k;;lfindName;;pwithName;;pmiddleware;;pbefore;;p;;x;;x;;x;;x">
</treenode>
<treenode node="unshift;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\HandlerStack.php;f11;133;5;137;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unshift(callable $middleware, ?string $name = null): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Unshift a middleware to the bottom of the stack.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(callable):: callable $middleware Middleware function&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name to register for this middleware.;;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable(callable):;;pstring $name;;p;;x;;x">
</treenode>
</treenode>
<treenode node="HandlerWrapper;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f0;33;1;135;;;;vpos;;v;;aHandlerInterface;;cProcessableHandlerInterface;;cFormattableHandlerInterface;;cResettableInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HandlerWrapper implements HandlerInterface, ProcessableHandlerInterface, FormattableHandlerInterface, ResettableInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This simple wrapper class can be used to extend handlers functionality.&#10;Example: A custom filtering that can be applied to any handler.&#10;Inherit from this class and override handle() like this:&#10;public function handle(array $record)&#10;{&#10;if ($record meets certain conditions) {&#10;return false;s&#10;}&#10;return $this-&gt;handler-&gt;handle($record);s&#10;}&#10;&lt;b&gt;author&lt;/b&gt;: Alexey Karapetov &lt;alexey&#10;&lt;b&gt;karapetov&lt;/b&gt;: .com&gt;;;d0,34;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;40;5;43;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lhandler;;p;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;72;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,73;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;120;5;127;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,121;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;56;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;64;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;48;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="popProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;94;5;101;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    popProcessor(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,95;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="pushProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;80;5;89;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pushProcessor(callable $callback): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;lcallback;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;129;5;134;;;;vpos;;v;;a;;r;;d4,130;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\HandlerWrapper.php;f11;106;5;115;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,107;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="Header;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Header.php;f6;4;1;70;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="normalize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Header.php;f18;49;5;69;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize($header)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts an array of header values that may contain comma separated&#10;headers into an array of headers with no comma separated values.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$header&lt;/b&gt;: Header to normalize.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the normalized header field values.;;d4,50;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|array $header;;p;;x">
</treenode>
<treenode node="parse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Header.php;f18;16;5;39;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse($header)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse an array of header values containing &quot;;s&quot; separated data into an&#10;array of associative arrays representing the header key value pair data&#10;of the header. When a parameter does not contain a value, but just&#10;contains a key, this function will inject a key with a &apos;&apos; string value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$header&lt;/b&gt;: Header to parse into components.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the parsed header values.;;d4,17;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|array $header;;p;;x">
</treenode>
</treenode>
<treenode node="HmacKey;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f0;32;1;195;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HmacKey&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a Service Account HMAC key.&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$hmacKey = $storage-&gt;hmacKey($accessId);s&#10;```;;d0,33;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f11;60;5;70;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        ConnectionInterface $connection,&#10;        $projectId,&#10;        $accessId,&#10;        array $info = []&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: A connection to Cloud Storage.&#10;    string &lt;b&gt;$projectId&lt;/b&gt;: The current project ID.&#10;    string &lt;b&gt;$accessId&lt;/b&gt;: The key identifier.&#10;    array|null &lt;b&gt;$info&lt;/b&gt;: The key metadata.;;d6,65;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pstring $projectId;;pstring $accessId;;parray|null $info;;p;;x;;x;;x;;x">
</treenode>
<treenode node="accessId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f11;82;5;85;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    accessId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the HMAC Key Access ID.&#10;Example:&#10;```&#10;$accessId = $hmacKey-&gt;accessId();s&#10;```;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f11;188;5;194;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delete the HMAC Key.&#10;Key state must be set to `INACTIVE` prior to deletion. See&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\HmacKey::update()} for details.&#10;Example:&#10;```&#10;$hmacKey-&gt;delete();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request. **NOTE**: This option is&#10;currently ignored by Cloud Storage.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options;;d4,189;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f11;134;5;137;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the HMAC Key Metadata.&#10;If the metadata is not already available, it will be requested from Cloud&#10;Storage.&#10;Example:&#10;```&#10;$keyMetadata = $hmacKey-&gt;info();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request. **NOTE**: This option is&#10;currently ignored by Cloud Storage.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options;;d4,135;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f11;104;5;112;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch the key metadata from Cloud Storage.&#10;Example:&#10;```&#10;$keyMetadata = $hmacKey-&gt;reload();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request. **NOTE**: This option is&#10;currently ignored by Cloud Storage.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\HmacKey.php;f11;157;5;166;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    update($state, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Update the HMAC Key state.&#10;Example:&#10;```&#10;$hmacKey-&gt;update(&apos;INACTIVE&apos;);s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request. **NOTE**: This option is&#10;currently ignored by Cloud Storage.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$state&lt;/b&gt;: The key state. Either `ACTIVE` or `INACTIVE`.&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options;;d4,158;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $state;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="HostnameProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\HostnameProcessor.php;f0;16;1;31;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HostnameProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects value of gethostname in all records;;d0,17;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\HostnameProcessor.php;f11;20;5;23;;;;vpos;;v;;a;;r;;d4,21;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\HostnameProcessor.php;f11;25;5;30;;;;vpos;;v;;a array;;r;;d4,26;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="HtmlFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f0;23;1;138;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HtmlFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats incoming records into an HTML table&#10;This is especially useful for html email logging&#10;&lt;b&gt;author&lt;/b&gt;: Tiago Brito &lt;tlfbrito&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f11;42;5;45;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(?string $dateFormat = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$dateFormat&lt;/b&gt;: The format of the timestamp: one supported by DateTime::format;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $dateFormat;;p;;x">
</treenode>
<treenode node="addRow;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f14;54;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addRow(string $th, string $td = &apos; &apos;, bool $escapeTd = true): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates an HTML table row&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$th&lt;/b&gt;: Row header content&#10;    string &lt;b&gt;$td&lt;/b&gt;: Row standard cell content&#10;    bool &lt;b&gt;$escapeTd&lt;/b&gt;: false if td content must not be html escaped;;d4,55;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $th;;pstring $td;;pbool $escapeTd;;p;;x;;x;;x">
</treenode>
<treenode node="addTitle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f14;71;5;76;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addTitle(string $title, int $level): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a HTML h1 tag&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$title&lt;/b&gt;: Text to be in the h1&#10;    int &lt;b&gt;$level&lt;/b&gt;: Error level;;d4,72;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $title;;pint $level;;p;;x;;x">
</treenode>
<treenode node="convertToString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f14;128;5;137;;;;vpos;;v;;a string;;r;;d4,129;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f11;84;5;110;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a log record.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: A record to format&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The formatted record;;d4,85;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\HtmlFormatter.php;f11;118;5;126;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a set of log records.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$records&lt;/b&gt;: A set of records to format&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The formatted set of records;;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;larray $records;;p;;x">
</treenode>
</treenode>
<treenode node="HttpClientCache;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\HttpClientCache.php;f0;24;1;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HttpClientCache&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores an HTTP Client in order to prevent multiple instantiations.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getHttpClient;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\HttpClientCache.php;f18;49;5;52;;;;vpos;;v;;aClientInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHttpClient()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the stored HTTP Client, or null.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,50;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setHttpClient;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\HttpClientCache.php;f18;39;5;42;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setHttpClient(ClientInterface $client = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cache an HTTP Client for later calls.&#10;Passing null will unset the cached client.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ClientInterface|null &lt;b&gt;$client&lt;/b&gt;;;d4,40;;b1,5;;m0;;e0;;i0;;o;;k;;lClientInterface|null $client;;p;;x">
</treenode>
</treenode>
<treenode node="HttpHandlerFactory;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\HttpHandlerFactory.php;f0;21;1;52;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HttpHandlerFactory&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2015 Google Inc. All Rights Reserved.&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="build;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\HttpHandler\HttpHandlerFactory.php;f18;30;5;51;;;;vpos;;v;;aGuzzle5HttpHandler;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    build(ClientInterface $client = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds out a default http handler for the installed version of guzzle.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ClientInterface &lt;b&gt;$client&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |Guzzle6HttpHandler|Guzzle7HttpHandler;;d4,31;;b1,5;;m0;;e0;;i0;;o;;k;;lClientInterface $client;;p;;x">
</treenode>
</treenode>
<treenode node="HttpHandlerReader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\HttpHandlerReader.php;f0;27;1;67;;;;vpos;;v;;aReaderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class HttpHandlerReader implements ReaderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read Compute Metadata using the HTTP Handler utility.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\HttpHandlerReader.php;f11;38;5;42;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(callable $httpHandler = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: [optional] An HTTP Handler capable of accepting PSR7 requests and returning PSR7 responses.;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\HttpHandlerReader.php;f11;50;5;66;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    read($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read the metadata for a given path.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The metadata path, relative to `/computeMetadata/v1/`.;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
</treenode>
<treenode node="IAMCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\IAMCredentials.php;f0;22;1;90;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class IAMCredentials&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Authenticates requests using IAM credentials.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="SELECTOR_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\IAMCredentials.php;f9;24;22;24;;;;vpos;;v;;a;;r&apos;x-goog-iam-authority-selector&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TOKEN_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\IAMCredentials.php;f9;25;19;25;;;;vpos;;v;;a;;r&apos;x-goog-iam-authorization-token&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\IAMCredentials.php;f11;41;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($selector, $token)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$selector&lt;/b&gt;: string the IAM selector&#10;     &lt;b&gt;$token&lt;/b&gt;: string the IAM token;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;l $selector;;p $token;;p;;x;;x">
</treenode>
<treenode node="getUpdateMetadataFunc;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\IAMCredentials.php;f11;63;5;66;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUpdateMetadataFunc()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    export a callback function which updates runtime metadata.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updateMetadata function;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="updateMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\IAMCredentials.php;f11;79;5;89;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateMetadata(&#10;        $metadata,&#10;        $unusedAuthUri = null,&#10;        callable $httpHandler = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates metadata with the appropriate header metadata.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: metadata hashmap&#10;    string &lt;b&gt;$unusedAuthUri&lt;/b&gt;: optional auth uri&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request Note: this param is unused here, only included here for consistency with other credentials class&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updated metadata hashmap;;d6,83;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;pstring $unusedAuthUri;;pcallable $httpHandler;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="IFTTTHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\IFTTTHandler.php;f0;27;1;69;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class IFTTTHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    IFTTTHandler uses cURL to trigger IFTTT Maker actions&#10;Register a secret key and trigger/event name at https://ifttt.com/maker&#10;value1 will be the channel from monolog&apos;s Logger constructor,&#10;value2 will be the level name (ERROR, WARNING, ..)&#10;value3 will be the log record&apos;s message&#10;&lt;b&gt;author&lt;/b&gt;: Nehal Patel &lt;nehal&#10;&lt;b&gt;nehalpatel&lt;/b&gt;: .me&gt;;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\IFTTTHandler.php;f11;38;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $eventName, string $secretKey, $level = Logger::ERROR, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$eventName&lt;/b&gt;: The name of the IFTTT Maker event that should be triggered&#10;    string &lt;b&gt;$secretKey&lt;/b&gt;: A valid IFTTT secret key&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $eventName;;pstring $secretKey;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\IFTTTHandler.php;f11;49;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="Iam;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\Iam.php;f0;42;1;210;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Iam.php;f0;28;1;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Iam&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    IAM Manager&#10;This class is not meant to be used directly. It should be accessed&#10;through other objects which support IAM.&#10;Policies can be created using the {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Iam\PolicyBuilder}&#10;to help ensure their validity.&#10;Example:&#10;```&#10;// IAM policies are obtained via resources which implement IAM.&#10;// In this example, we&apos;ll use PubSub topics to demonstrate&#10;// how IAM policies are managed.&#10;use Google\Cloud\PubSub\PubSubClient;s&#10;$pubsub = new PubSubClient();s&#10;$topic = $pubsub-&gt;topic(&apos;my-new-topic&apos;);s&#10;$iam = $topic-&gt;iam();s&#10;```;;d0,43;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="IAM_API_ROOT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Iam.php;f9;30;22;30;;;;vpos;;v;;a;;r&apos;https://iamcredentials.googleapis.com/v1&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SERVICE_ACCOUNT_NAME;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Iam.php;f9;32;30;32;;;;vpos;;v;;a;;r&apos;projects/-/serviceAccounts/%s&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SIGN_BLOB_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Iam.php;f9;31;24;31;;;;vpos;;v;;a;;r&apos;%s:signBlob?alt=json&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\Iam.php;f11;83;5;93;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Iam.php;f11;42;5;46;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(IamConnectionInterface $connection, $resource, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: string|null $parent The parent request parameter for the policy.&#10;If set, policy data will be sent as `request.{$parent}`.&#10;Otherwise, policy will be sent in request root. **Defaults to**&#10;`policy`.&#10;&lt;b&gt;type&lt;/b&gt;: array $args Arbitrary data to be sent with the request.&#10;}&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    IamConnectionInterface &lt;b&gt;$connection&lt;/b&gt;&#10;    string &lt;b&gt;$resource&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration Options;;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;lIamConnectionInterface $connection;;pstring $resource;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="policy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\Iam.php;f11;114;5;121;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    policy(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the existing IAM policy for this resource.&#10;If a policy has already been retrieved from the API, it will be returned.&#10;To fetch a fresh copy of the policy, use&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Iam\Iam::reload()}.&#10;Example:&#10;```&#10;$policy = $iam-&gt;policy();s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration Options&#10;    int &lt;b&gt;$options&lt;/b&gt;: [&apos;requestedPolicyVersion&apos;] Specify the policy version to request from the server. Please see [policy versioning](https://cloud.google.com/iam/docs/policies#versions) for more information.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array of policy data;;d4,115;;b1,0;;m0;;e0;;i0;;o;;k;;loptions;;p;;x">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\Iam.php;f11;204;5;209;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Refresh the IAM policy for this resource.&#10;Example:&#10;```&#10;$policy = $iam-&gt;reload();s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration Options&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array of policy data;;d4,205;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="setPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\Iam.php;f11;143;5;164;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPolicy($policy, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the IAM policy for this resource.&#10;Bindings with invalid roles, or non-existent members will raise a server&#10;error.&#10;Example:&#10;```&#10;$oldPolicy = $iam-&gt;policy();s&#10;$oldPolicy[&apos;bindings&apos;][0][&apos;members&apos;] = &apos;user:test&#10;&lt;b&gt;example&lt;/b&gt;: .com&apos;;s&#10;$policy = $iam-&gt;setPolicy($oldPolicy);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Iam\PolicyBuilder}.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given policy is not an array or PolicyBuilder.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array|PolicyBuilder &lt;b&gt;$policy&lt;/b&gt;: The new policy, as an array or an instance of {&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration Options&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array of policy data;;d4,144;;b1,0;;m0;;e0;;i0;;o;;k;;larray|PolicyBuilder $policy;;parray $options;;p;;x;;x">
</treenode>
<treenode node="signBlob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Iam.php;f11;63;5;97;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signBlob($email, $accessToken, $stringToSign, array $delegates = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using the IAM signBlob API.&#10;Note that signing using IAM requires your service account to have the&#10;`iam.serviceAccounts.signBlob` permission, part of the &quot;Service Account&#10;Token Creator&quot; IAM role.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$email&lt;/b&gt;: The service account email.&#10;    string &lt;b&gt;$accessToken&lt;/b&gt;: An access token from the service account.&#10;    string &lt;b&gt;$stringToSign&lt;/b&gt;: The string to be signed.&#10;    array &lt;b&gt;$delegates&lt;/b&gt;: [optional] A list of service account emails to add to the delegate chain. If omitted, the value of `$email` will be used.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The signed string, base64-encoded.;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $email;;pstring $accessToken;;pstring $stringToSign;;parray $delegates;;p;;x;;x;;x;;x">
</treenode>
<treenode node="testPermissions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\Iam.php;f11;183;5;191;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testPermissions(array $permissions, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Test if the current user has the given permissions on this resource.&#10;Invalid permissions will raise a BadRequestException.&#10;Example:&#10;```&#10;$allowedPermissions = $iam-&gt;testPermissions([&#10;&apos;pubsub.topics.publish&apos;,&#10;&apos;pubsub.topics.attachSubscription&apos;&#10;]);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$permissions&lt;/b&gt;: A list of permissions to test&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration Options&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A subset of $permissions, with only those allowed included.;;d4,184;;b1,0;;m0;;e0;;i0;;o;;k;;larray $permissions;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="IamBucket;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\IamBucket.php;f0;24;1;69;;;;vpos;;v;;aIamConnectionInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class IamBucket implements IamConnectionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    IAM Implementation for GCS Buckets;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\IamBucket.php;f11;34;5;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ConnectionInterface $connection)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;p;;x">
</treenode>
<treenode node="getPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\IamBucket.php;f11;42;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getPolicy(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="setPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\IamBucket.php;f11;55;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPolicy(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="testPermissions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\IamBucket.php;f11;64;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testPermissions(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
</treenode>
<treenode node="InMemoryConfigStorage;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f6;27;1;215;;;;vpos;;v;;aConfigStorageInterface;;cProcessItemInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class InMemoryConfigStorage implements&#10;    ConfigStorageInterface,&#10;    ProcessItemInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    In-memory ConfigStorageInterface implementation.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__clone;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f12;65;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __clone()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    To prevent cloning.;;d4,66;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f12;87;5;93;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The constructor registers the shutdown function for running the job for&#10;remainder items when the script exits.;;d4,88;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__sleep;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f12;72;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __sleep()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    To prevent serialize.;;d4,73;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__wakeup;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f12;79;5;81;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __wakeup()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    To prevent unserialize.;;d4,80;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;141;5;144;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear the JobConfig from storage.;;d4,142;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;188;5;202;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flush($idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Run the job with the given id.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id for the job.;;d4,189;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="getInstance;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f18;53;5;60;;;;vpos;;v;;aInMemoryConfigStorage;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstance()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Singleton getInstance.;;d4,54;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="load;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;133;5;136;;;;vpos;;v;;aJobConfig;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    load()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load a JobConfig from the storage.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when failed to load the JobConfig.;;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="lock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;100;5;103;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    lock()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Just return true;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;121;5;125;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    save(JobConfig $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Save the given JobConfig.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    JobConfig &lt;b&gt;$config&lt;/b&gt;: A JobConfig to save.;;d4,122;;b1,0;;m0;;e0;;i0;;o;;k;;lJobConfig $config;;p;;x">
</treenode>
<treenode node="shutdown;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;207;5;214;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    shutdown()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Run the job for remainder items.;;d4,208;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="submit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;159;5;180;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    submit($item, $idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Hold the items in memory and run the job in the same process when it&#10;meets the condition.&#10;We want to delay registering the shutdown function. The error&#10;reporter also registers a shutdown function and the order matters.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\ErrorReporting\Bootstrap::init()}&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.register-shutdown-function.php}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$item&lt;/b&gt;: An item to submit.&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id for the job.;;d4,160;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $item;;pint $idNum;;p;;x;;x">
</treenode>
<treenode node="unlock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InMemoryConfigStorage.php;f11;110;5;113;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unlock()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Just return true;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="InflateStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\InflateStream.php;f0;17;1;52;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class InflateStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Uses PHP&apos;s zlib.inflate filter to inflate deflate or gzipped content.&#10;This stream decorator skips the first 10 bytes of the given stream to remove&#10;the gzip header, converts the provided stream to a PHP stream resource,&#10;then appends the zlib.inflate filter. The stream is then converted back&#10;to a Guzzle stream resource to be used as a Guzzle stream.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc1952&#10;&lt;b&gt;link&lt;/b&gt;: http://php.net/manual/en/filters.compression.php;;d0,18;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\InflateStream.php;f11;21;5;31;;;;vpos;;v;;a;;r;;d4,22;;b1,0;;m0;;e0;;i0;;o;;k;;lstream;;p;;x">
</treenode>
<treenode node="getLengthOfPossibleFilenameHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\InflateStream.php;f12;38;5;51;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLengthOfPossibleFilenameHeader(StreamInterface $stream, $header)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;&#10;     &lt;b&gt;$header&lt;/b&gt;;;d4,39;;b3,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;p $header;;p;;x;;x">
</treenode>
</treenode>
<treenode node="InsecureCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\InsecureCredentials.php;f0;26;1;69;;;;vpos;;v;;aFetchAuthTokenInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class InsecureCredentials implements FetchAuthTokenInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a set of credentials that will always return an empty access token.&#10;This is useful for APIs which do not require authentication, for local&#10;service emulators, and for testing.;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\InsecureCredentials.php;f11;43;5;46;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches the auth token. In this case it returns an empty string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A set of auth related metadata, containing the following keys: - access_token (string);;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\InsecureCredentials.php;f11;54;5;57;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the cache key. In this case it returns a null value, disabling&#10;caching.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\InsecureCredentials.php;f11;65;5;68;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches the last received token. In this case, it returns the same empty string&#10;auth token.;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="InsightOpsHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\InsightOpsHandler.php;f0;21;1;58;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class InsightOpsHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Inspired on LogEntriesHandler.&#10;&lt;b&gt;author&lt;/b&gt;: Robert Kaufmann III &lt;rok3&#10;&lt;b&gt;rok3&lt;/b&gt;: .me&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Gabriel Machado &lt;gabriel.ms1&#10;&lt;b&gt;hotmail&lt;/b&gt;: .com&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\InsightOpsHandler.php;f11;37;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $token, string $region = &apos;us&apos;, bool $useSSL = true, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException If SSL encryption is set to true and OpenSSL is missing&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: Log token supplied by InsightOps&#10;    string &lt;b&gt;$region&lt;/b&gt;: Region where InsightOps account is hosted. Could be &apos;us&apos; or &apos;eu&apos;.&#10;    bool &lt;b&gt;$useSSL&lt;/b&gt;: Whether or not SSL encryption should be used&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level to trigger this handler&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether or not messages that are handled should bubble up the stack.;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pstring $region;;pbool $useSSL;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\InsightOpsHandler.php;f14;54;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateDataStream(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,55;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="InstalledVersions;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f0;24;1;336;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class InstalledVersions&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This class is copied in every Composer installed project and available to all&#10;See also https://getcomposer.org/doc/07-runtime.md#installed-versions&#10;To require it&apos;s presence, you can require `composer-runtime-api ^2.0`;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getAllRawData;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;269;5;272;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAllRawData()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the raw data of all installed.php which are currently loaded for custom implementations&#10;&lt;b&gt;psalm&lt;/b&gt;: -return list&lt;array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}&gt;}&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,270;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getInstallPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;215;5;226;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstallPath($packageName)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.;;d4,216;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $packageName;;p;;x">
</treenode>
<treenode node="getInstalled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f19;302;5;335;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstalled()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -return list&lt;array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}&gt;}&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,303;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getInstalledPackages;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;36;5;48;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstalledPackages()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a list of all package names which are present, either by being installed, replaced or provided&#10;&lt;b&gt;psalm&lt;/b&gt;: -return list&lt;string&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,37;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getInstalledPackagesByType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;57;5;70;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstalledPackagesByType($type)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a list of all package names with a specific type e.g. &apos;library&apos;&#10;&lt;b&gt;psalm&lt;/b&gt;: -return list&lt;string&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$type&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,58;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $type;;p;;x">
</treenode>
<treenode node="getPrettyVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;173;5;188;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getPrettyVersion($packageName)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present;;d4,174;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $packageName;;p;;x">
</treenode>
<treenode node="getRawData;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;246;5;261;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRawData()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the raw installed.php data for custom implementations&#10;&lt;b&gt;deprecated&lt;/b&gt;: Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.&#10;&lt;b&gt;psalm&lt;/b&gt;: -return array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}&gt;}&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,247;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getReference;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;194;5;209;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getReference($packageName)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If the package is being replaced or provided but is not really installed, null will be returned as reference;;d4,195;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $packageName;;p;;x">
</treenode>
<treenode node="getRootPackage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;232;5;237;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRootPackage()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -return array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string};;d4,233;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;152;5;167;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getVersion($packageName)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present;;d4,153;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $packageName;;p;;x">
</treenode>
<treenode node="getVersionRanges;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;121;5;146;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getVersionRanges($packageName)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a version constraint representing all the range(s) which are installed for a given package&#10;It is easier to use this via isInstalled() with the $constraint argument if you need to check&#10;whether a given version of a package is installed, and not just whether it exists&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Version constraint usable with composer/semver;;d4,122;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $packageName;;p;;x">
</treenode>
<treenode node="isInstalled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;81;5;90;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isInstalled($packageName, $includeDevRequirements = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks whether the given package is installed&#10;This also returns true if the package name is provided or replaced by another package&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;    bool &lt;b&gt;$includeDevRequirements&lt;/b&gt;;;d4,82;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $packageName;;pbool $includeDevRequirements;;p;;x;;x">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;292;5;296;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload($data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lets you reload the static array from another file&#10;This is only useful for complex integrations in which a project needs to use&#10;this class but then also needs to execute another project&apos;s autoloader in process,&#10;and wants to ensure both projects have access to their version of installed.php.&#10;A typical case would be PHPUnit, where it would need to make sure it reads all&#10;the data it needs from this class, then call reload() with&#10;`require $CWD/vendor/composer/installed.php` (or similar) as input to make sure&#10;the project in which it runs can then also use this class safely, without&#10;interference between PHPUnit&apos;s dependencies and the project&apos;s dependencies.&#10;&lt;b&gt;psalm&lt;/b&gt;: -param array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array&lt;string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}&gt;} $data&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array[] &lt;b&gt;$data&lt;/b&gt;: A vendor/composer/installed.php data set;;d4,293;;b1,5;;m0;;e0;;i0;;o;;k;;larray[] $data;;p;;x">
</treenode>
<treenode node="satisfies;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\InstalledVersions.php;f18;104;5;110;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    satisfies(VersionParser $parser, $packageName, $constraint)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks whether the given package satisfies a version constraint&#10;e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:&#10;Composer\InstalledVersions::satisfies(new VersionParser, &apos;foo/bar&apos;, &apos;^2.3&apos;)&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    VersionParser &lt;b&gt;$parser&lt;/b&gt;: Install composer/semver to have access to this class and functionality&#10;    string &lt;b&gt;$packageName&lt;/b&gt;&#10;    string|null &lt;b&gt;$constraint&lt;/b&gt;: A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package;;d4,105;;b1,5;;m0;;e0;;i0;;o;;k;;lVersionParser $parser;;pstring $packageName;;pstring|null $constraint;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="Int64;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Int64.php;f0;28;1;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Int64&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a 64 bit integer. This can be useful when working on a 32 bit&#10;platform.&#10;Example:&#10;```&#10;$int64 = new Int64(&apos;9223372036854775807&apos;);s&#10;```;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Int64.php;f11;38;5;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($value)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$value&lt;/b&gt;: The 64 bit integer value in string format.;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $value;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Int64.php;f11;63;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __toString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a convenient way to access the value.&#10;&lt;b&gt;access&lt;/b&gt;: private;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Int64.php;f11;53;5;56;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the value.&#10;Example:&#10;```&#10;$value = $int64-&gt;get();s&#10;```;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="InterruptTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InterruptTrait.php;f0;27;1;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait InterruptTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A trait to assist in handling interrupt signals and gracefully stopping work.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="setupSignalHandlers;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InterruptTrait.php;f12;31;5;38;;;;vpos;;v;;a;;r;;d4,32;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="sigHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\InterruptTrait.php;f11;50;5;58;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sigHandler($signo, $siginfo = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A signal handler for setting the terminate switch.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.pcntl-signal.php}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$signo&lt;/b&gt;: The received signal.&#10;    mixed &lt;b&gt;$siginfo&lt;/b&gt;: [optional] An array representing the signal information. **Defaults to** null.;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lint $signo;;pmixed $siginfo;;p;;x;;x">
</treenode>
</treenode>
<treenode node="IntrospectionProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\IntrospectionProcessor.php;f0;26;1;107;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class IntrospectionProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects line/file:class/function where the log message came from&#10;Warning: This only works if the handler processes the logs directly.&#10;If you put the processor on a handler that is behind a FingersCrossedHandler&#10;for example, the processor will only be called once the trigger level is reached,&#10;and all the log records will have the same file/line/.. data from the call that&#10;triggered the FingersCrossedHandler.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\IntrospectionProcessor.php;f11;42;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG, array $skipClassesPartials = [], int $skipStackFramesCount = 0)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this Processor will be triggered;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;llevel;;pskipClassesPartials;;pskipStackFramesCount;;p;;x;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\IntrospectionProcessor.php;f11;49;5;97;;;;vpos;;v;;a array;;r;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="isTraceClassOrSkippedFunction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\IntrospectionProcessor.php;f12;99;5;106;;;;vpos;;v;;a;;r;;d4,100;;b3,0;;m0;;e0;;i0;;o;;k;;ltrace;;pindex;;p;;x;;x">
</treenode>
</treenode>
<treenode node="InvalidArgumentException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\InvalidArgumentException.php;f0;4;1;6;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\InvalidArgumentException.php;f6;4;1;6;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\InvalidArgumentException.php;f0;21;1;23;;;;vpos;;v;;aInvalidArgumentException;;c;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="InvokeResult;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\InvokeResult.php;f0;22;1;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class InvokeResult&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class InvokeResult;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\InvokeResult.php;f11;33;5;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($returnVal, $output)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    InvokeResult constructor.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$returnVal&lt;/b&gt;&#10;    mixed &lt;b&gt;$output&lt;/b&gt;;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $returnVal;;pmixed $output;;p;;x;;x">
</treenode>
<treenode node="output;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\InvokeResult.php;f11;50;5;53;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    output()&#10;;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="returnVal;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\InvokeResult.php;f11;42;5;45;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    returnVal()&#10;;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Is;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Is.php;f6;4;1;45;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="fulfilled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Is.php;f18;31;5;34;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fulfilled(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is fulfilled.;;d4,32;;b1,5;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
<treenode node="pending;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Is.php;f18;11;5;14;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pending(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is pending.;;d4,12;;b1,5;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
<treenode node="rejected;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Is.php;f18;41;5;44;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rejected(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is rejected.;;d4,42;;b1,5;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
<treenode node="settled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Is.php;f18;21;5;24;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    settled(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is fulfilled or rejected.;;d4,22;;b1,5;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
</treenode>
<treenode node="Item;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f6;24;1;189;;;;vpos;;v;;aCacheItemInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Item implements CacheItemInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A cache item.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;49;5;52;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($key)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="currentTime;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f14;185;5;188;;;;vpos;;v;;a;;r;;d4,186;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="expiresAfter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;125;5;142;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expiresAfter($time)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;ltime;;p;;x">
</treenode>
<treenode node="expiresAt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;100;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expiresAt($expiration)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lexpiration;;p;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;65;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;57;5;60;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f12;150;5;157;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleError($error)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handles an error.&#10;&lt;b&gt;throws&lt;/b&gt;: \TypeError&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$error&lt;/b&gt;;;d4,151;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $error;;p;;x">
</treenode>
<treenode node="isHit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;73;5;84;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHit()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isValidExpiration;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f12;165;5;183;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isValidExpiration($expiration)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if an expiration is valid based on the rules defined by PSR6.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$expiration&lt;/b&gt;;;d4,166;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $expiration;;p;;x">
</treenode>
<treenode node="set;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\Item.php;f11;89;5;95;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    set($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
</treenode>
<treenode node="ItemIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIterator.php;f0;22;1;25;;;;vpos;;v;;aIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ItemIterator implements \Iterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Iterates over a set of items.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ItemIteratorTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f0;24;1;149;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ItemIteratorTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This trait fulfills the&#10;[\Iterator](http://php.net/manual/en/class.iterator.php) interface and&#10;returns results from a paged set one at a time.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;44;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(\Iterator $pageIterator)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Iterator &lt;b&gt;$pageIterator&lt;/b&gt;;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;l\Iterator $pageIterator;;p;;x">
</treenode>
<treenode node="current;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;88;5;95;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    current()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the current item.;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="iterateByPage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;66;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    iterateByPage()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Iterate over the results on a per page basis.&#10;\Iterator;;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="key;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;102;5;105;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    key()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the key current item&apos;s key.;;d4,103;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="next;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;112;5;121;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    next()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Advances to the next item.;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="nextResultToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;54;5;59;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    nextResultToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch the token used to get the next set of results.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;76;5;81;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rewind()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Rewind the iterator.;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="valid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\ItemIteratorTrait.php;f11;128;5;148;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    valid()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if the current position is valid.;;d4,129;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="JWK;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWK.php;f0;19;1;170;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class JWK&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    JSON Web Key implementation, based on this spec:&#10;https://tools.ietf.org/html/draft-ietf-jose-json-web-key-41&#10;PHP version 5&#10;&lt;b&gt;category&lt;/b&gt;: Authentication&#10;&lt;b&gt;package&lt;/b&gt;: Authentication_JWT&#10;&lt;b&gt;author&lt;/b&gt;: Bui Sy Nguyen &lt;nguyenbs&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;license&lt;/b&gt;: http://opensource.org/licenses/BSD-3-Clause 3-clause BSD&#10;&lt;b&gt;link&lt;/b&gt;: https://github.com/firebase/php-jwt;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="createPemFromModulusAndExponent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWK.php;f19;114;5;149;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createPemFromModulusAndExponent($n, $e)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a public key represented in PEM format from RSA modulus and exponent information&#10;&lt;b&gt;uses&lt;/b&gt;: encodeLength&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$n&lt;/b&gt;: The RSA modulus encoded in Base64&#10;    string &lt;b&gt;$e&lt;/b&gt;: The RSA exponent encoded in Base64&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The RSA public key represented in PEM format;;d4,115;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $n;;pstring $e;;p;;x;;x">
</treenode>
<treenode node="encodeLength;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWK.php;f19;160;5;169;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeLength($length)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    DER-encode the length&#10;DER supports lengths up to (2**8)**127, however, we&apos;ll only support lengths up to (2**8)**4.  See&#10;{&#10;&lt;b&gt;link&lt;/b&gt;: http://itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf#p=13 X.690 paragraph 8.1.3} for more information.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$length&lt;/b&gt;;;d4,161;;b3,5;;m0;;e0;;i0;;o;;k;;lint $length;;p;;x">
</treenode>
<treenode node="parseKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWK.php;f19;72;5;102;;;;vpos;;v;;aresource|array;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseKey(array $jwk)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse a JWK key&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException     Provided JWK is empty&#10;&lt;b&gt;throws&lt;/b&gt;: UnexpectedValueException     Provided JWK was invalid&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException              OpenSSL failure&#10;&lt;b&gt;uses&lt;/b&gt;: createPemFromModulusAndExponent&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$jwk&lt;/b&gt;: An individual JWK&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An associative array that represents the key;;d4,73;;b3,5;;m0;;e0;;i0;;o;;k;;larray $jwk;;p;;x">
</treenode>
<treenode node="parseKeySet;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWK.php;f18;34;5;57;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseKeySet(array $jwks)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse a set of JWK keys&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException     Provided JWK Set is empty&#10;&lt;b&gt;throws&lt;/b&gt;: UnexpectedValueException     Provided JWK Set was invalid&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException              OpenSSL failure&#10;&lt;b&gt;uses&lt;/b&gt;: parseKey&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$jwks&lt;/b&gt;: The JSON Web Key Set as an associative array&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An associative array that represents the set of keys;;d4,35;;b1,5;;m0;;e0;;i0;;o;;k;;larray $jwks;;p;;x">
</treenode>
</treenode>
<treenode node="JWT;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f0;22;1;511;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class JWT&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    JSON Web Token implementation, based on this spec:&#10;https://tools.ietf.org/html/rfc7519&#10;PHP version 5&#10;&lt;b&gt;category&lt;/b&gt;: Authentication&#10;&lt;b&gt;package&lt;/b&gt;: Authentication_JWT&#10;&lt;b&gt;author&lt;/b&gt;: Neuman Vong &lt;neuman&#10;&lt;b&gt;twilio&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Anant Narayanan &lt;anant&#10;&lt;b&gt;php&lt;/b&gt;: .net&gt;&#10;&lt;b&gt;license&lt;/b&gt;: http://opensource.org/licenses/BSD-3-Clause 3-clause BSD&#10;&lt;b&gt;link&lt;/b&gt;: https://github.com/firebase/php-jwt;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ASN1_BIT_STRING;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f9;26;25;26;;;;vpos;;v;;a;;r0x03;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ASN1_INTEGER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f9;24;22;24;;;;vpos;;v;;a;;r0x02;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ASN1_SEQUENCE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f9;25;23;25;;;;vpos;;v;;a;;r0x10;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="decode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;73;5;147;;;;vpos;;v;;aobject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    decode($jwt, $key, array $allowed_algs = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decodes a JWT string into a PHP object.&#10;&lt;b&gt;throws&lt;/b&gt;: UnexpectedValueException     Provided JWT was invalid&#10;&lt;b&gt;throws&lt;/b&gt;: SignatureInvalidException    Provided JWT was invalid because the signature verification failed&#10;&lt;b&gt;throws&lt;/b&gt;: BeforeValidException         Provided JWT is trying to be used before it&apos;s eligible as defined by &apos;nbf&apos;&#10;&lt;b&gt;throws&lt;/b&gt;: BeforeValidException         Provided JWT is trying to be used before it&apos;s been created as defined by &apos;iat&apos;&#10;&lt;b&gt;throws&lt;/b&gt;: ExpiredException             Provided JWT has since expired, as defined by the &apos;exp&apos; claim&#10;&lt;b&gt;uses&lt;/b&gt;: jsonDecode&#10;&lt;b&gt;uses&lt;/b&gt;: urlsafeB64Decode&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$jwt&lt;/b&gt;: The JWT&#10;    string|array|resource &lt;b&gt;$key&lt;/b&gt;: The key, or map of keys. If the algorithm used is asymmetric, this is the public key&#10;    array &lt;b&gt;$allowed_algs&lt;/b&gt;: List of supported verification algorithms Supported algorithms are &apos;ES256&apos;, &apos;HS256&apos;, &apos;HS384&apos;, &apos;HS512&apos;, &apos;RS256&apos;, &apos;RS384&apos;, and &apos;RS512&apos;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The JWT&apos;s payload as a PHP object;;d4,74;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $jwt;;pstring|array|resource $key;;parray $allowed_algs;;p;;x;;x;;x">
</treenode>
<treenode node="encode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;165;5;183;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encode($payload, $key, $alg = &apos;HS256&apos;, $keyId = null, $head = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts and signs a PHP object or array into a JWT string.&#10;&lt;b&gt;uses&lt;/b&gt;: jsonEncode&#10;&lt;b&gt;uses&lt;/b&gt;: urlsafeB64Encode&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    object|array &lt;b&gt;$payload&lt;/b&gt;: PHP object or array&#10;    string &lt;b&gt;$key&lt;/b&gt;: The secret key. If the algorithm used is asymmetric, this is the private key&#10;    string &lt;b&gt;$alg&lt;/b&gt;: The signing algorithm. Supported algorithms are &apos;ES256&apos;, &apos;HS256&apos;, &apos;HS384&apos;, &apos;HS512&apos;, &apos;RS256&apos;, &apos;RS384&apos;, and &apos;RS512&apos;&#10;    mixed &lt;b&gt;$keyId&lt;/b&gt;&#10;    array &lt;b&gt;$head&lt;/b&gt;: An array with header elements to attach&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A signed JWT;;d4,166;;b1,5;;m0;;e0;;i0;;o;;k;;lobject|array $payload;;pstring $key;;pstring $alg;;pmixed $keyId;;parray $head;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="encodeDER;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;430;5;444;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeDER($type, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encodes a value into a DER object.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$type&lt;/b&gt;: DER tag&#10;    string &lt;b&gt;$value&lt;/b&gt;: the value to encode&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the encoded object;;d4,431;;b3,5;;m0;;e0;;i0;;o;;k;;lint $type;;pstring $value;;p;;x;;x">
</treenode>
<treenode node="handleJsonError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;361;5;375;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleJsonError($errno)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper method to create a JSON error.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$errno&lt;/b&gt;: An error number from json_last_error();;d4,362;;b3,5;;m0;;e0;;i0;;o;;k;;lint $errno;;p;;x">
</treenode>
<treenode node="jsonDecode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;279;5;303;;;;vpos;;v;;aobject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonDecode($input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decode a JSON string into a PHP object.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException Provided string was invalid JSON&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$input&lt;/b&gt;: JSON string&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Object representation of JSON string;;d4,280;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $input;;p;;x">
</treenode>
<treenode node="jsonEncode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;314;5;323;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonEncode($input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a PHP object into a JSON string.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException Provided object could not be encoded to valid JSON&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    object|array &lt;b&gt;$input&lt;/b&gt;: A PHP object or array&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   JSON representation of the PHP object or array;;d4,315;;b1,5;;m0;;e0;;i0;;o;;k;;lobject|array $input;;p;;x">
</treenode>
<treenode node="readDER;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;480;5;510;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    readDER($der, $offset = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reads binary DER-encoded data and decodes into a single object&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$der&lt;/b&gt;: the binary data in DER format&#10;    int &lt;b&gt;$offset&lt;/b&gt;: the offset of the data stream containing the object to decode&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [$offset, $data] the new offset and the decoded object;;d4,481;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $der;;pint $offset;;p;;x;;x">
</treenode>
<treenode node="safeStrlen;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;384;5;390;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    safeStrlen($str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the number of bytes in cryptographic strings.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;;;d4,385;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $str;;p;;x">
</treenode>
<treenode node="sign;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;197;5;218;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sign($msg, $key, $alg = &apos;HS256&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string with a given key and algorithm.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException Unsupported algorithm was specified&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$msg&lt;/b&gt;: The message to sign&#10;    string|resource &lt;b&gt;$key&lt;/b&gt;: The secret key&#10;    string &lt;b&gt;$alg&lt;/b&gt;: The signing algorithm. Supported algorithms are &apos;ES256&apos;, &apos;HS256&apos;, &apos;HS384&apos;, &apos;HS512&apos;, &apos;RS256&apos;, &apos;RS384&apos;, and &apos;RS512&apos;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An encrypted message;;d4,198;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $msg;;pstring|resource $key;;pstring $alg;;p;;x;;x;;x">
</treenode>
<treenode node="signatureFromDER;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;453;5;470;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signatureFromDER($der, $keySize)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encodes signature from a DER object.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$der&lt;/b&gt;: binary signature in DER format&#10;    int &lt;b&gt;$keySize&lt;/b&gt;: the number of bits in the key&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the signature;;d4,454;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $der;;pint $keySize;;p;;x;;x">
</treenode>
<treenode node="signatureToDER;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;398;5;421;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signatureToDER($sig)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert an ECDSA signature to an ASN.1 DER sequence&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$sig&lt;/b&gt;: The ECDSA signature to convert&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The encoded DER object;;d4,399;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $sig;;p;;x">
</treenode>
<treenode node="urlsafeB64Decode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;332;5;340;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    urlsafeB64Decode($input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decode a string with URL-safe Base64.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$input&lt;/b&gt;: A Base64 encoded string&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A decoded string;;d4,333;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $input;;p;;x">
</treenode>
<treenode node="urlsafeB64Encode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f18;349;5;352;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    urlsafeB64Encode($input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a string with URL-safe Base64.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$input&lt;/b&gt;: The string you want encoded&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The base64 encode of what you passed in;;d4,350;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $input;;p;;x">
</treenode>
<treenode node="verify;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\JWT.php;f19;233;5;268;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    verify($msg, $signature, $key, $alg)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verify a signature with the message, key and method. Not all methods&#10;are symmetric, so we must have a separate verify and sign method.&#10;&lt;b&gt;throws&lt;/b&gt;: DomainException Invalid Algorithm or OpenSSL failure&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$msg&lt;/b&gt;: The original message (header and body)&#10;    string &lt;b&gt;$signature&lt;/b&gt;: The original signature&#10;    string|resource &lt;b&gt;$key&lt;/b&gt;: For HS*, a string key works. for RS*, must be a resource of an openssl public key&#10;    string &lt;b&gt;$alg&lt;/b&gt;: The algorithm;;d4,234;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $msg;;pstring $signature;;pstring|resource $key;;pstring $alg;;p;;x;;x;;x;;x">
</treenode>
</treenode>
<treenode node="JobConfig;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobConfig.php;f0;27;1;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class JobConfig&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Hold configurations for the {&#10;&lt;b&gt;see&lt;/b&gt;: \Google\Cloud\Core\Batch\BatchRunner}.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getJobFromId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobConfig.php;f11;52;5;57;;;;vpos;;v;;aJobInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getJobFromId($identifier)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the job with the given identifier.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;p;;x">
</treenode>
<treenode node="getJobFromIdNum;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobConfig.php;f11;66;5;71;;;;vpos;;v;;aJobInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getJobFromIdNum($idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the job with the given numeric id.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id of the job.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="getJobs;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobConfig.php;f11;102;5;105;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getJobs()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get all the jobs indexed by the job&apos;s identifier.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Associative array of JobInterface instances keyed by a string identifier.;;d4,103;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="registerJob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobConfig.php;f11;81;5;94;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    registerJob($identifier, $callback)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Register a job for executing in batch.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;    callable &lt;b&gt;$callback&lt;/b&gt;: Callback that accepts the job $idNum and returns a JobInterface instance.;;d4,82;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;pcallable $callback;;p;;x;;x">
</treenode>
</treenode>
<treenode node="JobTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f0;27;1;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait JobTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A trait to assist in implementing the JobInterface&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="bootstrapFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f11;84;5;87;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    bootstrapFile()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the optional file required to run this job.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,85;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f11;100;5;103;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flush(array $items = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finish any pending activity for this job.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$items&lt;/b&gt;;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;larray $items;;p;;x">
</treenode>
<treenode node="id;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f11;64;5;67;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    id()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the job id;;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="identifier;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f11;54;5;57;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    identifier()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the job identifier;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="numWorkers;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f11;74;5;77;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    numWorkers()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the number of workers for this job. **Defaults to* 1.;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\JobTrait.php;f20;92;34;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runs the job loop. This is expected to be a blocking call.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="JsonFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f0;22;1;187;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class JsonFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encodes whatever record data is passed to it as json&#10;This can be useful to log to databases or remote APIs&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="BATCH_MODE_JSON;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f16;24;32;24;;;;vpos;;v;;a;;r1;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="BATCH_MODE_NEWLINES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f16;25;36;25;;;;vpos;;v;;a;;r2;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f11;36;5;41;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lbatchMode;;pappendNewline;;pignoreEmptyContextAndExtra;;p;;x;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f11;66;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f11;91;5;101;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="formatBatchJson;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f14;111;5;114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatchJson(array $records): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a JSON-encoded array of records.;;d4,112;;b2,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="formatBatchNewlines;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f14;120;5;132;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatchNewlines(array $records): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Use new lines to separate records instead of a&#10;JSON-encoded array.;;d4,121;;b2,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="getBatchMode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f11;50;5;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBatchMode(): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The batch mode option configures the formatting style for&#10;multiple records. By default, multiple records will be&#10;formatted as a JSON-encoded array. However, for&#10;compatibility with some API endpoints, alternative styles&#10;are available.;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="includeStacktraces;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f11;103;5;106;;;;vpos;;v;;a;;r;;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;linclude;;p;;x">
</treenode>
<treenode node="isAppendingNewlines;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f11;58;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isAppendingNewlines(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    True if newlines are appended to every formatted record;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="normalize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f14;141;5;172;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize($data, int $depth = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalizes given $data.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;;;d4,142;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;pdepth;;p;;x;;x">
</treenode>
<treenode node="normalizeException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\JsonFormatter.php;f14;178;5;186;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeException(Throwable $e, int $depth = 0): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalizes given exception with or without its own stack trace based on&#10;`includeStacktraces` property.;;d4,179;;b2,0;;m0;;e0;;i0;;o;;k;;le;;pdepth;;p;;x;;x">
</treenode>
</treenode>
<treenode node="JsonTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\JsonTrait.php;f0;23;1;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait JsonTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides wrappers for json_encode/json_decode that throw exceptions when an&#10;error is encountered.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="jsonDecode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\JsonTrait.php;f19;34;5;45;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonDecode($json, $assoc = false, $depth = 512, $options = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$json&lt;/b&gt;: The json string being decoded.&#10;    bool &lt;b&gt;$assoc&lt;/b&gt;: When true, returned objects will be converted into associative arrays.&#10;    int &lt;b&gt;$depth&lt;/b&gt;: User specified recursion depth.&#10;    int &lt;b&gt;$options&lt;/b&gt;: Bitmask of JSON decode options.;;d4,35;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $json;;pbool $assoc;;pint $depth;;pint $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="jsonEncode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\JsonTrait.php;f19;55;5;66;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonEncode($value, $options = 0, $depth = 512)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The value being encoded. Can be any type except a resource.&#10;    int &lt;b&gt;$options&lt;/b&gt;: Bitmask of JSON encode options.&#10;    int &lt;b&gt;$depth&lt;/b&gt;: Set the maximum depth. Must be greater than zero.;;d4,56;;b3,5;;m0;;e0;;i0;;o;;k;;lmixed $value;;pint $options;;pint $depth;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="KeyManager;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f0;26;1;212;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class KeyManager&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Manage KMS keys used for system tests.;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_LOCATION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f9;28;26;28;;;;vpos;;v;;a;;r&apos;us-west1&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f11;36;5;49;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lkeyFile;;pserviceAccountEmail;;pprojectId;;plocation;;p;;x;;x;;x;;x">
</treenode>
<treenode node="buildKeyRing;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f12;121;5;138;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildKeyRing($keyRingId)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$keyRingId&lt;/b&gt;;;d4,122;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $keyRingId;;p;;x">
</treenode>
<treenode node="getCryptoKeyName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f12;145;5;211;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCryptoKeyName(&#10;        $keyRingId,&#10;        $cryptoKeyId&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$keyRingId&lt;/b&gt;&#10;    string &lt;b&gt;$cryptoKeyId&lt;/b&gt;;;d6,148;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $keyRingId;;pstring $cryptoKeyId;;p;;x;;x">
</treenode>
<treenode node="getKeyNames;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f11;102;5;116;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getKeyNames($keyRingId, array $keyIds)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A helper to get KMS keys and set correct permissions.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$keyRingId&lt;/b&gt;&#10;    string[] &lt;b&gt;$keyIds&lt;/b&gt;;;d4,103;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $keyRingId;;pstring[] $keyIds;;p;;x;;x">
</treenode>
<treenode node="getProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f11;80;5;93;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProject($projectId = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the project data.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$projectId&lt;/b&gt;: [optional] If not provided, uses ID given in constructor or keyfile.;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $projectId;;p;;x">
</treenode>
<treenode node="setLocation;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f11;68;5;71;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLocation($location)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set keyring location.&#10;Location name may be in upper or lower case.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$location&lt;/b&gt;;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $location;;p;;x">
</treenode>
<treenode node="setServiceAccountEmail;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\KeyManager.php;f11;56;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setServiceAccountEmail($serviceAccountEmail)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the service account email used for IAM management.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$serviceAccountEmail&lt;/b&gt;;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $serviceAccountEmail;;p;;x">
</treenode>
</treenode>
<treenode node="KeyPairGenerateTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\KeyPairGenerateTrait.php;f0;28;1;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait KeyPairGenerateTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Trait KeyPairGenerateTrait implements key pair generation functions used for testing&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getKeyPair;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\KeyPairGenerateTrait.php;f12;32;5;41;;;;vpos;;v;;a;;r;;d4,33;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="verifySignature;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\KeyPairGenerateTrait.php;f12;43;5;48;;;;vpos;;v;;a;;r;;d4,44;;b3,0;;m0;;e0;;i0;;o;;k;;lprivateKey;;pinput;;psignature;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="LROTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LROTrait.php;f0;28;1;124;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait LROTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provide Long Running Operation support to Google Cloud PHP Clients.&#10;This trait should be used by a user-facing client which implements LRO.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="longRunningOperations;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LROTrait.php;f11;100;5;123;;;;vpos;;v;;aItemIterator;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    longRunningOperations(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    List long running operations.&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the operation collection.&#10;&lt;b&gt;type&lt;/b&gt;: string $filter The standard list filter.&#10;&lt;b&gt;type&lt;/b&gt;: int $pageSize Maximum number of results to return per&#10;request.&#10;&lt;b&gt;type&lt;/b&gt;: int $resultLimit Limit the number of results returned in total.&#10;**Defaults to** `0` (return all results).&#10;&lt;b&gt;type&lt;/b&gt;: string $pageToken A previously-returned page token used to&#10;resume the loading of results from a specific point.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration Options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;InstanceConfiguration&gt;;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="resumeOperation;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LROTrait.php;f11;73;5;81;;;;vpos;;v;;aLongRunningOperation;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resumeOperation($operationName, array $info = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resume a Long Running Operation&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$operationName&lt;/b&gt;: The Long Running Operation name.&#10;    array &lt;b&gt;$info&lt;/b&gt;: [optional] The operation data.;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $operationName;;parray $info;;p;;x;;x">
</treenode>
<treenode node="setLroProperties;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LROTrait.php;f12;56;5;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLroProperties(&#10;        LongRunningConnectionInterface $lroConnection,&#10;        array $lroCallables,&#10;        $resource = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Populate required LRO properties.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LongRunningConnectionInterface &lt;b&gt;$lroConnection&lt;/b&gt;: The LRO Connection.&#10;    array &lt;b&gt;$callablesMap&lt;/b&gt;: An collection of form [(string) typeUrl, (callable) callable] providing a function to invoke when an operation completes. The callable Type should correspond to an expected value of operation.metadata.typeUrl.&#10;    string &lt;b&gt;$lroResource&lt;/b&gt;: [optional] The resource for which operations may be listed.;;d6,60;;b3,0;;m0;;e0;;i0;;o;;k;;lLongRunningConnectionInterface $lroConnection;;parray $callablesMap;;pstring $lroResource;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="LazyOpenStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LazyOpenStream.php;f0;10;1;39;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LazyOpenStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lazily reads or writes to a file that is opened only after an IO operation&#10;take place on the stream.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LazyOpenStream.php;f11;24;5;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($filename, $mode)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;: File to lazily open&#10;    string &lt;b&gt;$mode&lt;/b&gt;: fopen mode to use when opening the stream;;d4,25;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $filename;;pstring $mode;;p;;x;;x">
</treenode>
<treenode node="createStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LazyOpenStream.php;f14;35;5;38;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createStream()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates the underlying stream lazily when required.;;d4,36;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Lifecycle;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f0;51;1;390;;;;vpos;;v;;aArrayAccess;;cIteratorAggregate;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Lifecycle implements \ArrayAccess, \IteratorAggregate&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Object Lifecycle Management supports common use cases like setting a Time to&#10;Live (TTL) for objects, archiving older versions of objects, or &quot;downgrading&quot;&#10;storage classes of objects to help manage costs.&#10;This builder does not execute any network requests and is intended to be used&#10;in combination with either&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageClient::createBucket()}&#10;or {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::update()}.&#10;Example:&#10;```&#10;// Access a builder preconfigured with rules already existing on a given&#10;// bucket.&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$bucket = $storage-&gt;bucket(&apos;my-bucket&apos;);s&#10;$lifecycle = $bucket-&gt;currentLifecycle();s&#10;```&#10;```&#10;// Or get a fresh builder by using the static factory method.&#10;use Google\Cloud\Storage\Bucket;s&#10;$lifecycle = Bucket::lifecycle();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/lifecycle Object Lifecycle Management API Documentation;;d0,52;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;63;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $lifecycle = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$lifecycle&lt;/b&gt;: [optional] A lifecycle configuration. Please see [here](https://cloud.google.com/storage/docs/json_api/v1/buckets#lifecycle) for the expected structure.;;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;larray $lifecycle;;p;;x">
</treenode>
<treenode node="addDeleteRule;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;125;5;135;;;;vpos;;v;;aLifecycle;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addDeleteRule(array $condition)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds an Object Lifecycle Delete Rule.&#10;Example:&#10;```&#10;$lifecycle-&gt;addDeleteRule([&#10;&apos;age&apos; =&gt; 50,&#10;&apos;isLive&apos; =&gt; true&#10;]);s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: int $age Age of an object (in days). This condition is&#10;satisfied when an object reaches the specified age.&#10;&lt;b&gt;type&lt;/b&gt;: \DateTimeInterface|string $createdBefore This condition is&#10;satisfied when an object is created before midnight of the&#10;specified date in UTC. If a string is given, it must be a date&#10;in RFC 3339 format with only the date part (for instance,&#10;&quot;2013-01-15&quot;).&#10;&lt;b&gt;type&lt;/b&gt;: \DateTimeInterface|string $customTimeBefore This condition is&#10;satisfied when the custom time on an object is before this date&#10;in UTC. If a string is given, it must be a date in RFC 3339&#10;format with only the date part (for instance, &quot;2013-01-15&quot;).&#10;&lt;b&gt;type&lt;/b&gt;: int $daysSinceCustomTime Number of days elapsed since the&#10;user-specified timestamp set on an object. The condition is&#10;satisfied if the days elapsed is at least this number. If no&#10;custom timestamp is specified on an object, the condition does&#10;not apply.&#10;&lt;b&gt;type&lt;/b&gt;: int $daysSinceNoncurrentTime Number of days elapsed since the&#10;noncurrent timestamp of an object. The condition is satisfied&#10;if the days elapsed is at least this number. This condition is&#10;relevant only for versioned objects. The value of the field&#10;must be a nonnegative integer. If it&apos;s zero, the object version&#10;will become eligible for Lifecycle action as soon as it becomes&#10;noncurrent.&#10;&lt;b&gt;type&lt;/b&gt;: bool $isLive Relevant only for versioned objects. If the value&#10;is `true`, this condition matches live objects;s if the value is&#10;`false`, it matches archived objects.&#10;&lt;b&gt;type&lt;/b&gt;: string[] $matchesStorageClass Objects having any of the storage&#10;classes specified by this condition will be matched. Values&#10;include `&quot;MULTI_REGIONAL&quot;`, `&quot;REGIONAL&quot;`, `&quot;NEARLINE&quot;`,&#10;`&quot;ARCHIVE&quot;`, `&quot;COLDLINE&quot;`, `&quot;STANDARD&quot;`, and&#10;`&quot;DURABLE_REDUCED_AVAILABILITY&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: \DateTimeInterface|string $noncurrentTimeBefore This condition&#10;is satisfied when the noncurrent time on an object is before&#10;this timestamp. This condition is relevant only for versioned&#10;objects. If a string is given, it must be a date in RFC 3339&#10;format with only the date part (for instance, &quot;2013-01-15&quot;).&#10;&lt;b&gt;type&lt;/b&gt;: int $numNewerVersions Relevant only for versioned objects. If&#10;the value is N, this condition is satisfied when there are at&#10;least N versions (including the live version) newer than this&#10;version of the object.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$condition&lt;/b&gt;: { The condition(s) where the rule will apply.;;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;larray $condition;;p;;x">
</treenode>
<treenode node="addSetStorageClassRule;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;215;5;226;;;;vpos;;v;;aLifecycle;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addSetStorageClassRule($storageClass, array $condition)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds an Object Lifecycle Set Storage Class Rule.&#10;Example:&#10;```&#10;$lifecycle-&gt;addSetStorageClassRule(&apos;COLDLINE&apos;, [&#10;&apos;age&apos; =&gt; 50,&#10;&apos;isLive&apos; =&gt; true&#10;]);s&#10;```&#10;```&#10;// Using customTimeBefore rule with an object&apos;s custom time setting.&#10;$lifecycle-&gt;addSetStorageClassRule(&apos;NEARLINE&apos;, [&#10;&apos;customTimeBefore&apos; =&gt; (new \DateTime())-&gt;add(&#10;\DateInterval::createFromDateString(&apos;+10 days&apos;)&#10;)&#10;]);s&#10;$bucket-&gt;update([&apos;lifecycle&apos; =&gt; $lifecycle]);s&#10;$object = $bucket-&gt;object($objectName);s&#10;$object-&gt;update([&#10;&apos;metadata&apos; =&gt; [&#10;&apos;customTime&apos; =&gt; &apos;2020-08-17&apos;&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: int $age Age of an object (in days). This condition is&#10;satisfied when an object reaches the specified age.&#10;&lt;b&gt;type&lt;/b&gt;: \DateTimeInterface|string $createdBefore This condition is&#10;satisfied when an object is created before midnight of the&#10;specified date in UTC. If a string is given, it must be a date&#10;in RFC 3339 format with only the date part (for instance,&#10;&quot;2013-01-15&quot;).&#10;&lt;b&gt;type&lt;/b&gt;: \DateTimeInterface|string $customTimeBefore This condition is&#10;satisfied when the custom time on an object is before this date&#10;in UTC. If a string is given, it must be a date in RFC 3339&#10;format with only the date part (for instance, &quot;2013-01-15&quot;).&#10;&lt;b&gt;type&lt;/b&gt;: int $daysSinceCustomTime Number of days elapsed since the&#10;user-specified timestamp set on an object. The condition is&#10;satisfied if the days elapsed is at least this number. If no&#10;custom timestamp is specified on an object, the condition does&#10;not apply.&#10;&lt;b&gt;type&lt;/b&gt;: int $daysSinceNoncurrentTime Number of days elapsed since the&#10;noncurrent timestamp of an object. The condition is satisfied&#10;if the days elapsed is at least this number. This condition is&#10;relevant only for versioned objects. The value of the field&#10;must be a nonnegative integer. If it&apos;s zero, the object version&#10;will become eligible for Lifecycle action as soon as it becomes&#10;noncurrent.&#10;&lt;b&gt;type&lt;/b&gt;: bool $isLive Relevant only for versioned objects. If the value&#10;is `true`, this condition matches live objects;s if the value is&#10;`false`, it matches archived objects.&#10;&lt;b&gt;type&lt;/b&gt;: string[] $matchesStorageClass Objects having any of the storage&#10;classes specified by this condition will be matched. Values&#10;include `&quot;MULTI_REGIONAL&quot;`, `&quot;REGIONAL&quot;`, `&quot;NEARLINE&quot;`,&#10;`&quot;ARCHIVE&quot;`, `&quot;COLDLINE&quot;`, `&quot;STANDARD&quot;`, and&#10;`&quot;DURABLE_REDUCED_AVAILABILITY&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: \DateTimeInterface|string $noncurrentTimeBefore This condition&#10;is satisfied when the noncurrent time on an object is before&#10;this timestamp. This condition is relevant only for versioned&#10;objects. If a string is given, it must be a date in RFC 3339&#10;format with only the date part (for instance, &quot;2013-01-15&quot;).&#10;&lt;b&gt;type&lt;/b&gt;: int $numNewerVersions Relevant only for versioned objects. If&#10;the value is N, this condition is satisfied when there are at&#10;least N versions (including the live version) newer than this&#10;version of the object.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$storageClass&lt;/b&gt;: The target storage class. Values include `&quot;MULTI_REGIONAL&quot;`, `&quot;REGIONAL&quot;`, `&quot;NEARLINE&quot;`, `&quot;COLDLINE&quot;`, `&quot;STANDARD&quot;`, and `&quot;DURABLE_REDUCED_AVAILABILITY&quot;`.&#10;    array &lt;b&gt;$condition&lt;/b&gt;: { The condition(s) where the rule will apply.;;d4,216;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $storageClass;;parray $condition;;p;;x;;x">
</treenode>
<treenode node="clearRules;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;266;5;300;;;;vpos;;v;;aLifecycle;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearRules($action = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all Object Lifecycle rules or rules of a certain action type.&#10;Example:&#10;```&#10;// Remove all rules.&#10;$lifecycle-&gt;clearRules();s&#10;```&#10;```&#10;// Remove all &quot;Delete&quot; based rules.&#10;$lifecycle-&gt;clearRules(&apos;Delete&apos;);s&#10;```&#10;```&#10;// Clear any rules which have an age equal to 50.&#10;$lifecycle-&gt;clearRules(function (array $rule) {&#10;return $rule[&apos;condition&apos;][&apos;age&apos;] === 50&#10;? false&#10;: true;s&#10;});s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If a type other than a string or&#10;callabe is provided.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|callable &lt;b&gt;$action&lt;/b&gt;: [optional] If a string is provided, it must be the name of the type of rule to remove (`SetStorageClass` or `Delete`). All rules of this type will then be cleared. When providing a callable you may define a custom route for how you would like to remove rules. The provided callable will be run through [array_filter](http://php.net/manual/en/function.array-filter.php). The callable&apos;s argument will be a single lifecycle rule as an associative array. When returning true from the callable the rule will be preserved, and if false it will be removed. **Defaults to** `null`, clearing all assigned rules.;;d4,267;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|callable $action;;p;;x">
</treenode>
<treenode node="formatCondition;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f12;374;5;389;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatCondition(array $condition)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Apply condition-specific formatting rules (such as date formatting) to&#10;conditions.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$condition&lt;/b&gt;;;d4,375;;b3,0;;m0;;e0;;i0;;o;;k;;larray $condition;;p;;x">
</treenode>
<treenode node="getIterator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;306;5;315;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIterator()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private&#10;\Generator;;d4,307;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="offsetExists;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;341;5;344;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    offsetExists($offset)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$offset&lt;/b&gt;;;d4,342;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $offset;;p;;x">
</treenode>
<treenode node="offsetGet;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;360;5;365;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    offsetGet($offset)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$offset&lt;/b&gt;;;d4,361;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $offset;;p;;x">
</treenode>
<treenode node="offsetSet;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;331;5;334;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    offsetSet($offset, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$offset&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;;;d4,332;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $offset;;pmixed $value;;p;;x;;x">
</treenode>
<treenode node="offsetUnset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;350;5;353;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    offsetUnset($offset)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$offset&lt;/b&gt;;;d4,351;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $offset;;p;;x">
</treenode>
<treenode node="toArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Lifecycle.php;f11;321;5;324;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    toArray()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private;;d4,322;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="LimitStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f0;10;1;155;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LimitStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decorator used to return only a subset of a stream;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;27;5;35;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        StreamInterface $stream,&#10;        $limit = -1,&#10;        $offset = 0&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to wrap&#10;    int &lt;b&gt;$limit&lt;/b&gt;: Total number of bytes to allow to be read from the stream. Pass -1 for no limit.&#10;    int &lt;b&gt;$offset&lt;/b&gt;: Position to seek to before reading (only works on seekable streams).;;d6,31;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pint $limit;;pint $offset;;p;;x;;x;;x">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;37;5;50;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;56;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the size of the limited subset of data&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;138;5;154;;;;vpos;;v;;a;;r;;d4,139;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;71;5;90;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    seek($offset, $whence = SEEK_SET)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allow for a bounded seek on the read limited stream&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="setLimit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;133;5;136;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLimit($limit)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the limit of bytes that the decorator allows to be read from the&#10;stream.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$limit&lt;/b&gt;: Number of bytes to allow to be read from the stream. Use -1 for no limit.;;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;lint $limit;;p;;x">
</treenode>
<treenode node="setOffset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;108;5;124;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setOffset($offset)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the offset to start limiting from&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the stream cannot be seeked.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$offset&lt;/b&gt;: Offset to seek to and begin byte limiting from;;d4,109;;b1,0;;m0;;e0;;i0;;o;;k;;lint $offset;;p;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\LimitStream.php;f11;96;5;99;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    tell()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Give a relative tell()&#10;{&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="LineFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f0;23;1;195;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LineFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats incoming records into a one-line string&#10;This is especially useful for logging to files&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="SIMPLE_FORMAT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f16;25;30;25;;;;vpos;;v;;a;;r&quot;[%datetime%] %channel%.%level_name%: %message% %context% %extra%\n&quot;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;38;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(?string $format = null, ?string $dateFormat = null, bool $allowInlineLineBreaks = false, bool $ignoreEmptyContextAndExtra = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$format&lt;/b&gt;: The format of the message&#10;    string|null &lt;b&gt;$dateFormat&lt;/b&gt;: The format of the timestamp: one supported by DateTime::format&#10;    bool &lt;b&gt;$allowInlineLineBreaks&lt;/b&gt;: Whether to allow inline line breaks in log entries&#10;    bool &lt;b&gt;$ignoreEmptyContextAndExtra&lt;/b&gt;;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $format;;pstring|null $dateFormat;;pbool $allowInlineLineBreaks;;pbool $ignoreEmptyContextAndExtra;;p;;x;;x;;x;;x">
</treenode>
<treenode node="allowInlineLineBreaks;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;54;5;57;;;;vpos;;v;;a;;r;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;lallow;;p;;x">
</treenode>
<treenode node="convertToString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f14;141;5;152;;;;vpos;;v;;a string;;r;;d4,142;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;67;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;113;5;121;;;;vpos;;v;;a string;;r;;d4,114;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="formatException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f12;167;5;194;;;;vpos;;v;;a string;;r;;d4,168;;b3,0;;m0;;e0;;i0;;o;;k;;le;;p;;x">
</treenode>
<treenode node="ignoreEmptyContextAndExtra;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;59;5;62;;;;vpos;;v;;a;;r;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lignore;;p;;x">
</treenode>
<treenode node="includeStacktraces;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;46;5;52;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;linclude;;p;;x">
</treenode>
<treenode node="normalizeException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f14;128;5;139;;;;vpos;;v;;a string;;r;;d4,129;;b2,0;;m0;;e0;;i0;;o;;k;;le;;pdepth;;p;;x;;x">
</treenode>
<treenode node="replaceNewlines;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f14;154;5;165;;;;vpos;;v;;a string;;r;;d4,155;;b2,0;;m0;;e0;;i0;;o;;k;;lstr;;p;;x">
</treenode>
<treenode node="stringify;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LineFormatter.php;f11;123;5;126;;;;vpos;;v;;a string;;r;;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
</treenode>
<treenode node="Literal;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Literal.php;f0;7;1;10;;;;vpos;;v;;aAbstraction;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Literal extends Abstraction&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Description;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="LockTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockTrait.php;f0;22;1;79;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait LockTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Utility trait for locks.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="acquire;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockTrait.php;f20;36;57;36;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Acquires a lock that will block until released.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to be acquired.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockTrait.php;f20;43;38;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Releases the lock.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="synchronize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\LockTrait.php;f11;59;5;78;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    synchronize(callable $func, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Execute a callable within a lock. If an exception is caught during&#10;execution of the callable the lock will first be released before throwing&#10;it.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$func&lt;/b&gt;: The callable to execute.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $func;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="LogEntriesHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogEntriesHandler.php;f0;18;1;52;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogEntriesHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;author&lt;/b&gt;: Robert Kaufmann III &lt;rok3&#10;&lt;b&gt;rok3&lt;/b&gt;: .me&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogEntriesHandler.php;f11;34;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $token, bool $useSSL = true, $level = Logger::DEBUG, bool $bubble = true, string $host = &apos;data.logentries.com&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException If SSL encryption is set to true and OpenSSL is missing&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: Log token supplied by LogEntries&#10;    bool &lt;b&gt;$useSSL&lt;/b&gt;: Whether or not SSL encryption should be used.&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level to trigger this handler&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether or not messages that are handled should bubble up the stack.&#10;    string &lt;b&gt;$host&lt;/b&gt;: Custom hostname to send the data to if needed;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pbool $useSSL;;pstring|int $level;;pbool $bubble;;pstring $host;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogEntriesHandler.php;f14;48;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateDataStream(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="LogLevel;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f0;7;1;17;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogLevel&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Describes log levels.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ALERT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;10;15;10;;;;vpos;;v;;a;;r&apos;alert&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="CRITICAL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;11;18;11;;;;vpos;;v;;a;;r&apos;critical&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEBUG;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;16;15;16;;;;vpos;;v;;a;;r&apos;debug&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="EMERGENCY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;9;19;9;;;;vpos;;v;;a;;r&apos;emergency&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ERROR;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;12;15;12;;;;vpos;;v;;a;;r&apos;error&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="INFO;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;15;14;15;;;;vpos;;v;;a;;r&apos;info&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="NOTICE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;14;16;14;;;;vpos;;v;;a;;r&apos;notice&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="WARNING;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LogLevel.php;f9;13;17;13;;;;vpos;;v;;a;;r&apos;warning&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Logger;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f0;27;1;610;;;;vpos;;v;;aLoggerInterface;;cResettableInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Logger implements LoggerInterface, ResettableInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog log channel&#10;It contains a stack of Handlers and a stack of Processors,&#10;and uses them to store records that are added to it.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ALERT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;72;22;72;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Action must be taken immediately&#10;Example: Entire website down, database unavailable, etc.&#10;This should trigger the SMS alerts and wake you up.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="API;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;87;20;87;;;;vposint;;v;;a;;r2;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="CRITICAL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;64;25;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Critical conditions&#10;Example: Application component unavailable, unexpected exception.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEBUG;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;32;22;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detailed debug information;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="EMERGENCY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;77;26;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Urgent alert.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ERROR;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;57;22;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runtime errors;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="INFO;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;39;21;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interesting events&#10;Examples: User logs in, SQL logs.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="NOTICE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;44;23;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Uncommon events;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="WARNING;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f16;52;24;52;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exceptional occurrences that are not errors&#10;Examples: Use of deprecated APIs, poor use of an API,&#10;undesirable things that are not necessarily wrong.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;149;5;155;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $name, array $handlers = [], array $processors = [], ?DateTimeZone $timezone = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param array&lt;callable(array): array&gt; $processors&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The logging channel, a simple descriptive name that is attached to all log records&#10;    HandlerInterface[] &lt;b&gt;$handlers&lt;/b&gt;: Optional stack of handlers, the first one in the array is called first, etc.&#10;    callable[] &lt;b&gt;$processors&lt;/b&gt;: Optional array of processors&#10;    DateTimeZone|null &lt;b&gt;$timezone&lt;/b&gt;: Optional timezone, if not provided date_default_timezone_get() will be used;;d4,150;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pHandlerInterface[] $handlers;;pcallable[] $processors;;pDateTimeZone|null $timezone;;p;;x;;x;;x;;x">
</treenode>
<treenode node="addRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;279;5;327;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addRecord(int $level, string $message, array $context = []): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$level&lt;/b&gt;: The logging level&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Whether the record has been processed;;d4,280;;b1,0;;m0;;e0;;i0;;o;;k;;lint $level;;pstring $message;;pmixed[] $context;;p;;x;;x;;x">
</treenode>
<treenode node="alert;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;562;5;565;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    alert($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the ALERT level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,563;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;339;5;344;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Ends a log cycle and frees all resources used by handlers.&#10;Closing a Handler means flushing all buffers and freeing any open resources/handles.&#10;Handlers that have been closed should be able to accept log records again and re-open&#10;themselves on demand, but this may not always be possible depending on implementation.&#10;This is useful at the end of a request and will be called automatically on every handler&#10;when they get destructed.;;d4,340;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="critical;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;549;5;552;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    critical($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the CRITICAL level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,550;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="debug;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;484;5;487;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    debug($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the DEBUG level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,485;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="emergency;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;575;5;578;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    emergency($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the EMERGENCY level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,576;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="error;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;536;5;539;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    error($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the ERROR level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,537;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="getExceptionHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;455;42;455;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHandlers;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;217;5;220;;;;vpos;;v;;aHandlerInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandlers(): array&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,218;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLevelName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f18;386;5;393;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLevelName(int $level): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the name of the logging level.&#10;&lt;b&gt;throws&lt;/b&gt;: \Psr\Log\InvalidArgumentException If level is not defined;;d4,387;;b1,5;;m0;;e0;;i0;;o;;k;;llevel;;p;;x">
</treenode>
<treenode node="getLevels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f18;376;5;379;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLevels(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets all supported logging levels.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;string, int&gt; Assoc array with human-readable level names =&gt; level codes.;;d4,377;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;157;5;160;;;;vpos;;v;;a string;;r;;d4,158;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProcessors;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;250;5;253;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProcessors(): array&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,251;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTimezone;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;593;5;596;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getTimezone(): DateTimeZone&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the timezone to be used for the timestamp of log records.;;d4,594;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f14;602;5;609;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleException(Throwable $e, array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delegates exception management to the custom exception handler,&#10;or throws the exception if no custom handler is set.;;d4,603;;b2,0;;m0;;e0;;i0;;o;;k;;le;;precord;;p;;x;;x">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;497;5;500;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the INFO level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,498;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;428;5;441;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(int $level): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks whether the Logger has a handler that listens on the given level;;d4,429;;b1,0;;m0;;e0;;i0;;o;;k;;llevel;;p;;x">
</treenode>
<treenode node="log;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;469;5;474;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    log($level, $message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at an arbitrary level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$level&lt;/b&gt;: The log level&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,470;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $level;;pstring $message;;pmixed[] $context;;p;;x;;x;;x">
</treenode>
<treenode node="notice;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;510;5;513;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    notice($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the NOTICE level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,511;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="popHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;188;5;195;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    popHandler(): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Pops a handler from the stack&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException If empty handler stack;;d4,189;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="popProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;238;5;245;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    popProcessor(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes the processor on top of the stack and returns it.&#10;&lt;b&gt;throws&lt;/b&gt;: \LogicException If empty processor stack;;d4,239;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="pushHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;176;5;181;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pushHandler(HandlerInterface $handler): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Pushes a handler on to the stack.;;d4,177;;b1,0;;m0;;e0;;i0;;o;;k;;lhandler;;p;;x">
</treenode>
<treenode node="pushProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;225;5;230;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pushProcessor(callable $callback): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a processor on to the stack.;;d4,226;;b1,0;;m0;;e0;;i0;;o;;k;;lcallback;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;356;5;369;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reset(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Ends a log cycle and resets all handlers and processors to their initial state.&#10;Resetting a Handler or a Processor means flushing/cleaning all buffers, resetting internal&#10;state, and getting it back to a state in which it can receive log records again.&#10;This is useful in case you want to avoid logs leaking between two requests or jobs when you&#10;have a long running process like a worker or an application server serving multiple requests&#10;in one process.;;d4,357;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setExceptionHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;448;5;453;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setExceptionHandler(?callable $callback): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set a custom exception handler that will be called if adding a new record fails&#10;The callable will receive an exception object and the record that failed to be logged;;d4,449;;b1,0;;m0;;e0;;i0;;o;;k;;lcallback;;p;;x">
</treenode>
<treenode node="setHandlers;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;204;5;212;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setHandlers(array $handlers): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set handlers, replacing all existing ones.&#10;If a map is passed, keys will be ignored.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    HandlerInterface[] &lt;b&gt;$handlers&lt;/b&gt;;;d4,205;;b1,0;;m0;;e0;;i0;;o;;k;;lHandlerInterface[] $handlers;;p;;x">
</treenode>
<treenode node="setTimezone;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;583;5;588;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setTimezone(DateTimeZone $tz): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the timezone to be used for the timestamp of log records.;;d4,584;;b1,0;;m0;;e0;;i0;;o;;k;;ltz;;p;;x">
</treenode>
<treenode node="toMonologLevel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f18;401;5;423;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    toMonologLevel($level): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts PSR-3 levels to Monolog ones if necessary&#10;&lt;b&gt;throws&lt;/b&gt;: \Psr\Log\InvalidArgumentException If level is not defined&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: Level number (monolog) or name (PSR-3);;d4,402;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|int $level;;p;;x">
</treenode>
<treenode node="useMicrosecondTimestamps;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;266;5;269;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    useMicrosecondTimestamps(bool $micro): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Control the use of microsecond resolution timestamps in the &apos;datetime&apos;&#10;member of new records.&#10;As of PHP7.1 microseconds are always included by the engine, so&#10;there is no performance penalty and Monolog 2 enabled microseconds&#10;by default. This function lets you disable them though in case you want&#10;to suppress microseconds from the output.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$micro&lt;/b&gt;: True to use microtime() to create timestamps;;d4,267;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $micro;;p;;x">
</treenode>
<treenode node="warning;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;523;5;526;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    warning($message, array $context = []): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a log record at the WARNING level.&#10;This method allows for compatibility with common interfaces.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The log message&#10;    mixed[] &lt;b&gt;$context&lt;/b&gt;: The log context;;d4,524;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pmixed[] $context;;p;;x;;x">
</treenode>
<treenode node="withName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Logger.php;f11;165;5;171;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withName(string $name): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a new cloned instance with the name changed;;d4,166;;b1,0;;m0;;e0;;i0;;o;;k;;lname;;p;;x">
</treenode>
</treenode>
<treenode node="LoggerAwareTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerAwareTrait.php;f0;7;1;25;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait LoggerAwareTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Basic Implementation of LoggerAwareInterface.;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="setLogger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerAwareTrait.php;f11;21;5;24;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLogger(LoggerInterface $logger)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a logger.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LoggerInterface &lt;b&gt;$logger&lt;/b&gt;;;d4,22;;b1,0;;m0;;e0;;i0;;o;;k;;lLoggerInterface $logger;;p;;x">
</treenode>
</treenode>
<treenode node="LoggerInterfaceTest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f9;14;1;137;;;;vpos;;v;;aTestCase;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LoggerInterfaceTest extends TestCase&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a base test class for ensuring compliance with the LoggerInterface.&#10;Implementors can extend the class and implement abstract methods to run this&#10;as part of their test suite.;;d0,15;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getLogger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f20;19;40;19;;;;vpos;;v;;aLoggerInterface;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLogs;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f20;30;38;30;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This must return the log messages in order.&#10;The simple formatting of the messages is: &quot;&lt;LOG LEVEL&gt; &lt;MESSAGE&gt;&quot;.&#10;Example -&gt;error(&apos;Foo&apos;) would yield &quot;error Foo&quot;.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="provideLevelsAndMessages;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;53;5;65;;;;vpos;;v;;a;;r;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testContextCanContainAnything;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;102;5;123;;;;vpos;;v;;a;;r;;d4,103;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testContextExceptionKeyCanBeExceptionOrOtherValues;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;125;5;136;;;;vpos;;v;;a;;r;;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testContextReplacement;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;76;5;83;;;;vpos;;v;;a;;r;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testImplements;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testLogsAtAllLevels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;40;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testLogsAtAllLevels($level, $message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: provideLevelsAndMessages;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;llevel;;pmessage;;p;;x;;x">
</treenode>
<treenode node="testObjectCastToString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;85;5;100;;;;vpos;;v;;a;;r;;d4,86;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testThrowsOnInvalidLevel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\LoggerInterfaceTest.php;f11;70;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testThrowsOnInvalidLevel()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;expectedException&lt;/b&gt;: \Psr\Log\InvalidArgumentException;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="LoggerTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f0;12;1;141;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait LoggerTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This is a simple Logger trait that classes unable to extend AbstractLogger&#10;(because they extend another class, etc) can include.&#10;It simply delegates all log-level-specific methods to the `log` method to&#10;reduce boilerplate code that a simple Logger that does the same thing with&#10;messages regardless of the error level has to implement.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="alert;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;38;5;41;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    alert($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Action must be taken immediately.&#10;Example: Entire website down, database unavailable, etc. This should&#10;trigger the SMS alerts and wake you up.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="critical;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;53;5;56;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    critical($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Critical conditions.&#10;Example: Application component unavailable, unexpected exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="debug;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;124;5;127;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    debug($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detailed debug information.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,125;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="emergency;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;22;5;25;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    emergency($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    System is unusable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,23;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="error;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;67;5;70;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    error($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runtime errors that do not require immediate action but should typically&#10;be logged and monitored.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;111;5;114;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Interesting events.&#10;Example: User logs in, SQL logs.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,112;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="log;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f20;140;76;140;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs with an arbitrary level.&#10;&lt;b&gt;throws&lt;/b&gt;: \Psr\Log\InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$level&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $level;;pstring $message;;parray $context;;p;;x;;x;;x">
</treenode>
<treenode node="notice;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;96;5;99;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    notice($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normal but significant events.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
<treenode node="warning;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\LoggerTrait.php;f11;83;5;86;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    warning($message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exceptional occurrences that are not errors.&#10;Example: Use of deprecated APIs, poor use of an API, undesirable things&#10;that are not necessarily wrong.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;parray $context;;p;;x;;x">
</treenode>
</treenode>
<treenode node="LogglyFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogglyFormatter.php;f0;18;1;44;;;;vpos;;v;;aJsonFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogglyFormatter extends JsonFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encodes message information into JSON in a format compatible with Loggly.&#10;&lt;b&gt;author&lt;/b&gt;: Adam Pancutt &lt;adam&#10;&lt;b&gt;pancutt&lt;/b&gt;: .com&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogglyFormatter.php;f11;24;5;27;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(int $batchMode = self::BATCH_MODE_NEWLINES, bool $appendNewline = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Overrides the default batch mode to new lines for compatibility with the&#10;Loggly bulk API.;;d4,25;;b1,0;;m0;;e0;;i0;;o;;k;;lbatchMode;;pappendNewline;;p;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogglyFormatter.php;f11;35;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Appends the &apos;timestamp&apos; parameter for indexing by Loggly.&#10;&lt;b&gt;see&lt;/b&gt;: https://www.loggly.com/docs/automated-parsing/#json&#10;&lt;b&gt;see&lt;/b&gt;: \Monolog\Formatter\JsonFormatter::format();;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="LogglyHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f0;26;1;159;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogglyHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends errors to Loggly.&#10;&lt;b&gt;author&lt;/b&gt;: Przemek Sobstel &lt;przemek&#10;&lt;b&gt;sobstel&lt;/b&gt;: .org&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Adam Pancutt &lt;adam&#10;&lt;b&gt;pancutt&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Gregory Barchard &lt;gregory&#10;&lt;b&gt;barchard&lt;/b&gt;: .net&gt;;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ENDPOINT_BATCH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f19;30;34;30;;;;vpos;;v;;a;;r&apos;bulk&apos;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ENDPOINT_SINGLE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f19;29;35;29;;;;vpos;;v;;a;;r&apos;inputs&apos;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="HOST;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f19;28;24;28;;;;vpos;;v;;a;;r&apos;logs-01.loggly.com&apos;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f11;50;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $token, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException If the curl extension is missing&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: API token supplied by Loggly&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level to trigger this handler&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether or not messages that are handled should bubble up the stack.;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="addTag;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f11;111;5;119;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addTag($tag): self&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[]|string &lt;b&gt;$tag&lt;/b&gt;;;d4,112;;b1,0;;m0;;e0;;i0;;o;;k;;lstring[]|string $tag;;p;;x">
</treenode>
<treenode node="getCurlHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f14;68;5;75;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCurlHandler(string $endpoint)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Loads and returns the shared curl handler for the given endpoint.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$endpoint&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |CurlHandle;;d4,69;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $endpoint;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f14;155;5;158;;;;vpos;;v;;a FormatterInterface;;r;;d4,156;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f11;126;5;137;;;;vpos;;v;;a void;;r;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="loadCurlHandle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f12;84;5;95;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    loadCurlHandle(string $endpoint)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Starts a fresh curl session for the given endpoint and returns its handler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$endpoint&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |CurlHandle;;d4,85;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $endpoint;;p;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f14;139;5;153;;;;vpos;;v;;a void;;r;;d4,140;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;pendpoint;;p;;x;;x">
</treenode>
<treenode node="setTag;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f11;100;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setTag($tag): self&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[]|string &lt;b&gt;$tag&lt;/b&gt;;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lstring[]|string $tag;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogglyHandler.php;f14;121;5;124;;;;vpos;;v;;a void;;r;;d4,122;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="LogmaticFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogmaticFormatter.php;f0;18;1;65;;;;vpos;;v;;aJsonFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogmaticFormatter extends JsonFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encodes message information into JSON in a format compatible with Logmatic.&#10;&lt;b&gt;author&lt;/b&gt;: Julien Breux &lt;julien.breux&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="MARKERS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogmaticFormatter.php;f19;20;27;20;;;;vpos;;v;;a;;r[&quot;sourcecode&quot;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogmaticFormatter.php;f11;52;5;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Appends the &apos;hostname&apos; and &apos;appname&apos; parameter for indexing by Logmatic.&#10;&lt;b&gt;see&lt;/b&gt;: http://doc.logmatic.io/docs/basics-to-send-data&#10;&lt;b&gt;see&lt;/b&gt;: \Monolog\Formatter\JsonFormatter::format();;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="setAppname;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogmaticFormatter.php;f11;39;5;44;;;;vpos;;v;;a self;;r;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lappname;;p;;x">
</treenode>
<treenode node="setHostname;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogmaticFormatter.php;f11;32;5;37;;;;vpos;;v;;a self;;r;;d4,33;;b1,0;;m0;;e0;;i0;;o;;k;;lhostname;;p;;x">
</treenode>
</treenode>
<treenode node="LogmaticHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogmaticHandler.php;f0;20;1;87;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogmaticHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;author&lt;/b&gt;: Julien Breux &lt;julien.breux&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogmaticHandler.php;f11;47;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $token, string $hostname = &apos;&apos;, string $appname = &apos;&apos;, bool $useSSL = true, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException If SSL encryption is set to true and OpenSSL is missing&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: Log token supplied by Logmatic.&#10;    string &lt;b&gt;$hostname&lt;/b&gt;: Host name supplied by Logmatic.&#10;    string &lt;b&gt;$appname&lt;/b&gt;: Application name supplied by Logmatic.&#10;    bool &lt;b&gt;$useSSL&lt;/b&gt;: Whether or not SSL encryption should be used.&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level to trigger this handler.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether or not messages that are handled should bubble up the stack.;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pstring $hostname;;pstring $appname;;pbool $useSSL;;pint|string $level;;pbool $bubble;;p;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogmaticHandler.php;f14;66;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateDataStream(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,67;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\LogmaticHandler.php;f14;74;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,75;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="LogstashFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogstashFormatter.php;f0;21;1;100;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LogstashFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Serializes a log message to Logstash Event Format&#10;&lt;b&gt;see&lt;/b&gt;: https://www.elastic.co/products/logstash&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/elastic/logstash/blob/master/logstash-core/src/main/java/org/logstash/Event.java&#10;&lt;b&gt;author&lt;/b&gt;: Tim Mower &lt;timothy.mower&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogstashFormatter.php;f11;49;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $applicationName, ?string $systemName = null, string $extraKey = &apos;extra&apos;, string $contextKey = &apos;context&apos;)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$applicationName&lt;/b&gt;: The application that sends the data, used as the &quot;type&quot; field of logstash&#10;    string|null &lt;b&gt;$systemName&lt;/b&gt;: The system/machine name, used as the &quot;source&quot; field of logstash, defaults to the hostname of the machine&#10;    string &lt;b&gt;$extraKey&lt;/b&gt;: The key for extra keys inside logstash &quot;fields&quot;, defaults to extra&#10;    string &lt;b&gt;$contextKey&lt;/b&gt;: The key for context keys inside logstash &quot;fields&quot;, defaults to context;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $applicationName;;pstring|null $systemName;;pstring $extraKey;;pstring $contextKey;;p;;x;;x;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\LogstashFormatter.php;f11;63;5;99;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,64;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="LongRunningOperation;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f0;22;1;380;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class LongRunningOperation&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represent and interact with a Long Running Operation.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="STATE_ERROR;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f9;28;21;28;;;;vpos;;v;;a;;r&apos;error&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="STATE_IN_PROGRESS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f9;26;27;26;;;;vpos;;v;;a;;r&apos;inProgress&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="STATE_SUCCESS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f9;27;23;27;;;;vpos;;v;;a;;r&apos;success&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="WAIT_INTERVAL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f9;24;23;24;;;;vpos;;v;;a;;r1.0;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;70;5;80;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        LongRunningConnectionInterface $connection,&#10;        $name,&#10;        array $callablesMap,&#10;        array $info = []&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LongRunningConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: An implementation mapping to methods which handle LRO resolution in the service.&#10;    string &lt;b&gt;$name&lt;/b&gt;: The Operation name.&#10;    array &lt;b&gt;$callablesMap&lt;/b&gt;: An collection of form [(string) typeUrl, (callable) callable] providing a function to invoke when an operation completes. The callable Type should correspond to an expected value of operation.metadata.typeUrl.&#10;    array &lt;b&gt;$info&lt;/b&gt;: [optional] The operation info.;;d6,75;;b1,0;;m0;;e0;;i0;;o;;k;;lLongRunningConnectionInterface $connection;;pstring $name;;parray $callablesMap;;parray $info;;p;;x;;x;;x;;x">
</treenode>
<treenode node="__debugInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;371;5;379;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __debugInfo()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;access&lt;/b&gt;: private;;d4,372;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;315;5;320;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cancel(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cancel a Long Running Operation.&#10;Example:&#10;```&#10;$operation-&gt;cancel();s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration options.;;d4,316;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;333;5;338;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delete a Long Running Operation.&#10;Example:&#10;```&#10;$operation-&gt;delete();s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration Options.;;d4,334;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="done;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;113;5;118;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    done(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if the Operation is done.&#10;If the Operation state is not available, a service request may be executed&#10;by this method.&#10;Example:&#10;```&#10;if ($operation-&gt;done()) {&#10;echo &quot;The operation is done!&quot;;s&#10;}&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.;;d4,114;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="error;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;203;5;207;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    error(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the Operation error.&#10;Returns null if the Operation is not yet complete, or if no error occurred.&#10;If the Operation state is not available, a service request may be executed&#10;by this method.&#10;Example:&#10;```&#10;$error = $operation-&gt;error();s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,204;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="executeDoneCallback;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f12;348;5;366;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    executeDoneCallback($type, $response)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    When the Operation is complete, there may be a callback enqueued to&#10;handle the response. If so, execute it and return the result.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$type&lt;/b&gt;: The response type.&#10;    mixed &lt;b&gt;$response&lt;/b&gt;: The response data.;;d4,349;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $type;;pmixed $response;;p;;x;;x">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;225;5;228;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the Operation info.&#10;If the Operation state is not available, a service request may be executed&#10;by this method.&#10;Example:&#10;```&#10;$info = $operation-&gt;info();s&#10;```&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [google.longrunning.Operation](https://cloud.google.com/spanner/docs/reference/rpc/google.longrunning#google.longrunning.Operation);;d4,226;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="name;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;92;5;95;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    name()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the Operation name.&#10;Example:&#10;```&#10;$name = $operation-&gt;name();s&#10;```;;d4,93;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="pollUntilComplete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;284;5;302;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pollUntilComplete(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reload the operation until it is complete.&#10;The return type of this method is dictated by the type of Operation. If&#10;`$options.maxPollingDurationSeconds` is set, and the poll exceeds the&#10;limit, the return will be `null`.&#10;Example:&#10;```&#10;$result = $operation-&gt;pollUntilComplete();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: float $pollingIntervalSeconds The polling interval to use, in&#10;seconds. **Defaults to** `1.0`.&#10;&lt;b&gt;type&lt;/b&gt;: float $maxPollingDurationSeconds The maximum amount of time to&#10;continue polling. **Defaults to** `0.0`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,285;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;243;5;260;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reload the Operation to check its status.&#10;Example:&#10;```&#10;$result = $operation-&gt;reload();s&#10;```&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration Options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [google.longrunning.Operation](https://cloud.google.com/spanner/docs/reference/rpc/google.longrunning#google.longrunning.Operation);;d4,244;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="result;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;181;5;185;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    result(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the Operation result.&#10;The return type of this method is dictated by the type of Operation.&#10;Returns null if the Operation is not yet complete, or if an error occurred.&#10;If the Operation state is not available, a service request may be executed&#10;by this method.&#10;Example:&#10;```&#10;$result = $operation-&gt;result();s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,182;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="state;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\LongRunningOperation.php;f11;150;5;161;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    state(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the state of the Operation.&#10;Return value will be one of `LongRunningOperation::STATE_IN_PROGRESS`,&#10;`LongRunningOperation::STATE_SUCCESS` or&#10;`LongRunningOperation::STATE_ERROR`.&#10;If the Operation state is not available, a service request may be executed&#10;by this method.&#10;Example:&#10;```&#10;switch ($operation-&gt;state()) {&#10;case LongRunningOperation::STATE_IN_PROGRESS:&#10;echo &quot;Operation is in progress&quot;;s&#10;break;s&#10;case LongRunningOperation::STATE_SUCCESS:&#10;echo &quot;Operation succeeded&quot;;s&#10;break;s&#10;case LongRunningOperation::STATE_ERROR:&#10;echo &quot;Operation failed&quot;;s&#10;break;s&#10;}&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
</treenode>
<treenode node="MailHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f9;21;1;84;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MailHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Base class for all mail handlers&#10;&lt;b&gt;author&lt;/b&gt;: Gyula Sallai;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f14;80;5;83;;;;vpos;;v;;aFormatterInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the default formatter.;;d4,81;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHighestRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f14;58;5;68;;;;vpos;;v;;a array;;r;;d4,59;;b2,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f11;26;5;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="isHtmlBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f14;70;5;73;;;;vpos;;v;;a bool;;r;;d4,71;;b2,0;;m0;;e0;;i0;;o;;k;;lbody;;p;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f23;48;75;48;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send a mail with the given content&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$content&lt;/b&gt;: formatted email body to be sent&#10;    array &lt;b&gt;$records&lt;/b&gt;: the array of log records that formed this content;;d-1,-1;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $content;;parray $records;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MailHandler.php;f14;53;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,54;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="MandrillHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MandrillHandler.php;f0;22;1;84;;;;vpos;;v;;aMailHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MandrillHandler extends MailHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    MandrillHandler uses cURL to send the emails to the Mandrill API&#10;&lt;b&gt;author&lt;/b&gt;: Adam Nicholson &lt;adamnicholson10&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MandrillHandler.php;f11;37;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $apiKey, $message, $level = Logger::ERROR, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param Swift_Message|callable(): Swift_Message $message&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$apiKey&lt;/b&gt;: A valid Mandrill API key&#10;    callable|Swift_Message &lt;b&gt;$message&lt;/b&gt;: An example message for real messages, only the body will be replaced&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $apiKey;;pcallable|Swift_Message $message;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MandrillHandler.php;f14;54;5;83;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(string $content, array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,55;;b2,0;;m0;;e0;;i0;;o;;k;;lcontent;;precords;;p;;x;;x">
</treenode>
</treenode>
<treenode node="MemoryCacheItemPool;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f6;25;1;153;;;;vpos;;v;;aCacheItemPoolInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MemoryCacheItemPool implements CacheItemPoolInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Simple in-memory cache implementation.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;72;5;78;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,73;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="commit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;125;5;134;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    commit()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="deleteItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;83;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteItem($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="deleteItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;91;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteItems(array $keys)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;lkeys;;p;;x">
</treenode>
<treenode node="getItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;40;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getItem($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;48;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getItems(array $keys = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lkeys;;p;;x">
</treenode>
<treenode node="hasItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;62;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasItem($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="isValidKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f12;143;5;152;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isValidKey($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if the provided key is valid.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;;;d4,144;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;105;5;110;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    save(CacheItemInterface $item)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;litem;;p;;x">
</treenode>
<treenode node="saveDeferred;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\MemoryCacheItemPool.php;f11;115;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    saveDeferred(CacheItemInterface $item)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;litem;;p;;x">
</treenode>
</treenode>
<treenode node="MemoryPeakUsageProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryPeakUsageProcessor.php;f0;19;1;33;;;;vpos;;v;;aMemoryProcessor;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MemoryPeakUsageProcessor extends MemoryProcessor&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects memory_get_peak_usage in all records&#10;&lt;b&gt;see&lt;/b&gt;: Monolog\Processor\MemoryProcessor::__construct() for options&#10;&lt;b&gt;author&lt;/b&gt;: Rob Jensen;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryPeakUsageProcessor.php;f11;21;5;32;;;;vpos;;v;;a array;;r;;d4,22;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="MemoryProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryProcessor.php;f9;18;1;60;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MemoryProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Some methods that are common for all memory processors&#10;&lt;b&gt;author&lt;/b&gt;: Rob Jensen;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryProcessor.php;f11;34;5;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(bool $realUsage = true, bool $useFormatting = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$realUsage&lt;/b&gt;: Set this to true to get the real size of memory allocated from system.&#10;    bool &lt;b&gt;$useFormatting&lt;/b&gt;: If true, then format memory size to human readable string (MB, KB, B depending on size);;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $realUsage;;pbool $useFormatting;;p;;x;;x">
</treenode>
<treenode node="formatBytes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryProcessor.php;f14;46;5;59;;;;vpos;;v;;astring|int;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBytes(int $bytes)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats bytes into a human readable string if $this-&gt;useFormatting is true, otherwise return $bytes as is&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$bytes&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Formatted string if $this-&gt;useFormatting is true, otherwise return $bytes as int;;d4,47;;b2,0;;m0;;e0;;i0;;o;;k;;lint $bytes;;p;;x">
</treenode>
</treenode>
<treenode node="MemoryUsageProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryUsageProcessor.php;f0;19;1;33;;;;vpos;;v;;aMemoryProcessor;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MemoryUsageProcessor extends MemoryProcessor&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects memory_get_usage in all records&#10;&lt;b&gt;see&lt;/b&gt;: Monolog\Processor\MemoryProcessor::__construct() for options&#10;&lt;b&gt;author&lt;/b&gt;: Rob Jensen;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MemoryUsageProcessor.php;f11;21;5;32;;;;vpos;;v;;a array;;r;;d4,22;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="MercurialProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MercurialProcessor.php;f0;20;1;62;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MercurialProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects Hg branch and Hg revision number in all records&#10;&lt;b&gt;author&lt;/b&gt;: Jonathan A. Schweder &lt;jonathanschweder&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MercurialProcessor.php;f11;28;5;31;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this Processor will be triggered;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MercurialProcessor.php;f11;33;5;43;;;;vpos;;v;;a array;;r;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getMercurialInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\MercurialProcessor.php;f19;45;5;61;;;;vpos;;v;;a array;;r;;d4,46;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Message;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f6;8;1;251;;;;vpos;;v;;a;;r;;d0,9;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="bodySummary;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;57;5;85;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    bodySummary(MessageInterface $message, $truncateAt = 120)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a short summary of the message body.&#10;Will return `null` if the response is not printable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    MessageInterface &lt;b&gt;$message&lt;/b&gt;: The message to get the body summary&#10;    int &lt;b&gt;$truncateAt&lt;/b&gt;: The maximum allowed size of the summary&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,58;;b1,5;;m0;;e0;;i0;;o;;k;;lMessageInterface $message;;pint $truncateAt;;p;;x;;x">
</treenode>
<treenode node="parseMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;117;5;170;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseMessage($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses an HTTP message into an associative array.&#10;The array contains the &quot;start-line&quot; key containing the start line of&#10;the message, &quot;headers&quot; key containing an associative array of header&#10;array values, and a &quot;body&quot; key containing the body of the message.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: HTTP request or response to parse.;;d4,118;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="parseRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;204;5;223;;;;vpos;;v;;aRequest;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseRequest($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses a request message string into a request object.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: Request message string.;;d4,205;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="parseRequestUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;180;5;195;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseRequestUri($path, array $headers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Constructs a URI for an HTTP request message.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: Path from the start-line&#10;    array &lt;b&gt;$headers&lt;/b&gt;: Array of headers (each value an array).;;d4,181;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $path;;parray $headers;;p;;x;;x">
</treenode>
<treenode node="parseResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;232;5;250;;;;vpos;;v;;aResponse;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseResponse($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses a response message string into a response object.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: Response message string.;;d4,233;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="rewindBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;97;5;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rewindBody(MessageInterface $message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attempts to rewind a message body and throws an exception on failure.&#10;The body of the message will only be rewound if a call to `tell()`&#10;returns a value other than `0`.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    MessageInterface &lt;b&gt;$message&lt;/b&gt;: Message to rewind;;d4,98;;b1,5;;m0;;e0;;i0;;o;;k;;lMessageInterface $message;;p;;x">
</treenode>
<treenode node="toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Message.php;f18;17;5;45;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    toString(MessageInterface $message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the string representation of an HTTP message.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    MessageInterface &lt;b&gt;$message&lt;/b&gt;: Message to convert to a string.;;d4,18;;b1,5;;m0;;e0;;i0;;o;;k;;lMessageInterface $message;;p;;x">
</treenode>
</treenode>
<treenode node="MessageFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f0;37;1;197;;;;vpos;;v;;aMessageFormatterInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MessageFormatter implements MessageFormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats log messages using variable substitutions for requests, responses,&#10;and other transactional data.&#10;The following variable substitutions are supported:&#10;- {request}:        Full HTTP request message&#10;- {response}:       Full HTTP response message&#10;- {ts}:             ISO 8601 date in GMT&#10;- {date_iso_8601}   ISO 8601 date in GMT&#10;- {date_common_log} Apache common log date using the configured timezone.&#10;- {host}:           Host of the request&#10;- {method}:         Method of the request&#10;- {uri}:            URI of the request&#10;- {version}:        Protocol version&#10;- {target}:         Request target of the request (path + query + fragment)&#10;- {hostname}:       Hostname of the machine that sent the request&#10;- {code}:           Status code of the response (if available)&#10;- {phrase}:         Reason phrase of the response  (if available)&#10;- {error}:          Any error messages (if available)&#10;- {req_header_*}:   Replace `*` with the lowercased name of a request header to add to the message&#10;- {res_header_*}:   Replace `*` with the lowercased name of a response header to add to the message&#10;- {req_headers}:    Request headers&#10;- {res_headers}:    Response headers&#10;- {req_body}:       Request body&#10;- {res_body}:       Response body&#10;&lt;b&gt;final&lt;/b&gt;;;d0,38;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="CLF;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f16;46;20;46;;;;vposstring;;v;;a;;r&quot;{hostname} {req_header_User-Agent} - [{date_common_log}] \&quot;{method} {target} HTTP/{version}\&quot; {code} {res_header_Content-Length}&quot;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEBUG;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f16;47;22;47;;;;vpos;;v;;a;;r&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n{request}\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n{response}\n--------\n{error}&quot;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SHORT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f16;48;22;48;;;;vpos;;v;;a;;r&apos;[{ts}] &quot;{method} {target} HTTP/{version}&quot; {code}&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f11;58;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(?string $template = self::CLF)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$template&lt;/b&gt;: Log message template;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $template;;p;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f11;70;5;183;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(RequestInterface $request, ?ResponseInterface $response = null, ?\Throwable $error = null): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a formatted message string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request that was sent&#10;    ResponseInterface|null &lt;b&gt;$response&lt;/b&gt;: Response that was received&#10;    \Throwable|null &lt;b&gt;$error&lt;/b&gt;: Exception that was received;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;pResponseInterface|null $response;;p\Throwable|null $error;;p;;x;;x;;x">
</treenode>
<treenode node="headers;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\MessageFormatter.php;f12;188;5;196;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headers(MessageInterface $message): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get headers from message as string;;d4,189;;b3,0;;m0;;e0;;i0;;o;;k;;lmessage;;p;;x">
</treenode>
</treenode>
<treenode node="MessageTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f0;9;1;213;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait MessageTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Trait implementing functionality common to requests and responses.;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="assertHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f12;200;5;212;;;;vpos;;v;;a;;r;;d4,201;;b3,0;;m0;;e0;;i0;;o;;k;;lheader;;p;;x">
</treenode>
<treenode node="getBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;117;5;124;;;;vpos;;v;;a;;r;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;49;5;60;;;;vpos;;v;;a;;r;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lheader;;p;;x">
</treenode>
<treenode node="getHeaderLine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;62;5;65;;;;vpos;;v;;a;;r;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;lheader;;p;;x">
</treenode>
<treenode node="getHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;39;5;42;;;;vpos;;v;;a;;r;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProtocolVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;23;5;26;;;;vpos;;v;;a;;r;;d4,24;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;44;5;47;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;lheader;;p;;x">
</treenode>
<treenode node="normalizeHeaderValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f12;159;5;170;;;;vpos;;v;;a;;r;;d4,160;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="setHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f12;137;5;157;;;;vpos;;v;;a;;r;;d4,138;;b3,0;;m0;;e0;;i0;;o;;k;;lheaders;;p;;x">
</treenode>
<treenode node="trimHeaderValues;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f12;186;5;198;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trimHeaderValues(array $values)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Trims whitespace from the header values.&#10;Spaces and tabs ought to be excluded by parsers when extracting the field value from a header field.&#10;header-field = field-name &quot;:&quot; OWS field-value OWS&#10;OWS          = *( SP / HTAB )&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc7230#section-3.2.4&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string[] &lt;b&gt;$values&lt;/b&gt;: Header values&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [] Trimmed header values;;d4,187;;b3,0;;m0;;e0;;i0;;o;;k;;lstring[] $values;;p;;x">
</treenode>
<treenode node="withAddedHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;83;5;99;;;;vpos;;v;;a;;r;;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;lheader;;pvalue;;p;;x;;x">
</treenode>
<treenode node="withBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;126;5;135;;;;vpos;;v;;a;;r;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;lbody;;p;;x">
</treenode>
<treenode node="withHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;67;5;81;;;;vpos;;v;;a;;r;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;lheader;;pvalue;;p;;x;;x">
</treenode>
<treenode node="withProtocolVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;28;5;37;;;;vpos;;v;;a;;r;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;lversion;;p;;x">
</treenode>
<treenode node="withoutHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MessageTrait.php;f11;101;5;115;;;;vpos;;v;;a;;r;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;lheader;;p;;x">
</treenode>
</treenode>
<treenode node="Metadata;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f0;41;1;164;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Metadata&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A library for accessing the Google Compute Engine (GCE) metadata.&#10;The metadata is available from Google Compute Engine instances and&#10;App Engine Managed VMs instances.&#10;Example:&#10;```&#10;use Google\Cloud\Core\Compute\Metadata;s&#10;$metadata = new Metadata();s&#10;$projectId = $metadata-&gt;getProjectId();s&#10;```&#10;```&#10;// It is easy to get any metadata from a project.&#10;$val = $metadata-&gt;getProjectMetadata($key);s&#10;```;;d0,42;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;61;5;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ReaderInterface $reader = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ReaderInterface &lt;b&gt;$reader&lt;/b&gt;: [optional] A metadata reader implementation.;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;lReaderInterface $reader;;p;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;88;5;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch a metadata item by its path&#10;Example:&#10;```&#10;$projectId = $metadata-&gt;get(&apos;project/project-id&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The path of the item to retrieve.;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="getInstanceMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;159;5;163;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstanceMetadata($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch an item from the instance metadata&#10;Example:&#10;```&#10;$foo = $metadata-&gt;getInstanceMetadata(&apos;foo&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;: The instance metadata key;;d4,160;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="getNumericProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;122;5;129;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getNumericProjectId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detect and return the numeric project ID&#10;Example:&#10;```&#10;$projectId = $metadata-&gt;getNumericProjectId();s&#10;```;;d4,123;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;103;5;110;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detect and return the project ID&#10;Example:&#10;```&#10;$projectId = $metadata-&gt;getProjectId();s&#10;```;;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;142;5;146;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectMetadata($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch an item from the project metadata&#10;Example:&#10;```&#10;$foo = $metadata-&gt;getProjectMetadata(&apos;foo&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;: The metadata key;;d4,143;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $key;;p;;x">
</treenode>
<treenode node="setReader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata.php;f11;73;5;76;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setReader(ReaderInterface $reader)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Replace the default reader implementation&#10;&lt;b&gt;deprecated&lt;/b&gt;: If a custom reader implementation is desired, provide it at&#10;construction.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ReaderInterface &lt;b&gt;$reader&lt;/b&gt;: The reader implementation;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;lReaderInterface $reader;;p;;x">
</treenode>
</treenode>
<treenode node="MetadataProviderUtils;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderUtils.php;f0;22;1;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MetadataProviderUtils&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Utility class for MetadataProvider.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="autoSelect;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\MetadataProviderUtils.php;f18;30;5;39;;;;vpos;;v;;aMetadataProviderInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    autoSelect($server)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Automatically choose the most appropriate MetadataProvider and return it.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$server&lt;/b&gt;: Normally pass the $_SERVER.;;d4,31;;b1,5;;m0;;e0;;i0;;o;;k;;larray $server;;p;;x">
</treenode>
</treenode>
<treenode node="Middleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f6;15;1;259;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Middleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Functions used to create and wrap handlers with handler middleware.;;d0,16;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="cookies;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;25;5;45;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cookies(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that adds cookies to requests.&#10;The options array must be set to a CookieJarInterface in order to use&#10;cookies. This is typically handled for you by a client.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a function that accepts the next handler.;;d4,26;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="history;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;84;5;114;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    history(&amp;$container): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that pushes history data to an ArrayAccess container.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if container is not an array or ArrayAccess.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array|\ArrayAccess&lt;int,: array&gt; $container Container to hold the history (by reference).&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (callable): callable Returns a function that accepts the next handler.;;d4,85;;b1,5;;m0;;e0;;i0;;o;;k;;larray|\ArrayAccess&lt;int,;;p;;x">
</treenode>
<treenode node="httpErrors;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;55;5;73;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    httpErrors(BodySummarizerInterface $bodySummarizer = null): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that throws exceptions for 4xx or 5xx responses when the&#10;&quot;http_error&quot; request option is set to true.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    BodySummarizerInterface|null &lt;b&gt;$bodySummarizer&lt;/b&gt;: The body summarizer to use in exception messages.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (callable): callable Returns a function that accepts the next handler.;;d4,56;;b1,5;;m0;;e0;;i0;;o;;k;;lBodySummarizerInterface|null $bodySummarizer;;p;;x">
</treenode>
<treenode node="log;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;191;5;215;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    log(LoggerInterface $logger, $formatter, string $logLevel = &apos;info&apos;): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that logs requests, responses, and errors using a message&#10;formatter.&#10;&lt;b&gt;phpstan&lt;/b&gt;: -param \Psr\Log\LogLevel::* $logLevel  Level at which to log requests.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LoggerInterface &lt;b&gt;$logger&lt;/b&gt;: Logs messages.&#10;    MessageFormatterInterface|MessageFormatter &lt;b&gt;$formatter&lt;/b&gt;: Formatter used to create message strings.&#10;    string &lt;b&gt;$logLevel&lt;/b&gt;: Level at which to log requests.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a function that accepts the next handler.;;d4,192;;b1,5;;m0;;e0;;i0;;o;;k;;lLoggerInterface $logger;;pMessageFormatterInterface|MessageFormatter $formatter;;pstring $logLevel;;p;;x;;x;;x">
</treenode>
<treenode node="mapRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;235;5;242;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mapRequest(callable $fn): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that applies a map function to the request before passing to&#10;the next handler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$fn&lt;/b&gt;: Function that accepts a RequestInterface and returns a RequestInterface.;;d4,236;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $fn;;p;;x">
</treenode>
<treenode node="mapResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;251;5;258;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mapResponse(callable $fn): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that applies a map function to the resolved promise&apos;s&#10;response.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$fn&lt;/b&gt;: Function that accepts a ResponseInterface and returns a ResponseInterface.;;d4,252;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $fn;;p;;x">
</treenode>
<treenode node="prepareBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;221;5;226;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    prepareBody(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This middleware adds a default content-type if possible, a default&#10;content-length or transfer-encoding header, and the expect header.;;d4,222;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="redirect;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;150;5;155;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    redirect(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that handles request redirects.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a function that accepts the next handler.;;d4,151;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="retry;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;172;5;177;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    retry(callable $decider, callable $delay = null): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that retries requests based on the boolean result of&#10;invoking the provided &quot;decider&quot; function.&#10;If no delay function is provided, a simple implementation of exponential&#10;backoff will be utilized.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$decider&lt;/b&gt;: Function that accepts the number of retries, a request, [response], and [exception] and returns true if the request is to be retried.&#10;    callable &lt;b&gt;$delay&lt;/b&gt;: Function that accepts the number of retries and returns the number of milliseconds to delay.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a function that accepts the next handler.;;d4,173;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $decider;;pcallable $delay;;p;;x;;x">
</treenode>
<treenode node="tap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Middleware.php;f18;129;5;143;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    tap(callable $before = null, callable $after = null): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that invokes a callback before and after sending a request.&#10;The provided listener cannot modify or alter the response. It simply&#10;&quot;taps&quot; into the chain to be notified before returning the promise. The&#10;before listener accepts a request and options array, and the after&#10;listener accepts a request, options array, and response promise.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$before&lt;/b&gt;: Function to invoke before forwarding the request.&#10;    callable &lt;b&gt;$after&lt;/b&gt;: Function invoked after forwarding.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a function that accepts the next handler.;;d4,130;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $before;;pcallable $after;;p;;x;;x">
</treenode>
</treenode>
<treenode node="MimeType;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MimeType.php;f6;4;1;139;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="fromExtension;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MimeType.php;f18;27;5;138;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromExtension($extension)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Maps a file extensions to a mimetype.&#10;&lt;b&gt;link&lt;/b&gt;: http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$extension&lt;/b&gt;: string The file extension.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,28;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $extension;;p;;x">
</treenode>
<treenode node="fromFilename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MimeType.php;f18;13;5;16;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromFilename($filename)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines the mimetype of a file by looking at its extension.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,14;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $filename;;p;;x">
</treenode>
</treenode>
<treenode node="MissingExtensionException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MissingExtensionException.php;f0;18;1;20;;;;vpos;;v;;aException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MissingExtensionException extends \Exception&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception can be thrown if an extension for a handler is missing&#10;&lt;b&gt;author&lt;/b&gt;: Christian Bergau &lt;cbergau86&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="MockHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f0;19;1;210;;;;vpos;;v;;aCountable;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MockHandler implements \Countable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler that returns responses or throw exceptions from a queue.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;68;5;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $queue = null, callable $onFulfilled = null, callable $onRejected = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The passed in value must be an array of&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: \Psr\Http\Message\ResponseInterface} objects, Exceptions,&#10;callables, or Promises.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array&lt;int,: mixed&gt;|null $queue       The parameters to be passed to the append function, as an indexed array.&#10;    callable|null &lt;b&gt;$onFulfilled&lt;/b&gt;: Callback to invoke when the return value is fulfilled.&#10;    callable|null &lt;b&gt;$onRejected&lt;/b&gt;: Callback to invoke when the return value is rejected.;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;larray&lt;int,;;pcallable|null $onFulfilled;;pcallable|null $onRejected;;p;;x;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;79;5;143;;;;vpos;;v;;a PromiseInterface;;r;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="append;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;151;5;164;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    append(...$values): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds one or more variadic requests, exceptions, callables, or promises&#10;to the queue.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed: ...$values;;d4,152;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed;;p;;x">
</treenode>
<treenode node="count;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;185;5;188;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    count(): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the number of remaining items in the queue.;;d4,186;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createWithMiddleware;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f18;54;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createWithMiddleware(array $queue = null, callable $onFulfilled = null, callable $onRejected = null): HandlerStack&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new MockHandler that uses the default handler stack list of&#10;middlewares.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array|null &lt;b&gt;$queue&lt;/b&gt;: Array of responses, callables, or exceptions.&#10;    callable|null &lt;b&gt;$onFulfilled&lt;/b&gt;: Callback to invoke when the return value is fulfilled.&#10;    callable|null &lt;b&gt;$onRejected&lt;/b&gt;: Callback to invoke when the return value is rejected.;;d4,55;;b1,5;;m0;;e0;;i0;;o;;k;;larray|null $queue;;pcallable|null $onFulfilled;;pcallable|null $onRejected;;p;;x;;x;;x">
</treenode>
<treenode node="getLastOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;177;5;180;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastOptions(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the last received request options.;;d4,178;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLastRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;169;37;169;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the last received request.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="invokeStats;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f12;198;5;209;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    invokeStats(&#10;        RequestInterface $request,&#10;        array $options,&#10;        ResponseInterface $response = null,&#10;        $reason = null&#10;    ): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;: Promise or reason.;;d12,203;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;presponse;;preason;;p;;x;;x;;x;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\MockHandler.php;f11;190;5;193;;;;vpos;;v;;a void;;r;;d4,191;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="MockValues;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockValues.php;f0;31;1;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MockValues&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    MockValues holds mock values used for testing the locking implementation.&#10;WARNING: this class requires MockGlobals.php, which replaces some existing functions with test&#10;implementations.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,32;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="initialize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockValues.php;f18;45;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    initialize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initialize MockValues&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,46;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="MongoDBFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f0;21;1;140;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MongoDBFormatter implements FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a record for use with the MongoDBHandler.&#10;&lt;b&gt;author&lt;/b&gt;: Florian Plattner &lt;me&#10;&lt;b&gt;florianplattner&lt;/b&gt;: .de&gt;;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f11;31;5;37;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(int $maxNestingLevel = 3, bool $exceptionTraceAsString = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$maxNestingLevel&lt;/b&gt;: 0 means infinite nesting, the $record itself is level 1, $record[&apos;context&apos;] is 2&#10;    bool &lt;b&gt;$exceptionTraceAsString&lt;/b&gt;: set to false to log exception traces as a sub documents instead of strings;;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;lint $maxNestingLevel;;pbool $exceptionTraceAsString;;p;;x;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f11;42;5;45;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f14;62;5;81;;;;vpos;;v;;aarray|string;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatArray(array $record, int $nestingLevel = 0)&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Array except when max nesting level is reached then a string &quot;[...]&quot;;;d4,63;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;pnestingLevel;;p;;x;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f11;50;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="formatDate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f14;109;5;116;;;;vpos;;v;;a UTCDateTime;;r;;d4,110;;b2,0;;m0;;e0;;i0;;o;;k;;lvalue;;pnestingLevel;;p;;x;;x">
</treenode>
<treenode node="formatException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f14;91;5;107;;;;vpos;;v;;a;;r;;d4,92;;b2,0;;m0;;e0;;i0;;o;;k;;lexception;;pnestingLevel;;p;;x;;x">
</treenode>
<treenode node="formatObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f14;83;5;89;;;;vpos;;v;;a;;r;;d4,84;;b2,0;;m0;;e0;;i0;;o;;k;;lvalue;;pnestingLevel;;p;;x;;x">
</treenode>
<treenode node="getMongoDbDateTime;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f12;118;5;121;;;;vpos;;v;;a UTCDateTime;;r;;d4,119;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="legacyGetMongoDbDateTime;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\MongoDBFormatter.php;f12;130;5;139;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    legacyGetMongoDbDateTime(\DateTimeInterface $value): UTCDateTime&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This is needed to support MongoDB Driver v1.19 and below&#10;See https://github.com/mongodb/mongo-php-driver/issues/426&#10;It can probably be removed in 2.1 or later once MongoDB&apos;s 1.2 is released and widely adopted;;d4,131;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
</treenode>
<treenode node="MongoDBHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MongoDBHandler.php;f0;33;1;84;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MongoDBHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs to a MongoDB database.&#10;Usage example:&#10;$log = new \Monolog\Logger(&apos;application&apos;);s&#10;$client = new \MongoDB\Client(&apos;mongodb://localhost:27017&apos;);s&#10;$mongodb = new \Monolog\Handler\MongoDBHandler($client, &apos;logs&apos;, &apos;prod&apos;);s&#10;$log-&gt;pushHandler($mongodb);s&#10;The above examples uses the MongoDB PHP library&apos;s client class;s however, the&#10;MongoDB\Driver\Manager class from ext-mongodb is also supported.;;d0,34;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MongoDBHandler.php;f11;48;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($mongodb, string $database, string $collection, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Constructor.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Client|Manager &lt;b&gt;$mongodb&lt;/b&gt;: MongoDB library or driver client&#10;    string &lt;b&gt;$database&lt;/b&gt;: Database name&#10;    string &lt;b&gt;$collection&lt;/b&gt;: Collection name&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lClient|Manager $mongodb;;pstring $database;;pstring $collection;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MongoDBHandler.php;f14;80;5;83;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,81;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\MongoDBHandler.php;f14;64;5;75;;;;vpos;;v;;a void;;r;;d4,65;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="MultipartStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f0;10;1;153;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MultipartStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stream that when read returns bytes for a streaming multipart or&#10;multipart/form-data stream.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f11;28;5;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $elements = [], $boundary = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$elements&lt;/b&gt;: Array of associative arrays, each containing a required &quot;name&quot; key mapping to the form field, name, a required &quot;contents&quot; key mapping to a StreamInterface/resource/string, an optional &quot;headers&quot; associative array of custom headers, and an optional &quot;filename&quot; key mapping to a string to send as the filename in the part.&#10;    string &lt;b&gt;$boundary&lt;/b&gt;: You can optionally provide a specific boundary;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;larray $elements;;pstring $boundary;;p;;x;;x">
</treenode>
<treenode node="addElement;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f12;79;5;106;;;;vpos;;v;;a;;r;;d4,80;;b3,0;;m0;;e0;;i0;;o;;k;;lstream;;pelement;;p;;x;;x">
</treenode>
<treenode node="createElement;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f12;111;5;140;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createElement($name, StreamInterface $stream, $filename, array $headers)&#10;;;d4,112;;b3,0;;m0;;e0;;i0;;o;;k;;lname;;pstream;;pfilename;;pheaders;;p;;x;;x;;x;;x">
</treenode>
<treenode node="createStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f14;65;5;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createStream(array $elements)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create the aggregate stream that will be used to upload the POST data;;d4,66;;b2,0;;m0;;e0;;i0;;o;;k;;lelements;;p;;x">
</treenode>
<treenode node="getBoundary;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f11;39;5;42;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBoundary()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the boundary;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f12;142;5;152;;;;vpos;;v;;a;;r;;d4,143;;b3,0;;m0;;e0;;i0;;o;;k;;lheaders;;pkey;;p;;x;;x">
</treenode>
<treenode node="getHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f12;52;5;60;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHeaders(array $headers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the headers needed before transferring the content of a POST file;;d4,53;;b3,0;;m0;;e0;;i0;;o;;k;;lheaders;;p;;x">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\MultipartStream.php;f11;44;5;47;;;;vpos;;v;;a;;r;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="MultipartUploader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\MultipartUploader.php;f0;29;1;107;;;;vpos;;v;;aAbstractUploader;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class MultipartUploader extends AbstractUploader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Multipart upload implementation.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="prepareRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\MultipartUploader.php;f12;76;5;106;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    prepareRequest()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prepares a multipart upload request.;;d4,77;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="upload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\MultipartUploader.php;f11;38;5;47;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    upload()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers the upload process.;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="uploadAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\MultipartUploader.php;f11;58;5;69;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uploadAsync()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers the upload process asynchronously.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;array&gt;;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Named;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f0;14;1;218;;;;vpos;;v;;aAbstraction;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Named extends Abstraction&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    | 1   |    {?list}    ?list=red,green,blue                 | {name}=(?:\w+(?:,\w+?)*)*&#10;| 2   |    {?list*}   ?list=red&amp;list=green&amp;list=blue       | {name}+=(?:{$value}+(?:{sep}{name}+={$value}*))*&#10;| 3   |    {?keys}    ?keys=semi,%3B,dot,.,comma,%2C       | (same as 1)&#10;| 4   |    {?keys*}   ?semi=%3B&amp;dot=.&amp;comma=%2C            | (same as 2)&#10;| 5   |    {?list*}   ?list[]=red&amp;list[]=green&amp;list[]=blue | {name[]}+=(?:{$value}+(?:{sep}{name[]}+={$value}*))*;;d0,15;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="encodeExplodeVars;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f11;183;5;217;;;;vpos;;v;;a;;r;;d4,184;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pdata;;p;;x;;x;;x">
</treenode>
<treenode node="expandExplode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f11;93;5;130;;;;vpos;;v;;a;;r;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pval;;p;;x;;x;;x">
</treenode>
<treenode node="expandNonExplode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f11;74;5;91;;;;vpos;;v;;a;;r;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pval;;p;;x;;x;;x">
</treenode>
<treenode node="expandString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f11;52;5;72;;;;vpos;;v;;a;;r;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pval;;p;;x;;x;;x">
</treenode>
<treenode node="extract;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f11;132;5;181;;;;vpos;;v;;a;;r;;d4,133;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;pdata;;p;;x;;x;;x">
</treenode>
<treenode node="toRegex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\Named.php;f11;16;5;50;;;;vpos;;v;;a;;r;;d4,17;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;p;;x;;x">
</treenode>
</treenode>
<treenode node="NativeMailerHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f0;22;1;175;;;;vpos;;v;;aMailHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NativeMailerHandler extends MailHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    NativeMailerHandler uses the mail() function to send the emails&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Mark Garrett &lt;mark&#10;&lt;b&gt;moderndeveloperllc&lt;/b&gt;: .com&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;74;5;81;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($to, string $subject, string $from, $level = Logger::ERROR, bool $bubble = true, int $maxColumnWidth = 70)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$to&lt;/b&gt;: The receiver of the mail&#10;    string &lt;b&gt;$subject&lt;/b&gt;: The subject of the mail&#10;    string &lt;b&gt;$from&lt;/b&gt;: The sender of the mail&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    int &lt;b&gt;$maxColumnWidth&lt;/b&gt;: The maximum column width that the message lines will have;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $to;;pstring $subject;;pstring $from;;pstring|int $level;;pbool $bubble;;pint $maxColumnWidth;;p;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="addHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;88;5;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addHeader($headers): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add headers to the message&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$headers&lt;/b&gt;: Custom added headers;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $headers;;p;;x">
</treenode>
<treenode node="addParameter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;105;5;110;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addParameter($parameters): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add parameters to the message&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$parameters&lt;/b&gt;: Custom added parameters;;d4,106;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $parameters;;p;;x">
</treenode>
<treenode node="getContentType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;141;37;141;;;;vpos;;v;;a;;r;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getEncoding;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;146;5;149;;;;vpos;;v;;a string;;r;;d4,147;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f14;115;5;139;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(string $content, array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,116;;b2,0;;m0;;e0;;i0;;o;;k;;lcontent;;precords;;p;;x;;x">
</treenode>
<treenode node="setContentType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;154;5;163;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setContentType(string $contentType): self&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$contentType&lt;/b&gt;: The content type of the email - Defaults to text/plain. Use text/html for HTML messages.;;d4,155;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $contentType;;p;;x">
</treenode>
<treenode node="setEncoding;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NativeMailerHandler.php;f11;165;5;174;;;;vpos;;v;;a self;;r;;d4,166;;b1,0;;m0;;e0;;i0;;o;;k;;lencoding;;p;;x">
</treenode>
</treenode>
<treenode node="NewRelicHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f0;27;1;196;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NewRelicHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class to record a log on a NewRelic application.&#10;Enabling New Relic High Security mode may prevent capture of useful information.&#10;This handler requires a NormalizerFormatter to function and expects an array in $record[&apos;formatted&apos;]&#10;&lt;b&gt;see&lt;/b&gt;: https://docs.newrelic.com/docs/agents/php-agent&#10;&lt;b&gt;see&lt;/b&gt;: https://docs.newrelic.com/docs/accounts-partnerships/accounts/security/high-security;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f11;60;5;72;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $level = Logger::ERROR,&#10;        bool $bubble = true,&#10;        ?string $appName = null,&#10;        bool $explodeArrays = false,&#10;        ?string $transactionName = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: }&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not.&#10;    string|null &lt;b&gt;$appName&lt;/b&gt;&#10;    bool &lt;b&gt;$explodeArrays&lt;/b&gt;&#10;    string|null &lt;b&gt;$transactionName&lt;/b&gt;;;d6,66;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;pbool $bubble;;pstring|null $appName;;pbool $explodeArrays;;pstring|null $transactionName;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getAppName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;138;50;138;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the appname where this log should be sent. Each log can override the default appname, set in this&#10;handler&apos;s constructor, by providing the appname in it&apos;s context.;;d-1,-1;;b2,0;;m0;;e0;;i0;;o;;k;;lcontext;;p;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;192;5;195;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,193;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTransactionName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;151;58;151;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the name of the current transaction. Each log can override the default transaction name, set in this&#10;handler&apos;s constructor, by providing the transaction_name in it&apos;s context;;d-1,-1;;b2,0;;m0;;e0;;i0;;o;;k;;lcontext;;p;;x">
</treenode>
<treenode node="isNewRelicEnabled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;129;5;132;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isNewRelicEnabled(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks whether the NewRelic extension is enabled in the system.;;d4,130;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setNewRelicAppName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;163;5;166;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setNewRelicAppName(string $appName): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the NewRelic application that should receive this log.;;d4,164;;b2,0;;m0;;e0;;i0;;o;;k;;lappName;;p;;x">
</treenode>
<treenode node="setNewRelicParameter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;180;5;187;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setNewRelicParameter(string $key, $value): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;;;d4,181;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $key;;pmixed $value;;p;;x;;x">
</treenode>
<treenode node="setNewRelicTransactionName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;171;5;174;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setNewRelicTransactionName(string $transactionName): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Overwrites the name of the current transaction;;d4,172;;b2,0;;m0;;e0;;i0;;o;;k;;ltransactionName;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NewRelicHandler.php;f14;77;5;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,78;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="NoSeekStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\NoSeekStream.php;f0;9;1;22;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NoSeekStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stream decorator that prevents a stream from being seeked;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\NoSeekStream.php;f11;18;5;21;;;;vpos;;v;;a;;r;;d4,19;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\NoSeekStream.php;f11;13;5;16;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
</treenode>
<treenode node="NoopHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NoopHandler.php;f0;22;1;39;;;;vpos;;v;;aHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NoopHandler extends Handler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    No-op&#10;This handler handles anything, but does nothing, and does not stop bubbling to the rest of the stack.&#10;This can be used for testing, or to disable a handler when overriding a configuration without&#10;influencing the rest of the stack.&#10;&lt;b&gt;author&lt;/b&gt;: Roel Harbers &lt;roelharbers&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NoopHandler.php;f11;35;5;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NoopHandler.php;f11;27;5;30;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="NormalizerFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f0;22;1;270;;;;vpos;;v;;aFormatterInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NormalizerFormatter implements FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalizes incoming records to remove objects/resources so it&apos;s easier to dump to various targets&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="SIMPLE_DATE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f16;24;28;24;;;;vpos;;v;;a;;r&quot;Y-m-d\TH:i:sP&quot;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;39;5;45;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(?string $dateFormat = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$dateFormat&lt;/b&gt;: The format of the timestamp: one supported by DateTime::format;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $dateFormat;;p;;x">
</treenode>
<treenode node="addJsonEncodeOption;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;261;5;264;;;;vpos;;v;;a;;r;;d4,262;;b1,0;;m0;;e0;;i0;;o;;k;;loption;;p;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;50;5;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;58;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="formatDate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f14;250;5;259;;;;vpos;;v;;a;;r;;d4,251;;b2,0;;m0;;e0;;i0;;o;;k;;ldate;;p;;x">
</treenode>
<treenode node="getDateFormat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;67;5;70;;;;vpos;;v;;a string;;r;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMaxNormalizeDepth;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;82;5;85;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMaxNormalizeDepth(): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The maximum number of normalization levels to go through;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMaxNormalizeItemCount;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;97;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMaxNormalizeItemCount(): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The maximum number of items to normalize per level;;d4,98;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="normalize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f14;127;5;188;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize($data, int $depth = 0)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |bool|string|null|array;;d4,128;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;pdepth;;p;;x;;x">
</treenode>
<treenode node="normalizeException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f14;193;5;236;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeException(Throwable $e, int $depth = 0)&#10;;;d4,194;;b2,0;;m0;;e0;;i0;;o;;k;;le;;pdepth;;p;;x;;x">
</treenode>
<treenode node="removeJsonEncodeOption;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;266;5;269;;;;vpos;;v;;a;;r;;d4,267;;b1,0;;m0;;e0;;i0;;o;;k;;loption;;p;;x">
</treenode>
<treenode node="setDateFormat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;72;5;77;;;;vpos;;v;;a self;;r;;d4,73;;b1,0;;m0;;e0;;i0;;o;;k;;ldateFormat;;p;;x">
</treenode>
<treenode node="setJsonPrettyPrint;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;112;5;121;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setJsonPrettyPrint(bool $enable): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Enables `json_encode` pretty print.;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;lenable;;p;;x">
</treenode>
<treenode node="setMaxNormalizeDepth;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;87;5;92;;;;vpos;;v;;a self;;r;;d4,88;;b1,0;;m0;;e0;;i0;;o;;k;;lmaxNormalizeDepth;;p;;x">
</treenode>
<treenode node="setMaxNormalizeItemCount;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f11;102;5;107;;;;vpos;;v;;a self;;r;;d4,103;;b1,0;;m0;;e0;;i0;;o;;k;;lmaxNormalizeItemCount;;p;;x">
</treenode>
<treenode node="toJson;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\NormalizerFormatter.php;f14;245;5;248;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    toJson($data, bool $ignoreErrors = false): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the JSON representation of a value&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if encoding fails and errors are not ignored&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   if encoding fails and ignoreErrors is true &apos;null&apos; is returned;;d4,246;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;pignoreErrors;;p;;x;;x">
</treenode>
</treenode>
<treenode node="NotFoundException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\NotFoundException.php;f0;22;1;35;;;;vpos;;v;;aServiceException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NotFoundException extends ServiceException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a resource is not found.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="setMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\NotFoundException.php;f11;31;5;34;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setMessage($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allows overriding message for injection of Whitelist Notice.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: the new message;;d4,32;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
</treenode>
<treenode node="Notification;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f0;47;1;199;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Notification&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cloud Pub/Sub Notifications sends information about changes to objects in&#10;your buckets to Google Cloud Pub/Sub, where the information is added to a&#10;Cloud Pub/Sub topic of your choice in the form of messages. For example,&#10;you can track objects that are created and deleted in your bucket. Each&#10;notification contains information describing both the event that triggered it&#10;and the object that changed.&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$bucket = $storage-&gt;bucket(&apos;my-bucket&apos;);s&#10;$notification = $bucket-&gt;notification(&apos;2482&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/pubsub-notifications&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,48;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;74;5;83;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ConnectionInterface $connection, $id, $bucket, array $info = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: Represents a connection to Cloud Storage.&#10;    string &lt;b&gt;$id&lt;/b&gt;: The notification&apos;s ID.&#10;    string &lt;b&gt;$bucket&lt;/b&gt;: The name of the bucket associated with this notification.&#10;    array &lt;b&gt;$info&lt;/b&gt;: [optional] The notification&apos;s metadata.;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pstring $id;;pstring $bucket;;parray $info;;p;;x;;x;;x;;x">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;123;5;126;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delete the notification.&#10;Example:&#10;```&#10;$notification-&gt;delete();s&#10;```&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/notifications/delete Notifications delete API documentation.&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional];;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="exists;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;97;5;106;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    exists()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check whether or not the notification exists.&#10;Example:&#10;```&#10;if ($notification-&gt;exists()) {&#10;echo &apos;Notification exists!&apos;;s&#10;}&#10;```;;d4,98;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="id;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;180;5;183;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    id()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the notification&apos;s ID.&#10;Example:&#10;```&#10;echo $notification-&gt;id();s&#10;```;;d4,181;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="identity;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;195;5;198;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    identity()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the notification&apos;s identity.&#10;Example:&#10;```&#10;echo $notification-&gt;identity()[&apos;bucket&apos;];s&#10;```;;d4,196;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;143;5;146;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the notification&apos;s details. If no notification data is cached a&#10;network request will be made to retrieve it.&#10;Example:&#10;```&#10;$info = $notification-&gt;info();s&#10;echo $info[&apos;topic&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/notifications/get Notifications get API documentation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional];;d4,144;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Notification.php;f11;163;5;168;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers a network request to reload the notification&apos;s details.&#10;Example:&#10;```&#10;$notification-&gt;reload();s&#10;$info = $notification-&gt;info();s&#10;echo $info[&apos;topic&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/notifications/get Notifications get API documentation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional];;d4,164;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
</treenode>
<treenode node="NullHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NullHandler.php;f0;23;1;53;;;;vpos;;v;;aHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NullHandler extends Handler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Blackhole&#10;Any record it can handle will be thrown away. This can be used&#10;to put on top of an existing stack to override it temporarily.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NullHandler.php;f11;33;5;36;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;p;;x">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NullHandler.php;f11;49;5;52;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\NullHandler.php;f11;41;5;44;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHandling(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="NullLogger;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\NullLogger.php;f0;12;1;29;;;;vpos;;v;;aAbstractLogger;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class NullLogger extends AbstractLogger&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This Logger can be used to avoid conditional log calls.&#10;Logging should always be optional, and if no logger is provided to your&#10;library creating a NullLogger instance to have something to throw logs at&#10;is a good way to avoid littering your code with `if ($this-&gt;logger) { }`&#10;blocks.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="log;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\NullLogger.php;f11;25;5;28;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    log($level, $message, array $context = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs with an arbitrary level.&#10;&lt;b&gt;throws&lt;/b&gt;: \Psr\Log\InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$level&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    array &lt;b&gt;$context&lt;/b&gt;;;d4,26;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $level;;pstring $message;;parray $context;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="OAuth2;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f0;35;1;1425;;;;vpos;;v;;aFetchAuthTokenInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class OAuth2 implements FetchAuthTokenInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    OAuth2 supports authentication by OAuth2 2-legged flows.&#10;It primary supports&#10;- service account authorization&#10;- authorization where a user already has an access token;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_EXPIRY_SECONDS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f9;37;32;37;;;;vpos;;v;;a;;r3600;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_SKEW_SECONDS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f9;38;30;38;;;;vpos;;v;;a;;r60;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="JWT_URN;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f9;39;17;39;;;;vpos;;v;;a;;r&apos;urn:ietf:params:oauth:grant-type:jwt-bearer&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;322;5;364;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new OAuthCredentials.&#10;The configuration array accepts various options&#10;- authorizationUri&#10;The authorization server&apos;s HTTP endpoint capable of&#10;authenticating the end-user and obtaining authorization.&#10;- tokenCredentialUri&#10;The authorization server&apos;s HTTP endpoint capable of issuing&#10;tokens and refreshing expired tokens.&#10;- clientId&#10;A unique identifier issued to the client to identify itself to the&#10;authorization server.&#10;- clientSecret&#10;A shared symmetric secret issued by the authorization server,&#10;which is used to authenticate the client.&#10;- scope&#10;The scope of the access request, expressed either as an Array&#10;or as a space-delimited String.&#10;- state&#10;An arbitrary string designed to allow the client to maintain state.&#10;- redirectUri&#10;The redirection URI used in the initial request.&#10;- username&#10;The resource owner&apos;s username.&#10;- password&#10;The resource owner&apos;s password.&#10;- issuer&#10;Issuer ID when using assertion profile&#10;- audience&#10;Target audience for assertions&#10;- expiry&#10;Number of seconds assertions are valid for&#10;- signingKey&#10;Signing key when using assertion profile&#10;- signingKeyId&#10;Signing key id when using assertion profile&#10;- refreshToken&#10;The refresh token associated with the access token&#10;to be refreshed.&#10;- accessToken&#10;The current access token for this client.&#10;- idToken&#10;The current ID token for this client.&#10;- extensionParams&#10;When using an extension grant type, this is the set of parameters used&#10;by that extension.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: Configuration array;;d4,323;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="addClientCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f12;1413;5;1424;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addClientCredentials(&amp;$params)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;;;d4,1414;;b3,0;;m0;;e0;;i0;;o;;k;;larray $params;;p;;x">
</treenode>
<treenode node="buildFullAuthorizationUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;650;5;697;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildFullAuthorizationUri(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the authorization Uri that the user should be redirected to.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: configuration options that customize the return url&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the authorization Url.;;d4,651;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="coerceUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f12;1357;5;1364;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    coerceUri($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;todo&lt;/b&gt;: handle uri as array&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |UriInterface;;d4,1358;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;p;;x">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;519;5;530;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches the auth tokens based on the current state.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the response;;d4,520;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="generateCredentialsRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;460;5;511;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateCredentialsRequest()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generates a request for token credentials.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the authorization Url.;;d4,461;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getAccessToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1231;5;1234;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAccessToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the current access token.;;d4,1232;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getAdditionalClaims;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1297;5;1300;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAdditionalClaims()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the additional claims to be included in the JWT token.;;d4,1298;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getAudience;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1028;5;1031;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAudience()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the target audience when issuing assertions.;;d4,1029;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getAuthorizationUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;716;5;719;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAuthorizationUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the authorization server&apos;s HTTP endpoint capable of authenticating&#10;the end-user and obtaining authorization.;;d4,717;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;539;5;551;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains a key that can used to cache the results of #fetchAuthToken.&#10;The key is derived from the scopes.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   a key that may be used to cache the auth token.;;d4,540;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;953;5;956;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a unique identifier issued to the client to identify itself to the&#10;authorization server.;;d4,954;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1346;5;1349;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientName(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the client ID.&#10;Alias of {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Auth\OAuth2::getClientId()}.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;;;d4,1347;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getClientSecret;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;973;5;976;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientSecret()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets a shared symmetric secret issued by the authorization server, which&#10;is used to authenticate the client.;;d4,974;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;898;5;901;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCode()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the authorization code issued to this client.;;d4,899;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getExpiresAt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1174;5;1185;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getExpiresAt()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the time the current access token expires at.;;d4,1175;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getExpiresIn;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1148;5;1151;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getExpiresIn()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the lifetime of the access token in seconds.;;d4,1149;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getExpiry;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1130;5;1133;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getExpiry()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the number of seconds assertions are valid for.;;d4,1131;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getExtensionParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1111;5;1114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getExtensionParams()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the set of parameters used by extension when using an extension&#10;grant type.;;d4,1112;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getGrantType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;827;5;852;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getGrantType()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the current grant type.;;d4,828;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getIdToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1249;5;1252;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIdToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the current ID token.;;d4,1250;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getIssuedAt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1213;5;1216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIssuedAt()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the time the current access token was issued at.;;d4,1214;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getIssuer;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;992;5;995;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getIssuer()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the Issuer ID when using assertion profile.;;d4,993;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1307;5;1335;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The expiration of the last received token.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,1308;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPassword;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;934;5;937;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getPassword()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the resource owner&apos;s password.;;d4,935;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRedirectUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;748;5;751;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRedirectUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the redirection URI used in the initial request.;;d4,749;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRefreshToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1267;5;1270;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRefreshToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the refresh token associated with the current access token.;;d4,1268;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getScope;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;783;5;790;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getScope()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the scope of the access requests as a space-delimited String.;;d4,784;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSigningAlgorithm;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1086;5;1089;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSigningAlgorithm()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the signing algorithm when using an assertion profile.;;d4,1087;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSigningKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1046;5;1049;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSigningKey()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the signing key when using an assertion profile.;;d4,1047;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSigningKeyId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1066;5;1069;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSigningKeyId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the signing key id when using an assertion profile.;;d4,1067;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;880;5;883;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getState()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets an arbitrary string designed to allow the client to maintain state.;;d4,881;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSub;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1010;5;1013;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSub()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the target sub when issuing assertions.;;d4,1011;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTokenCredentialUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;727;5;730;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getTokenCredentialUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the authorization server&apos;s HTTP endpoint capable of issuing tokens&#10;and refreshing expired tokens.;;d4,728;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUsername;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;916;5;919;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUsername()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the resource owner&apos;s username.;;d4,917;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isAbsoluteUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f12;1402;5;1407;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isAbsoluteUri($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if the URI is absolute based on its scheme and host or path&#10;(RFC 3986).&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;;;d4,1403;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;p;;x">
</treenode>
<treenode node="isExpired;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1192;5;1198;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isExpired()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if the acccess token has expired.;;d4,1193;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="jwtDecode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f12;1372;5;1379;;;;vpos;;v;;aobject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jwtDecode($idToken, $publicKey, $allowedAlgs)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$idToken&lt;/b&gt;&#10;    string|array|null &lt;b&gt;$publicKey&lt;/b&gt;&#10;    array &lt;b&gt;$allowedAlgs&lt;/b&gt;;;d4,1373;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $idToken;;pstring|array|null $publicKey;;parray $allowedAlgs;;p;;x;;x;;x">
</treenode>
<treenode node="jwtEncode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f12;1381;5;1393;;;;vpos;;v;;a;;r;;d4,1382;;b3,0;;m0;;e0;;i0;;o;;k;;lassertion;;psigningKey;;psigningAlgorithm;;psigningKeyId;;p;;x;;x;;x;;x">
</treenode>
<treenode node="parseTokenResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;560;5;578;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseTokenResponse(ResponseInterface $resp)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses the fetched tokens.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ResponseInterface &lt;b&gt;$resp&lt;/b&gt;: the response.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   the tokens parsed from the response body.;;d4,561;;b1,0;;m0;;e0;;i0;;o;;k;;lResponseInterface $resp;;p;;x">
</treenode>
<treenode node="setAccessToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1241;5;1244;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setAccessToken($accessToken)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the current access token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$accessToken&lt;/b&gt;;;d4,1242;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $accessToken;;p;;x">
</treenode>
<treenode node="setAdditionalClaims;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1287;5;1290;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setAdditionalClaims(array $additionalClaims)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets additional claims to be included in the JWT token&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$additionalClaims&lt;/b&gt;;;d4,1288;;b1,0;;m0;;e0;;i0;;o;;k;;larray $additionalClaims;;p;;x">
</treenode>
<treenode node="setAudience;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1038;5;1041;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setAudience($audience)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the target audience when issuing assertions.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$audience&lt;/b&gt;;;d4,1039;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $audience;;p;;x">
</treenode>
<treenode node="setAuthorizationUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;705;5;708;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setAuthorizationUri($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the authorization server&apos;s HTTP endpoint capable of authenticating&#10;the end-user and obtaining authorization.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;;;d4,706;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;p;;x">
</treenode>
<treenode node="setClientId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;964;5;967;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setClientId($clientId)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a unique identifier issued to the client to identify itself to the&#10;authorization server.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$clientId&lt;/b&gt;;;d4,965;;b1,0;;m0;;e0;;i0;;o;;k;;l $clientId;;p;;x">
</treenode>
<treenode node="setClientSecret;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;984;5;987;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setClientSecret($clientSecret)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets a shared symmetric secret issued by the authorization server, which&#10;is used to authenticate the client.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$clientSecret&lt;/b&gt;;;d4,985;;b1,0;;m0;;e0;;i0;;o;;k;;l $clientSecret;;p;;x">
</treenode>
<treenode node="setCode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;908;5;911;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setCode($code)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the authorization code issued to this client.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$code&lt;/b&gt;;;d4,909;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $code;;p;;x">
</treenode>
<treenode node="setExpiresAt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1205;5;1208;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setExpiresAt($expiresAt)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the time the current access token expires at.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$expiresAt&lt;/b&gt;;;d4,1206;;b1,0;;m0;;e0;;i0;;o;;k;;lint $expiresAt;;p;;x">
</treenode>
<treenode node="setExpiresIn;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1158;5;1167;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setExpiresIn($expiresIn)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the lifetime of the access token in seconds.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$expiresIn&lt;/b&gt;;;d4,1159;;b1,0;;m0;;e0;;i0;;o;;k;;lint $expiresIn;;p;;x">
</treenode>
<treenode node="setExpiry;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1140;5;1143;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setExpiry($expiry)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the number of seconds assertions are valid for.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$expiry&lt;/b&gt;;;d4,1141;;b1,0;;m0;;e0;;i0;;o;;k;;lint $expiry;;p;;x">
</treenode>
<treenode node="setExtensionParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1122;5;1125;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setExtensionParams($extensionParams)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the set of parameters used by extension when using an extension&#10;grant type.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$extensionParams&lt;/b&gt;;;d4,1123;;b1,0;;m0;;e0;;i0;;o;;k;;l $extensionParams;;p;;x">
</treenode>
<treenode node="setGrantType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;860;5;873;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setGrantType($grantType)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the current grant type.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$grantType&lt;/b&gt;;;d4,861;;b1,0;;m0;;e0;;i0;;o;;k;;l $grantType;;p;;x">
</treenode>
<treenode node="setIdToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1259;5;1262;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setIdToken($idToken)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the current ID token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$idToken&lt;/b&gt;;;d4,1260;;b1,0;;m0;;e0;;i0;;o;;k;;l $idToken;;p;;x">
</treenode>
<treenode node="setIssuedAt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1223;5;1226;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setIssuedAt($issuedAt)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the time the current access token was issued at.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$issuedAt&lt;/b&gt;;;d4,1224;;b1,0;;m0;;e0;;i0;;o;;k;;lint $issuedAt;;p;;x">
</treenode>
<treenode node="setIssuer;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1002;5;1005;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setIssuer($issuer)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the Issuer ID when using assertion profile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$issuer&lt;/b&gt;;;d4,1003;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $issuer;;p;;x">
</treenode>
<treenode node="setPassword;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;944;5;947;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPassword($password)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the resource owner&apos;s password.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$password&lt;/b&gt;;;d4,945;;b1,0;;m0;;e0;;i0;;o;;k;;l $password;;p;;x">
</treenode>
<treenode node="setRedirectUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;758;5;776;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setRedirectUri($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the redirection URI used in the initial request.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;;;d4,759;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;p;;x">
</treenode>
<treenode node="setRefreshToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1277;5;1280;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setRefreshToken($refreshToken)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the refresh token associated with the current access token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$refreshToken&lt;/b&gt;;;d4,1278;;b1,0;;m0;;e0;;i0;;o;;k;;l $refreshToken;;p;;x">
</treenode>
<treenode node="setScope;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;799;5;820;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setScope($scope)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the scope of the access request, expressed either as an Array or as&#10;a space-delimited String.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$scope&lt;/b&gt;;;d4,800;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $scope;;p;;x">
</treenode>
<treenode node="setSigningAlgorithm;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1096;5;1105;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSigningAlgorithm($signingAlgorithm)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the signing algorithm when using an assertion profile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$signingAlgorithm&lt;/b&gt;;;d4,1097;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $signingAlgorithm;;p;;x">
</treenode>
<treenode node="setSigningKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1056;5;1059;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSigningKey($signingKey)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the signing key when using an assertion profile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$signingKey&lt;/b&gt;;;d4,1057;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $signingKey;;p;;x">
</treenode>
<treenode node="setSigningKeyId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1076;5;1079;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSigningKeyId($signingKeyId)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the signing key id when using an assertion profile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$signingKeyId&lt;/b&gt;;;d4,1077;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $signingKeyId;;p;;x">
</treenode>
<treenode node="setState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;890;5;893;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setState($state)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets an arbitrary string designed to allow the client to maintain state.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$state&lt;/b&gt;;;d4,891;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $state;;p;;x">
</treenode>
<treenode node="setSub;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;1020;5;1023;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSub($sub)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the target sub when issuing assertions.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$sub&lt;/b&gt;;;d4,1021;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $sub;;p;;x">
</treenode>
<treenode node="setTokenCredentialUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;738;5;741;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setTokenCredentialUri($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the authorization server&apos;s HTTP endpoint capable of issuing tokens&#10;and refreshing expired tokens.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;;;d4,739;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;p;;x">
</treenode>
<treenode node="setUsername;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;926;5;929;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUsername($username)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the resource owner&apos;s username.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$username&lt;/b&gt;;;d4,927;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $username;;p;;x">
</treenode>
<treenode node="toJwt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;414;5;453;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    toJwt(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obtains the encoded jwt from the instance data.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: array optional configuration parameters;;d4,415;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="updateToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;614;5;641;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateToken(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates an OAuth 2.0 client.&#10;Example:&#10;```&#10;$oauth-&gt;updateToken([&#10;&apos;refresh_token&apos; =&gt; &apos;n4E9O119d&apos;,&#10;&apos;access_token&apos; =&gt; &apos;FJQbwq9&apos;,&#10;&apos;expires_in&apos; =&gt; 3600&#10;]);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: The configuration parameters related to the token. - refresh_token The refresh token associated with the access token to be refreshed. - access_token The current access token for this client. - id_token The current ID token for this client. - expires_in The time in seconds until access token expiration. - expires_at The time as an integer number of seconds since the Epoch - issued_at The timestamp that the token was issued at.;;d4,615;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="verifyIdToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\OAuth2.php;f11;390;5;406;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    verifyIdToken($publicKey = null, $allowed_algs = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Verifies the idToken if present.&#10;- if none is present, return null&#10;- if present, but invalid, raises DomainException.&#10;- otherwise returns the payload in the idtoken as a PHP object.&#10;The behavior of this method varies depending on the version of&#10;`firebase/php-jwt` you are using. In versions lower than 3.0.0, if&#10;`$publicKey` is null, the key is decoded without being verified. In&#10;newer versions, if a public key is not given, this method will throw an&#10;`\InvalidArgumentException`.&#10;&lt;b&gt;throws&lt;/b&gt;: \DomainException if the token is missing an audience.&#10;&lt;b&gt;throws&lt;/b&gt;: \DomainException if the audience does not match the one set in&#10;the OAuth2 class instance.&#10;&lt;b&gt;throws&lt;/b&gt;: \UnexpectedValueException If the token is invalid&#10;&lt;b&gt;throws&lt;/b&gt;: SignatureInvalidException If the signature is invalid.&#10;&lt;b&gt;throws&lt;/b&gt;: BeforeValidException If the token is not yet valid.&#10;&lt;b&gt;throws&lt;/b&gt;: ExpiredException If the token has expired.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$publicKey&lt;/b&gt;: The public key to use to authenticate the token&#10;    array &lt;b&gt;$allowed_algs&lt;/b&gt;: List of supported verification algorithms&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |object;;d4,391;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $publicKey;;parray $allowed_algs;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ObjectIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ObjectIterator.php;f0;24;1;40;;;;vpos;;v;;aIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ObjectIterator implements \Iterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Iterates over a set of {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject} items.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="prefixes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ObjectIterator.php;f11;34;5;39;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    prefixes()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets a list of prefixes of objects matching-but-not-listed up to and&#10;including the requested delimiter.;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ObjectPageIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ObjectPageIterator.php;f0;25;1;76;;;;vpos;;v;;aIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ObjectPageIterator implements \Iterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Iterates over a set of pages containing&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject} items.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="current;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ObjectPageIterator.php;f11;50;5;61;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    current()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the current page.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="prefixes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ObjectPageIterator.php;f11;40;5;43;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    prefixes()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets a list of prefixes of objects matching-but-not-listed up to and&#10;including the requested delimiter.;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="updatePrefixes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ObjectPageIterator.php;f12;68;5;75;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updatePrefixes()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add new prefixes to the list.;;d4,69;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="OperationResponseTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\OperationResponseTrait.php;f0;29;1;155;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait OperationResponseTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Serializes and deserializes ApiCore LRO Response objects.&#10;This trait should be used in a gRPC Connection class to normalize responses.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="deserializeMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\OperationResponseTrait.php;f12;133;5;154;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deserializeMetadata($operation, $type, $serializer, array $mappers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert an operation metadata to an array&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    OperationResponse|GaxOperationResponse &lt;b&gt;$operation&lt;/b&gt;: The operation to serialize.&#10;    string &lt;b&gt;$type&lt;/b&gt;: The Operation type. The type should correspond to a member of $mappers.typeUrl.&#10;    Serializer|GaxSerializer &lt;b&gt;$serializer&lt;/b&gt;: The gRPC serializer to use for the deserialization.&#10;    array &lt;b&gt;$mappers&lt;/b&gt;: A list of mappers.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,134;;b3,0;;m0;;e0;;i0;;o;;k;;lOperationResponse|GaxOperationResponse $operation;;pstring $type;;pSerializer|GaxSerializer $serializer;;parray $mappers;;p;;x;;x;;x;;x">
</treenode>
<treenode node="deserializeResult;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\OperationResponseTrait.php;f12;96;5;118;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deserializeResult($operation, $type, $serializer, array $mappers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert an operation response to an array&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    OperationResponse|GaxOperationResponse &lt;b&gt;$operation&lt;/b&gt;: The operation to serialize.&#10;    string &lt;b&gt;$type&lt;/b&gt;: The Operation type. The type should correspond to a member of $mappers.typeUrl.&#10;    Serializer|GaxSerializer &lt;b&gt;$serializer&lt;/b&gt;: The gRPC serializer to use for the deserialization.&#10;    array &lt;b&gt;$mappers&lt;/b&gt;: A list of mappers.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,97;;b3,0;;m0;;e0;;i0;;o;;k;;lOperationResponse|GaxOperationResponse $operation;;pstring $type;;pSerializer|GaxSerializer $serializer;;parray $mappers;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getOperationByName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\OperationResponseTrait.php;f12;79;5;82;;;;vpos;;v;;aOperationResponse;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getOperationByName($client, $name, $method = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch an OperationResponse object from a gapic client.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$client&lt;/b&gt;: A generated client with a `resumeOperation` method.&#10;    string &lt;b&gt;$name&lt;/b&gt;: The Operation name.&#10;    string|null &lt;b&gt;$method&lt;/b&gt;: The method name.;;d4,80;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $client;;pstring $name;;pstring|null $method;;p;;x;;x;;x">
</treenode>
<treenode node="operationToArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\LongRunning\OperationResponseTrait.php;f12;39;5;69;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    operationToArray($operation, $serializer, array $lroMappers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a ApiCore OperationResponse object to an array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    OperationResponse|GaxOperationResponse &lt;b&gt;$operation&lt;/b&gt;: The operation response&#10;    Serializer|GaxSerializer &lt;b&gt;$serializer&lt;/b&gt;: The serializer to use for gRPC serialization/deserialization.&#10;    array &lt;b&gt;$lroMappers&lt;/b&gt;: A list of mappers for deserializing operation results.;;d4,40;;b3,0;;m0;;e0;;i0;;o;;k;;lOperationResponse|GaxOperationResponse $operation;;pSerializer|GaxSerializer $serializer;;parray $lroMappers;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="OpisClosureSerializer;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\OpisClosureSerializer.php;f0;30;1;55;;;;vpos;;v;;aClosureSerializerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class OpisClosureSerializer implements ClosureSerializerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A closure serializer utilizing&#10;[Opis Closure Library](https://github.com/opis/closure).&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="unwrapClosures;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\OpisClosureSerializer.php;f11;49;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unwrapClosures(&amp;$data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Recursively unserializes closures.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $data;;p;;x">
</treenode>
<treenode node="wrapClosures;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\OpisClosureSerializer.php;f11;37;5;42;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    wrapClosures(&amp;$data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Recursively serializes closures.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $data;;p;;x">
</treenode>
</treenode>
<treenode node="OverflowHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\OverflowHandler.php;f0;36;1;153;;;;vpos;;v;;aAbstractHandler;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class OverflowHandler extends AbstractHandler implements FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler to only pass log messages when a certain threshold of number of messages is reached.&#10;This can be useful in cases of processing a batch of data, but you&apos;re for example only interested&#10;in case it fails catastrophically instead of a warning for 1 or 2 events. Worse things can happen, right?&#10;Usage example:&#10;```&#10;$log = new Logger(&apos;application&apos;);s&#10;$handler = new SomeHandler(...)&#10;// Pass all warnings to the handler when more than 10 &amp; all error messages when more then 5&#10;$overflow = new OverflowHandler($handler, [Logger::WARNING =&gt; 10, Logger::ERROR =&gt; 5]);s&#10;$log-&gt;pushHandler($overflow);s&#10;```&#10;&lt;b&gt;author&lt;/b&gt;: Kris Buist &lt;krisbuist&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,37;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\OverflowHandler.php;f11;66;5;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        HandlerInterface $handler,&#10;        array $thresholdMap = [],&#10;        $level = Logger::DEBUG,&#10;        bool $bubble = true&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    HandlerInterface &lt;b&gt;$handler&lt;/b&gt;&#10;    int[] &lt;b&gt;$thresholdMap&lt;/b&gt;: Dictionary of logger level =&gt; threshold&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;;;d6,71;;b1,0;;m0;;e0;;i0;;o;;k;;lHandlerInterface $handler;;pint[] $thresholdMap;;pint|string $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\OverflowHandler.php;f11;145;5;152;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,146;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\OverflowHandler.php;f11;94;5;126;;;;vpos;;v;;aBoolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handles a record.&#10;All records may be passed to this method, and the handler should discard&#10;those that it does not want to handle.&#10;The return value of this function controls the bubbling process of the handler stack.&#10;Unless the bubbling is interrupted (by returning true), the Logger class will keep on&#10;calling further handlers in the stack with a given log record.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;: The record to handle&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true means that this handler handled the record, and that bubbling is not permitted. false means the record was either not processed or that this handler allows bubbling.;;d4,95;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\OverflowHandler.php;f11;131;5;140;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,132;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="PHP;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f6;28;1;77;;;;vpos;;v;;aCRCInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PHP implements CRCInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHP implementation of the CRC32 algorithm.&#10;Uses a simple lookup table to improve the performances.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f11;44;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new instance for this polynomial.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The polynomial;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f11;68;5;71;;;;vpos;;v;;a;;r;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;lraw_output;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f11;52;5;55;;;;vpos;;v;;a;;r;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="supports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f18;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,5;;m0;;e0;;i0;;o;;k;;lalgo;;p;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f11;57;5;66;;;;vpos;;v;;a;;r;;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="version;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHP.php;f11;73;5;76;;;;vpos;;v;;a;;r;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="PHPConsoleHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f0;40;1;239;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PHPConsoleHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog handler for Google Chrome extension &quot;PHP Console&quot;&#10;Display PHP error/debug log messages in Google Chrome console and notification popups, executes PHP code remotely&#10;Usage:&#10;1. Install Google Chrome extension https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef&#10;2. See overview https://github.com/barbushin/php-console#overview&#10;3. Install PHP Console library https://github.com/barbushin/php-console#installation&#10;4. Example (result will looks like http://i.hizliresim.com/vg3Pz4.png)&#10;$logger = new \Monolog\Logger(&apos;all&apos;, array(new \Monolog\Handler\PHPConsoleHandler()));s&#10;\Monolog\ErrorHandler::register($logger);s&#10;echo $undefinedVar;s&#10;$logger-&gt;debug(&apos;SELECT * FROM users&apos;, array(&apos;db&apos;, &apos;time&apos; =&gt; 0.012));s&#10;PC::debug($_SERVER);s // PHP Console debugger for any type of vars&#10;&lt;b&gt;author&lt;/b&gt;: Sergey Barbushin https://www.linkedin.com/in/barbushin;;d0,41;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f11;75;5;83;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $options = [], ?Connector $connector = null, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: See \Monolog\Handler\PHPConsoleHandler::$options for more details&#10;    Connector|null &lt;b&gt;$connector&lt;/b&gt;: Instance of \PhpConsole\Connector class (optional)&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not.;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;pConnector|null $connector;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getConnector;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f11;150;5;153;;;;vpos;;v;;a Connector;;r;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f14;235;5;238;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,236;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f11;155;5;158;;;;vpos;;v;;a array;;r;;d4,156;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRecordTags;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f12;211;5;230;;;;vpos;;v;;a;;r;;d4,212;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f11;160;5;167;;;;vpos;;v;;a bool;;r;;d4,161;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleDebugRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f12;183;5;191;;;;vpos;;v;;a void;;r;;d4,184;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleErrorRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f12;198;5;209;;;;vpos;;v;;a void;;r;;d4,199;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleExceptionRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f12;193;5;196;;;;vpos;;v;;a void;;r;;d4,194;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="initConnector;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f12;95;5;148;;;;vpos;;v;;a Connector;;r;;d4,96;;b3,0;;m0;;e0;;i0;;o;;k;;lconnector;;p;;x">
</treenode>
<treenode node="initOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f12;85;5;93;;;;vpos;;v;;a array;;r;;d4,86;;b3,0;;m0;;e0;;i0;;o;;k;;loptions;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PHPConsoleHandler.php;f14;172;5;181;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes the record down to the log of the implementing handler;;d4,173;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="PHPSlicedBy4;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f6;29;1;105;;;;vpos;;v;;aCRCInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PHPSlicedBy4 implements CRCInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHP implementation of the CRC32 sliced-by-4 algorithm.&#10;This is typically faster, but the PHP implementation seems slower than the&#10;simple implementation.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f11;40;5;45;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lpolynomial;;p;;x">
</treenode>
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f11;96;5;99;;;;vpos;;v;;a;;r;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;lraw_output;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f11;47;5;50;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="supports;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f18;33;5;36;;;;vpos;;v;;a;;r;;d4,34;;b1,5;;m0;;e0;;i0;;o;;k;;lalgo;;p;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f11;52;5;94;;;;vpos;;v;;a;;r;;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="version;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\PHPSlicedBy4.php;f11;101;5;104;;;;vpos;;v;;a;;r;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="PageIterator;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIterator.php;f0;22;1;25;;;;vpos;;v;;aIterator;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PageIterator implements \Iterator&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Iterates over a set of pages.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PageIteratorTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f0;26;1;320;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait PageIteratorTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This trait fulfills the&#10;[\Iterator](http://php.net/manual/en/class.iterator.php) interface and&#10;returns results as a page of items.;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;108;5;131;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        callable $resultMapper,&#10;        callable $call,&#10;        array $callOptions,&#10;        array $config = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: string $itemsKey The key for the items to iterate over from the&#10;response. **Defaults to** `&quot;items&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $nextResultTokenKey The key for the next result token in&#10;the response. **Defaults to** `&quot;nextPageToken&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $resultTokenKey The key for the results token set in the&#10;request. **Defaults too** `&quot;pageToken&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $firstPage The first page of results. If set, this data&#10;will be used for the first page of results instead of making&#10;a network request.&#10;&lt;b&gt;type&lt;/b&gt;: callable $setNextResultTokenCondition If this condition passes&#10;then it should be considered safe to set the token to get the&#10;next set of results.&#10;&lt;b&gt;type&lt;/b&gt;: int $resultLimit Limit the number of results returned in total.&#10;**Defaults to** `0` (return all results).&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$resultMapper&lt;/b&gt;: Maps a result.&#10;    callable &lt;b&gt;$call&lt;/b&gt;: The call to execute.&#10;    array &lt;b&gt;$callOptions&lt;/b&gt;: Options to use with the call.&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options.;;d6,113;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $resultMapper;;pcallable $call;;parray $callOptions;;parray $config;;p;;x;;x;;x;;x">
</treenode>
<treenode node="current;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;171;5;184;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    current()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the current page.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,172;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="determineNextResultToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f12;277;5;282;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    determineNextResultToken(array $results, $shouldContinue = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$results&lt;/b&gt;&#10;    bool &lt;b&gt;$shouldContinue&lt;/b&gt;;;d4,278;;b3,0;;m0;;e0;;i0;;o;;k;;larray $results;;pbool $shouldContinue;;p;;x;;x">
</treenode>
<treenode node="executeCall;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f12;228;5;242;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    executeCall()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Executes the provided call to get a set of results.;;d4,229;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f12;289;5;302;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get(array $path, array $array)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$path&lt;/b&gt;&#10;    array &lt;b&gt;$array&lt;/b&gt;;;d4,290;;b3,0;;m0;;e0;;i0;;o;;k;;larray $path;;parray $array;;p;;x;;x">
</treenode>
<treenode node="key;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;191;5;194;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    key()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the key current page&apos;s key.;;d4,192;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="mapResults;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f12;248;5;270;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mapResults(array $results)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$results&lt;/b&gt;;;d4,249;;b3,0;;m0;;e0;;i0;;o;;k;;larray $results;;p;;x">
</treenode>
<treenode node="next;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;201;5;207;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    next()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Advances to the next page.;;d4,202;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="nextResultToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;138;5;141;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    nextResultToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch the token used to get the next set of results.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,139;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;148;5;164;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rewind()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Rewind the iterator.;;d4,149;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="set;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f12;310;5;319;;;;vpos;;v;;anull;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    set(array $path, array &amp;$array, $value)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$path&lt;/b&gt;&#10;    array &lt;b&gt;$array&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;;;d4,311;;b3,0;;m0;;e0;;i0;;o;;k;;larray $path;;parray $array;;pmixed $value;;p;;x;;x;;x">
</treenode>
<treenode node="valid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iterator\PageIteratorTrait.php;f11;214;5;221;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    valid()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines if the current position is valid.;;d4,215;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Parser;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f0;9;1;155;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f0;36;1;335;;;;vpos;;v;;a;;r;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="REGEX_VARNAME;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f9;11;23;11;;;;vpos;;v;;a;;r&apos;(?:[A-z0-9_\.]|%[0-9a-fA-F]{2})&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SNIPPET_NAME_REGEX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f9;38;28;38;;;;vpos;;v;;a;;r&apos;/\/\/\s?\[snippet\=(\w{0,})\]/&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="allExamples;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;217;5;235;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    allExamples($class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve all examples from a class and its methods.&#10;Example:&#10;```&#10;$examples = $parser-&gt;allExamples($parser);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    object|ReflectionClass &lt;b&gt;$class&lt;/b&gt;: An instance or reflector of the class to parse.;;d4,218;;b1,0;;m0;;e0;;i0;;o;;k;;lobject|ReflectionClass $class;;p;;x">
</treenode>
<treenode node="buildMagicMethods;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f12;315;5;334;;;;vpos;;v;;a;;r;;d4,316;;b3,0;;m0;;e0;;i0;;o;;k;;lmagicMethods;;pclassName;;p;;x;;x">
</treenode>
<treenode node="classExample;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;55;5;73;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    classExample($class, $index = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a snippet from a class.&#10;Example:&#10;```&#10;use Google\Cloud\Core\Testing\Snippet\Parser\Parser;s&#10;$snippet = $parser-&gt;classExample(Parser::class);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: the name of the class&#10;    int|string &lt;b&gt;$index&lt;/b&gt;: The index of the example to return.;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $class;;pint|string $index;;p;;x;;x">
</treenode>
<treenode node="createExpressionNode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;141;5;144;;;;vpos;;v;;a;;r;;d4,142;;b2,0;;m0;;e0;;i0;;o;;k;;ltoken;;poperator;;pvars;;p;;x;;x;;x">
</treenode>
<treenode node="createIdentifier;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;300;5;303;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createIdentifier($fqn, $indexOrName)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create identifier&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$fqn&lt;/b&gt;&#10;    int|string &lt;b&gt;$indexOrName&lt;/b&gt;;;d4,301;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $fqn;;pint|string $indexOrName;;p;;x;;x">
</treenode>
<treenode node="createLiteralNode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;146;5;149;;;;vpos;;v;;a;;r;;d4,147;;b2,0;;m0;;e0;;i0;;o;;k;;ltoken;;p;;x">
</treenode>
<treenode node="createNode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;48;5;59;;;;vpos;;v;;aNode;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createNode($token)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   \Abstraction;;d4,49;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $token;;p;;x">
</treenode>
<treenode node="createOperatorNode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;151;5;154;;;;vpos;;v;;a;;r;;d4,152;;b2,0;;m0;;e0;;i0;;o;;k;;ltoken;;p;;x">
</treenode>
<treenode node="createVariableNode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;136;5;139;;;;vpos;;v;;a;;r;;d4,137;;b2,0;;m0;;e0;;i0;;o;;k;;ltoken;;poptions;;p;;x;;x">
</treenode>
<treenode node="examples;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;245;5;291;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    examples(DocBlock $docBlock, $fullyQualifiedName, $file, $line, array $magicMethods = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse examples from a DocBlock object.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    DocBlock &lt;b&gt;$docBlock&lt;/b&gt;: The DocBlock to parse&#10;    string &lt;b&gt;$file&lt;/b&gt;: The filename the docblock is in&#10;    int &lt;b&gt;$line&lt;/b&gt;: The line where the tested method or class is declared.;;d4,246;;b1,0;;m0;;e0;;i0;;o;;k;;ldocBlock;;pfullyQualifiedName;;pfile;;pline;;pmagicMethods;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="examplesFromClass;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;130;5;167;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    examplesFromClass($class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve all examples from a class Doc Block.&#10;Example:&#10;```&#10;$examples = $parser-&gt;examplesFromClass($parser);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    object|ReflectionClass &lt;b&gt;$class&lt;/b&gt;: An instance or reflector of the class to parse examples from.;;d4,131;;b1,0;;m0;;e0;;i0;;o;;k;;lobject|ReflectionClass $class;;p;;x">
</treenode>
<treenode node="examplesFromMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;183;5;204;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    examplesFromMethod($class, $method)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve all examples from a method&apos;s Doc Block.&#10;Example:&#10;```&#10;$examples = $parser-&gt;examplesFromMethod($parser, &apos;examplesFromMethod&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    object|string &lt;b&gt;$class&lt;/b&gt;: An instance of the class to parse examples, or the name of the class.&#10;    string|ReflectionMethod &lt;b&gt;$method&lt;/b&gt;: The name of the method to parse examples from.;;d4,184;;b1,0;;m0;;e0;;i0;;o;;k;;lobject|string $class;;pstring|ReflectionMethod $method;;p;;x;;x">
</treenode>
<treenode node="extractSnippetName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f12;305;5;313;;;;vpos;;v;;a;;r;;d4,306;;b3,0;;m0;;e0;;i0;;o;;k;;lcontent;;p;;x">
</treenode>
<treenode node="methodExample;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Parser.php;f11;98;5;116;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    methodExample($class, $method, $index = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a snippet from a method.&#10;Example:&#10;```&#10;use Google\Cloud\Core\Testing\Snippet\Parser\Parser;s&#10;$snippet = $parser-&gt;methodExample(Parser::class, &apos;methodExample&apos;);s&#10;```&#10;```&#10;use Google\Cloud\Core\Testing\Snippet\Parser\Parser;s&#10;// Get the 2nd example (index=1)&#10;$snippet = $parser-&gt;methodExample(Parser::class, &apos;methodExample&apos;, 1);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The name of the class.&#10;    string &lt;b&gt;$method&lt;/b&gt;: The name of the method.&#10;    int &lt;b&gt;$index&lt;/b&gt;: The 0-indexed example to return.;;d4,99;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $class;;pstring $method;;pint $index;;p;;x;;x;;x">
</treenode>
<treenode node="parse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f11;19;5;42;;;;vpos;;v;;aNode;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse($template)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses URI Template and returns nodes&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$template&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   \Abstraction[];;d4,20;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $template;;p;;x">
</treenode>
<treenode node="parseExpression;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;61;5;94;;;;vpos;;v;;a;;r;;d4,62;;b2,0;;m0;;e0;;i0;;o;;k;;lexpression;;p;;x">
</treenode>
<treenode node="parseVariable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Parser.php;f14;96;5;134;;;;vpos;;v;;a;;r;;d4,97;;b2,0;;m0;;e0;;i0;;o;;k;;lvar;;p;;x">
</treenode>
</treenode>
<treenode node="ParserTest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f0;7;1;129;;;;vpos;;v;;aPHPUnit_Framework_TestCase;;c;;r;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="service;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f14;9;5;12;;;;vpos;;v;;a;;r;;d4,10;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testParseTemplate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f11;14;5;87;;;;vpos;;v;;a;;r;;d4,15;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testParseTemplateWithLiteral;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f11;89;5;95;;;;vpos;;v;;a;;r;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testParseTemplateWithThreeVariablesAndDotBetweenStrict;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f11;122;5;128;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testParseTemplateWithThreeVariablesAndDotBetweenStrict()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt; depends&lt;/b&gt;: testParseTemplateWithLiteral;;d4,123;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testParseTemplateWithTwoVariablesAndDotBetween;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f11;100;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testParseTemplateWithTwoVariablesAndDotBetween()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;depends&lt;/b&gt;: testParseTemplateWithLiteral;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testParseTemplateWithTwoVariablesAndDotBetweenStrict;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\Uri\Node\ParserTest.php;f11;111;5;117;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testParseTemplateWithTwoVariablesAndDotBetweenStrict()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt; depends&lt;/b&gt;: testParseTemplateWithLiteral;;d4,112;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="PhpArray;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f0;31;1;237;;;;vpos;;v;;aPhpArray;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PhpArray extends Protobuf\Codec\PhpArray&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Extend the Protobuf-PHP array codec to allow messages to match the format&#10;used for REST.&#10;&lt;b&gt;deprecated&lt;/b&gt;&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d0,32;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f11;49;5;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $customFilters = [], $useCamelCase = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$customFilters&lt;/b&gt;: A set of callbacks to apply to properties in a gRPC response.&#10;    bool &lt;b&gt;$useCamelCase&lt;/b&gt;: Whether to convert key casing to camelCase. };;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;larray $customFilters;;pbool $useCamelCase;;p;;x;;x">
</treenode>
<treenode node="decodeMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f14;126;5;158;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    decodeMessage(Protobuf\Message $message, $data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Borrowed heavily from {&#10;&lt;b&gt;see&lt;/b&gt;: DrSlump\Protobuf\Codec\PhpArray::decodeMessage()}.&#10;The only addition here is converting camel case field names to snake case.;;d4,127;;b2,0;;m0;;e0;;i0;;o;;k;;lmessage;;pdata;;p;;x;;x">
</treenode>
<treenode node="encodeMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f14;60;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeMessage(Protobuf\Message $message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Borrowed heavily from {&#10;&lt;b&gt;see&lt;/b&gt;: DrSlump\Protobuf\Codec\PhpArray::encodeMessage()}.&#10;With this approach we are able to transform the response with minimal&#10;overhead.;;d4,61;;b2,0;;m0;;e0;;i0;;o;;k;;lmessage;;p;;x">
</treenode>
<treenode node="filterValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f14;160;5;221;;;;vpos;;v;;a;;r;;d4,161;;b2,0;;m0;;e0;;i0;;o;;k;;lvalue;;pfield;;p;;x;;x">
</treenode>
<treenode node="isKeyValueMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f12;233;5;236;;;;vpos;;v;;a;;r;;d4,234;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="toCamelCase;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f12;228;5;231;;;;vpos;;v;;a;;r;;d4,229;;b3,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="toSnakeCase;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\PhpArray.php;f12;223;5;226;;;;vpos;;v;;a;;r;;d4,224;;b3,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
</treenode>
<treenode node="PolicyBuilder;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f0;34;1;306;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PolicyBuilder&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper class for creating valid IAM policies&#10;Example:&#10;```&#10;use Google\Cloud\Core\Iam\PolicyBuilder;s&#10;$builder = new PolicyBuilder();s&#10;$builder-&gt;addBinding(&apos;roles/admin&apos;, [ &apos;user:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos; ]);s&#10;$result = $builder-&gt;result();s&#10;```;;d0,35;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;89;5;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $policy = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a PolicyBuilder.&#10;To use conditions in the bindings, the version of the policy must be set&#10;to 3.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/iam/docs/policies#versions Policy versioning&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud-dot-devsite.googleplex.com/storage/docs/access-control/using-iam-permissions#conditions-iam&#10;Using Cloud IAM Conditions on buckets&#10;Example:&#10;```&#10;$policy = [&#10;&apos;etag&apos; =&gt; &apos;AgIc==&apos;,&#10;&apos;version&apos; =&gt; 3,&#10;&apos;bindings&apos; =&gt; [&#10;[&#10;&apos;role&apos; =&gt; &apos;roles/admin&apos;,&#10;&apos;members&apos; =&gt; [&#10;&apos;user:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos;,&#10;&apos;user2:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos;&#10;],&#10;&apos;condition&apos; =&gt; [&#10;&apos;title&apos; =&gt; &apos;match-prefix&apos;,&#10;&apos;description&apos; =&gt; &apos;Applies to objects matching a prefix&apos;,&#10;&apos;expression&apos; =&gt;&#10;&apos;resource.name.startsWith(&quot;projects/_/buckets/bucket-name/objects/prefix-a-&quot;)&apos;&#10;]&#10;]&#10;],&#10;];s&#10;$builder = new PolicyBuilder($policy);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$policy&lt;/b&gt;: A policy array;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;larray $policy;;p;;x">
</treenode>
<treenode node="addBinding;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;157;5;167;;;;vpos;;v;;aPolicyBuilder;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addBinding($role, array $members)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a new binding to the policy.&#10;This method will fail with an InvalidOpereationException if it is&#10;called on a Policy with a version greater than 1 as that indicates&#10;a more complicated policy than this method is prepared to handle.&#10;Changes to such policies must be made manually by the setBindings()&#10;method.&#10;Example:&#10;```&#10;$builder-&gt;addBinding(&apos;roles/admin&apos;, [ &apos;user:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos; ]);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&lt;b&gt;throws&lt;/b&gt;: BadMethodCallException if the policy&apos;s version is greater than 1.&#10;&lt;b&gt;deprecated&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$role&lt;/b&gt;: A valid role for the service&#10;    array &lt;b&gt;$members&lt;/b&gt;: An array of members to assign to the binding;;d4,158;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $role;;parray $members;;p;;x;;x">
</treenode>
<treenode node="removeBinding;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;199;5;224;;;;vpos;;v;;aPolicyBuilder;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeBinding($role, array $members)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Remove a binding from the policy.&#10;This method will fail with a BadMethodCallException if it is&#10;called on a Policy with a version greater than 1 as that indicates&#10;a more complicated policy than this method is prepared to handle.&#10;Changes to such policies must be made manually by the setBindings()&#10;method.&#10;Example:&#10;```&#10;$builder-&gt;setBindings([&#10;[&#10;&apos;role&apos; =&gt; &apos;roles/admin&apos;,&#10;&apos;members&apos; =&gt; [&#10;&apos;user:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos;,&#10;&apos;user2:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos;&#10;]&#10;]&#10;]);s&#10;$builder-&gt;removeBinding(&apos;roles/admin&apos;, [ &apos;user:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos; ]);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&lt;b&gt;throws&lt;/b&gt;: BadMethodCallException if the policy&apos;s version is greater than 1.&#10;&lt;b&gt;deprecated&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$role&lt;/b&gt;: A valid role for the service&#10;    array &lt;b&gt;$members&lt;/b&gt;: An array of members to remove from the role;;d4,200;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $role;;parray $members;;p;;x;;x">
</treenode>
<treenode node="result;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;274;5;281;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    result()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a policy array with data in the correct format.&#10;Example:&#10;```&#10;$policy = $builder-&gt;result();s&#10;```&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array of policy data;;d4,275;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setBindings;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;129;5;133;;;;vpos;;v;;aPolicyBuilder;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setBindings(array $bindings = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Override all stored bindings on the policy.&#10;Example:&#10;```&#10;$builder-&gt;setBindings([&#10;[&#10;&apos;role&apos; =&gt; &apos;roles/admin&apos;,&#10;&apos;members&apos; =&gt; [&#10;&apos;user:admin&#10;&lt;b&gt;domain&lt;/b&gt;: .com&apos;&#10;],&#10;&apos;condition&apos; =&gt; [&#10;&apos;expression&apos; =&gt;&#10;&apos;request.time &lt; timestamp(&quot;2020-07-01T00:00:00.000Z&quot;)&apos;&#10;]&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$bindings&lt;/b&gt;: [optional] An array of bindings;;d4,130;;b1,0;;m0;;e0;;i0;;o;;k;;larray $bindings;;p;;x">
</treenode>
<treenode node="setEtag;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;239;5;244;;;;vpos;;v;;aPolicyBuilder;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setEtag($etag)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Update the etag on the policy.&#10;Example:&#10;```&#10;$builder-&gt;setEtag($oldPolicy[&apos;etag&apos;]);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$etag&lt;/b&gt;: used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that updates to existing policies make use of the etag to avoid race conditions.;;d4,240;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $etag;;p;;x">
</treenode>
<treenode node="setVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f11;257;5;262;;;;vpos;;v;;aPolicyBuilder;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setVersion($version)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Update the version of the policy.&#10;Example:&#10;```&#10;$builder-&gt;setVersion(1);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$version&lt;/b&gt;: Version of the Policy. **Defaults to** `0`.;;d4,258;;b1,0;;m0;;e0;;i0;;o;;k;;lint $version;;p;;x">
</treenode>
<treenode node="validateConditions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f12;293;5;305;;;;vpos;;v;;a;;r;;d4,294;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="validatePolicyVersion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Iam\PolicyBuilder.php;f12;283;5;291;;;;vpos;;v;;a;;r;;d4,284;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Pool;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Pool.php;f0;23;1;124;;;;vpos;;v;;aPromisorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Pool implements PromisorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends an iterator of requests concurrently using a capped pool size.&#10;The pool will read from an iterator until it is cancelled or until the&#10;iterator is consumed. When a request is yielded, the request is sent after&#10;applying the &quot;request_options&quot; request options (if provided in the ctor).&#10;When a function is yielded by the iterator, the function is provided the&#10;&quot;request_options&quot; array that should be merged on top of any existing&#10;options, and the function MUST then return a wait-able promise.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Pool.php;f11;40;5;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(ClientInterface $client, $requests, array $config = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ClientInterface &lt;b&gt;$client&lt;/b&gt;: Client used to send the requests.&#10;    array|\Iterator &lt;b&gt;$requests&lt;/b&gt;: Requests or functions that return requests to send concurrently.&#10;    array &lt;b&gt;$config&lt;/b&gt;: Associative array of options - concurrency: (int) Maximum number of requests to send concurrently - options: Array of request options to apply to each request. - fulfilled: (callable) Function to invoke when a request completes. - rejected: (callable) Function to invoke when a request is rejected.;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lClientInterface $client;;parray|\Iterator $requests;;parray $config;;p;;x;;x;;x">
</treenode>
<treenode node="batch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Pool.php;f18;95;5;105;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    batch(ClientInterface $client, $requests, array $options = []): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends multiple requests concurrently and returns an array of responses&#10;and exceptions that uses the same ordering as the provided requests.&#10;IMPORTANT: This method keeps every request and response in memory, and&#10;as such, is NOT recommended when sending a large number or an&#10;indeterminate number of requests concurrently.&#10;&lt;b&gt;see&lt;/b&gt;: \GuzzleHttp\Pool::__construct}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if the event format is incorrect.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ClientInterface &lt;b&gt;$client&lt;/b&gt;: Client used to send the requests&#10;    array|\Iterator &lt;b&gt;$requests&lt;/b&gt;: Requests to send concurrently.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Passes through the options available in {&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns an array containing the response or an exception in the same order that the requests were sent.;;d4,96;;b1,5;;m0;;e0;;i0;;o;;k;;lClientInterface $client;;parray|\Iterator $requests;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="cmpCallback;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Pool.php;f19;110;5;123;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cmpCallback(array &amp;$options, string $name, array &amp;$results): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Execute callback(s);;d4,111;;b3,5;;m0;;e0;;i0;;o;;k;;loptions;;pname;;presults;;p;;x;;x;;x">
</treenode>
<treenode node="promise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Pool.php;f11;72;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    promise(): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get promise;;d4,73;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="PrepareBodyMiddleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\PrepareBodyMiddleware.php;f0;13;1;103;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PrepareBodyMiddleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prepares requests that contain a body, adding the Content-Length,&#10;Content-Type, and Expect headers.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\PrepareBodyMiddleware.php;f11;23;5;26;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(callable $nextHandler)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(RequestInterface,: array): PromiseInterface $nextHandler Next handler to invoke.;;d4,24;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable(RequestInterface,;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\PrepareBodyMiddleware.php;f11;28;5;64;;;;vpos;;v;;a PromiseInterface;;r;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="addExpectHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\PrepareBodyMiddleware.php;f12;69;5;102;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addExpectHeader(RequestInterface $request, array $options, array &amp;$modify): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add expect header;;d4,70;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pmodify;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="ProcessHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f0;26;1;192;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ProcessHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores to STDIN of any process, specified by a command.&#10;Usage example:&#10;&lt;pre&gt;&#10;$log = new Logger(&apos;myLogger&apos;);s&#10;$log-&gt;pushHandler(new ProcessHandler(&apos;/usr/bin/php /var/www/monolog/someScript.php&apos;));s&#10;&lt;/pre&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Kolja Zuelsdorf &lt;koljaz&#10;&lt;b&gt;web&lt;/b&gt;: .de&gt;;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DESCRIPTOR_SPEC;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f19;53;35;53;;;;vposarray;;v;;a;;r[&#10;        0 =&gt; [&apos;pipe&apos;;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f11;67;5;80;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$command&lt;/b&gt;: Command for the process to start. Absolute paths are recommended, especially if you do not use the $cwd parameter.&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not.&#10;    string|null &lt;b&gt;$cwd&lt;/b&gt;: &quot;Current working directory&quot; (CWD) for the process to be executed in.;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $command;;pstring|int $level;;pbool $bubble;;pstring|null $cwd;;p;;x;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f11;182;5;191;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,183;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ensureProcessIsStarted;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f12;103;5;110;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ensureProcessIsStarted(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Makes sure that the process is actually started, and if not, starts it,&#10;assigns the stream pipes, and handles startup errors, if any.;;d4,104;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handleStartupErrors;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f12;129;5;143;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleStartupErrors(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Selects the STDERR stream, handles upcoming startup errors, and throws an exception, if any.&#10;&lt;b&gt;throws&lt;/b&gt;: \UnexpectedValueException;;d4,130;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="readProcessErrors;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f14;164;5;167;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    readProcessErrors(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reads the errors of the process, if there are any.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Empty string if there are no errors.;;d4,165;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="selectErrorStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f14;150;5;156;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    selectErrorStream()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Selects the STDERR stream.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |bool;;d4,151;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="startProcess;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f12;115;5;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    startProcess(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Starts the actual process and sets all streams to non-blocking.;;d4,116;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f14;87;5;97;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes the record down to the log of the implementing handler&#10;&lt;b&gt;throws&lt;/b&gt;: \UnexpectedValueException;;d4,88;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="writeProcessInput;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessHandler.php;f14;174;5;177;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    writeProcessInput(string $string): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes to the input stream of the opened process.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;;;d4,175;;b2,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="ProcessIdProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\ProcessIdProcessor.php;f0;18;1;26;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ProcessIdProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds value of getmypid into records&#10;&lt;b&gt;author&lt;/b&gt;: Andreas Hörnicke;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\ProcessIdProcessor.php;f11;20;5;25;;;;vpos;;v;;a array;;r;;d4,21;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="ProcessableHandlerTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerTrait.php;f0;20;1;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ProcessableHandlerTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper trait for implementing ProcessableInterface&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="popProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerTrait.php;f11;40;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    popProcessor(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="processRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerTrait.php;f14;52;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    processRecord(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Processes a record.;;d4,53;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="pushProcessor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerTrait.php;f11;30;5;35;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pushProcessor(callable $callback): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;lcallback;;p;;x">
</treenode>
<treenode node="resetProcessors;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ProcessableHandlerTrait.php;f14;61;5;68;;;;vpos;;v;;a void;;r;;d4,62;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Promise;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f0;9;1;277;;;;vpos;;v;;aPromiseInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Promise implements PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Promises/A+ implementation that avoids recursion when possible.&#10;&lt;b&gt;link&lt;/b&gt;: https://promisesaplus.com/;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;22;5;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        callable $waitFn = null,&#10;        callable $cancelFn = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$waitFn&lt;/b&gt;: Fn that when invoked resolves the promise.&#10;    callable &lt;b&gt;$cancelFn&lt;/b&gt;: Fn that when invoked cancels the promise.;;d6,25;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $waitFn;;pcallable $cancelFn;;p;;x;;x">
</treenode>
<treenode node="callHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f19;182;5;216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    callHandler($index, $value, array $handler)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Call a stack of handlers using a specific callback index and value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$index&lt;/b&gt;: 1 (resolve) or 2 (reject).&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: Value to pass to the callback.&#10;    array &lt;b&gt;$handler&lt;/b&gt;: Array of handler data (promise and callbacks).;;d4,183;;b3,5;;m0;;e0;;i0;;o;;k;;lint $index;;pmixed $value;;parray $handler;;p;;x;;x;;x">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;80;5;105;;;;vpos;;v;;a;;r;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;75;5;78;;;;vpos;;v;;a;;r;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="invokeWaitFn;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f12;242;5;259;;;;vpos;;v;;a;;r;;d4,243;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="invokeWaitList;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f12;261;5;276;;;;vpos;;v;;a;;r;;d4,262;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="otherwise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;54;5;57;;;;vpos;;v;;a;;r;;d4,55;;b1,0;;m0;;e0;;i0;;o;;k;;lonRejected;;p;;x">
</treenode>
<treenode node="reject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;112;5;115;;;;vpos;;v;;a;;r;;d4,113;;b1,0;;m0;;e0;;i0;;o;;k;;lreason;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;107;5;110;;;;vpos;;v;;a;;r;;d4,108;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="settle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f12;117;5;173;;;;vpos;;v;;a;;r;;d4,118;;b3,0;;m0;;e0;;i0;;o;;k;;lstate;;pvalue;;p;;x;;x">
</treenode>
<treenode node="then;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;30;5;52;;;;vpos;;v;;a;;r;;d6,33;;b1,0;;m0;;e0;;i0;;o;;k;;lonFulfilled;;ponRejected;;p;;x;;x">
</treenode>
<treenode node="wait;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f11;59;5;73;;;;vpos;;v;;a;;r;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lunwrap;;p;;x">
</treenode>
<treenode node="waitIfPending;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Promise.php;f12;218;5;240;;;;vpos;;v;;a;;r;;d4,219;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Proxy;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php;f0;13;1;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Proxy&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides basic proxies for handlers.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="wrapStreaming;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php;f18;44;5;49;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    wrapStreaming(callable $default, callable $streaming): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends streaming requests to a streaming compatible handler while sending&#10;all other requests to a default handler.&#10;This, for example, could be useful for taking advantage of the&#10;performance benefits of curl while still supporting true streaming&#10;through the StreamHandler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(\Psr\Http\Message\RequestInterface,: array): \GuzzleHttp\Promise\PromiseInterface $default   Handler used for non-streaming responses&#10;    callable(\Psr\Http\Message\RequestInterface,: array): \GuzzleHttp\Promise\PromiseInterface $streaming Handler used for streaming responses&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (\Psr\Http\Message\RequestInterface, array): \GuzzleHttp\Promise\PromiseInterface Returns the composed handler.;;d4,45;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable(\Psr\Http\Message\RequestInterface,;;pcallable(\Psr\Http\Message\RequestInterface,;;p;;x;;x">
</treenode>
<treenode node="wrapSync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\Proxy.php;f18;24;5;29;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    wrapSync(callable $default, callable $sync): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends synchronous requests to a specific handler while sending all other&#10;requests to another handler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(\Psr\Http\Message\RequestInterface,: array): \GuzzleHttp\Promise\PromiseInterface $default Handler used for normal responses&#10;    callable(\Psr\Http\Message\RequestInterface,: array): \GuzzleHttp\Promise\PromiseInterface $sync    Handler used for synchronous responses.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (\Psr\Http\Message\RequestInterface, array): \GuzzleHttp\Promise\PromiseInterface Returns the composed handler.;;d4,25;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable(\Psr\Http\Message\RequestInterface,;;pcallable(\Psr\Http\Message\RequestInterface,;;p;;x;;x">
</treenode>
</treenode>
<treenode node="PsrHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PsrHandler.php;f0;26;1;96;;;;vpos;;v;;aAbstractHandler;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PsrHandler extends AbstractHandler implements FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Proxies log messages to an existing PSR-3 compliant logger.&#10;If a formatter is configured, the formatter&apos;s output MUST be a string and the&#10;formatted message will be fed to the wrapped PSR logger instead of the original&#10;log record&apos;s message.&#10;&lt;b&gt;author&lt;/b&gt;: Michael Moussa &lt;michael.moussa&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PsrHandler.php;f11;45;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(LoggerInterface $logger, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    LoggerInterface &lt;b&gt;$logger&lt;/b&gt;: The underlying PSR-3 compliant logger to which messages will be proxied&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,46;;b1,0;;m0;;e0;;i0;;o;;k;;lLoggerInterface $logger;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PsrHandler.php;f11;88;5;95;;;;vpos;;v;;aFormatterInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the formatter.;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PsrHandler.php;f11;55;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PsrHandler.php;f11;76;5;81;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the formatter.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FormatterInterface &lt;b&gt;$formatter&lt;/b&gt;;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;lFormatterInterface $formatter;;p;;x">
</treenode>
</treenode>
<treenode node="PsrLogMessageProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\PsrLogMessageProcessor.php;f0;22;1;86;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PsrLogMessageProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Processes a record&apos;s message according to PSR-3 rules&#10;It replaces {foo} with the value from $context[&apos;foo&apos;]&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="SIMPLE_DATE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\PsrLogMessageProcessor.php;f16;24;28;24;;;;vpos;;v;;a;;r&quot;Y-m-d\TH:i:s.uP&quot;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\PsrLogMessageProcessor.php;f11;36;5;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(?string $dateFormat = null, bool $removeUsedContextFields = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$dateFormat&lt;/b&gt;: The format of the timestamp: one supported by DateTime::format&#10;    bool &lt;b&gt;$removeUsedContextFields&lt;/b&gt;: If set to true the fields interpolated into message gets unset;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $dateFormat;;pbool $removeUsedContextFields;;p;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\PsrLogMessageProcessor.php;f11;46;5;85;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(array $record): array&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="PumpStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f0;16;1;167;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PumpStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a read only stream that pumps data from a PHP callable.&#10;When invoking the provided callable, the PumpStream will pass the amount of&#10;data requested to read to the callable. The callable can choose to ignore&#10;this value and return fewer or more bytes than requested. Any extra data&#10;returned by the provided callable is buffered internally until drained using&#10;the read() function of the PumpStream. The provided callable MUST return&#10;false when there is no more data to read.;;d0,17;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;43;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(callable $source, array $options = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$source&lt;/b&gt;: Source of the stream data. The callable MAY accept an integer argument used to control the amount of data to return. The callable MUST return a string when called, or false on error or EOF.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Stream options: - metadata: Hash of metadata to use with stream. - size: Size of the stream, if known.;;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $source;;parray $options;;p;;x;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;51;5;58;;;;vpos;;v;;a;;r;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;60;5;63;;;;vpos;;v;;a;;r;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;65;5;71;;;;vpos;;v;;a;;r;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;83;5;86;;;;vpos;;v;;a;;r;;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;134;5;142;;;;vpos;;v;;a;;r;;d4,135;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;144;5;151;;;;vpos;;v;;a;;r;;d4,145;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;73;5;76;;;;vpos;;v;;a;;r;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;113;5;116;;;;vpos;;v;;a;;r;;d4,114;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;88;5;91;;;;vpos;;v;;a;;r;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;103;5;106;;;;vpos;;v;;a;;r;;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="pump;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f12;153;5;166;;;;vpos;;v;;a;;r;;d4,154;;b3,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;118;5;132;;;;vpos;;v;;a;;r;;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;93;5;96;;;;vpos;;v;;a;;r;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;98;5;101;;;;vpos;;v;;a;;r;;d4,99;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;78;5;81;;;;vpos;;v;;a;;r;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\PumpStream.php;f11;108;5;111;;;;vpos;;v;;a;;r;;d4,109;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="PushoverHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f0;22;1;202;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PushoverHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends notifications through the pushover api to mobile phones&#10;&lt;b&gt;author&lt;/b&gt;: Sebastian Göttschkes &lt;sebastian.goettschkes&#10;&lt;b&gt;googlemail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://www.pushover.net/api;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f11;84;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        string $token,&#10;        $users,&#10;        ?string $title = null,&#10;        $level = Logger::CRITICAL,&#10;        bool $bubble = true,&#10;        bool $useSSL = true,&#10;        $highPriorityLevel = Logger::CRITICAL,&#10;        $emergencyLevel = Logger::EMERGENCY,&#10;        int $retry = 30,&#10;        int $expire = 25200&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: Pushover api token&#10;    string|array &lt;b&gt;$users&lt;/b&gt;: Pushover user id or array of ids the message will be sent to&#10;    string|null &lt;b&gt;$title&lt;/b&gt;: Title sent to the Pushover API&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    bool &lt;b&gt;$useSSL&lt;/b&gt;: Whether to connect via SSL. Required when pushing messages to users that are not the pushover.net app owner. OpenSSL is required for this option.&#10;    string|int &lt;b&gt;$highPriorityLevel&lt;/b&gt;: The minimum logging level at which this handler will start sending &quot;high priority&quot; requests to the Pushover API&#10;    string|int &lt;b&gt;$emergencyLevel&lt;/b&gt;: The minimum logging level at which this handler will start sending &quot;emergency&quot; requests to the Pushover API&#10;    int &lt;b&gt;$retry&lt;/b&gt;: The retry parameter specifies how often (in seconds) the Pushover servers will send the same notification to the user.&#10;    int &lt;b&gt;$expire&lt;/b&gt;: The expire parameter specifies how many seconds your notification will continue to be retried for (every retry seconds).;;d6,95;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pstring|array $users;;pstring|null $title;;pstring|int $level;;pbool $bubble;;pbool $useSSL;;pstring|int $highPriorityLevel;;pstring|int $emergencyLevel;;pint $retry;;pint $expire;;p;;x;;x;;x;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="buildContent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f12;115;5;154;;;;vpos;;v;;a string;;r;;d4,116;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="buildHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f12;156;5;165;;;;vpos;;v;;a string;;r;;d4,157;;b3,0;;m0;;e0;;i0;;o;;k;;lcontent;;p;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f14;108;5;113;;;;vpos;;v;;a string;;r;;d4,109;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="setEmergencyLevel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f11;186;5;191;;;;vpos;;v;;a self;;r;;d4,187;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="setHighPriorityLevel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f11;179;5;184;;;;vpos;;v;;a self;;r;;d4,180;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="useFormattedMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f11;196;5;201;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    useFormattedMessage(bool $value): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Use the formatted message?;;d4,197;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\PushoverHandler.php;f14;167;5;177;;;;vpos;;v;;a void;;r;;d4,168;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="Query;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Query.php;f6;4;1;107;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="build;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Query.php;f18;69;5;106;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    build(array $params, $encoding = PHP_QUERY_RFC3986)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Build a query string from an array of key value pairs.&#10;This function can use the return value of `parse()` to build a query&#10;string. This function does not modify the provided keys when an array is&#10;encountered (like `http_build_query()` would).&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;: Query string parameters.&#10;    int|false &lt;b&gt;$encoding&lt;/b&gt;: Set to false to not encode, PHP_QUERY_RFC3986 to encode using RFC3986, or PHP_QUERY_RFC1738 to encode using RFC1738.;;d4,70;;b1,5;;m0;;e0;;i0;;o;;k;;larray $params;;pint|false $encoding;;p;;x;;x">
</treenode>
<treenode node="parse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Query.php;f18;19;5;54;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse($str, $urlEncoding = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse a query string into an associative array.&#10;If multiple values are found for the same key, the value of that key&#10;value pair will become an array. This function does not parse nested&#10;PHP style arrays into an associative array (e.g., `foo[a]=1&amp;foo[b]=2`&#10;will be parsed into `[&apos;foo[a]&apos; =&gt; &apos;1&apos;, &apos;foo[b]&apos; =&gt; &apos;2&apos;])`.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: Query string to parse&#10;    int|bool &lt;b&gt;$urlEncoding&lt;/b&gt;: How the query string is encoded;;d4,20;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $str;;pint|bool $urlEncoding;;p;;x;;x">
</treenode>
</treenode>
<treenode node="QueueOverflowException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\QueueOverflowException.php;f0;28;1;34;;;;vpos;;v;;aRuntimeException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class QueueOverflowException extends \RuntimeException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown in {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Batch\SysvProcessor::submit()}&#10;method when it cannot add an item to the message queue.&#10;Possible causes include:&#10;- batch daemon is not running&#10;- no job registered for this queue&#10;- items are submitted faster than a job can handle them;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\QueueOverflowException.php;f11;30;5;33;;;;vpos;;v;;a;;r;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ReadStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ReadStream.php;f0;26;1;92;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ReadStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A Stream implementation that wraps a GuzzleHttp download stream to&#10;provide `getSize()` from the response headers.;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ReadStream.php;f11;37;5;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(StreamInterface $stream)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new ReadStream.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: The stream interface to wrap;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ReadStream.php;f11;49;5;52;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the full size of the buffer. If the underlying stream does&#10;not report it&apos;s size, try to fetch the size from the Content-Length&#10;response header.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The size of the stream.;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSizeFromMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ReadStream.php;f12;60;5;68;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSizeFromMetadata()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attempt to fetch the size from the Content-Length response header.&#10;If we cannot, return 0.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The Size of the stream;;d4,61;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\ReadStream.php;f11;80;5;91;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    read($length)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read bytes from the underlying buffer, retrying until we have read&#10;enough bytes or we cannot read any more. We do this because the&#10;internal C code for filling a buffer does not account for when&#10;we try to read large chunks from a user-land stream that does not&#10;return enough bytes.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$length&lt;/b&gt;: The number of bytes to read.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Read bytes from the underlying stream.;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;lint $length;;p;;x">
</treenode>
</treenode>
<treenode node="RedirectMiddleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f0;19;1;215;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RedirectMiddleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Request redirect middleware.&#10;Apply this middleware like other middleware using&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: \GuzzleHttp\Middleware::redirect()}.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="HISTORY_HEADER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f16;21;31;21;;;;vpos;;v;;a;;r&apos;X-Guzzle-Redirect-History&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="STATUS_HISTORY_HEADER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f16;23;38;23;;;;vpos;;v;;a;;r&apos;X-Guzzle-Redirect-Status-History&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f11;44;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(callable $nextHandler)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable(RequestInterface,: array): PromiseInterface $nextHandler Next handler to invoke.;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable(RequestInterface,;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f11;49;5;74;;;;vpos;;v;;a PromiseInterface;;r;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="checkRedirect;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f11;79;5;110;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    checkRedirect(RequestInterface $request, array $options, ResponseInterface $response)&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |PromiseInterface;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;presponse;;p;;x;;x;;x">
</treenode>
<treenode node="guardMax;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f12;138;5;148;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    guardMax(RequestInterface $request, ResponseInterface $response, array &amp;$options): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check for too many redirects&#10;&lt;b&gt;throws&lt;/b&gt;: TooManyRedirectsException Too many redirects.;;d4,139;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;presponse;;poptions;;p;;x;;x;;x">
</treenode>
<treenode node="modifyRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f11;150;5;196;;;;vpos;;v;;a RequestInterface;;r;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;presponse;;p;;x;;x;;x">
</treenode>
<treenode node="redirectUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f12;201;5;214;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    redirectUri(RequestInterface $request, ResponseInterface $response, array $protocols): UriInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the appropriate URL on the request based on the location header;;d4,202;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;presponse;;pprotocols;;p;;x;;x;;x">
</treenode>
<treenode node="withTracking;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RedirectMiddleware.php;f12;115;5;131;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withTracking(PromiseInterface $promise, string $uri, int $statusCode): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Enable tracking on promise.;;d4,116;;b3,0;;m0;;e0;;i0;;o;;k;;lpromise;;puri;;pstatusCode;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="RedisHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisHandler.php;f0;28;1;95;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RedisHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs to a Redis key using rpush&#10;usage example:&#10;$log = new Logger(&apos;application&apos;);s&#10;$redis = new RedisHandler(new Predis\Client(&quot;tcp://localhost:6379&quot;), &quot;logs&quot;, &quot;prod&quot;);s&#10;$log-&gt;pushHandler($redis);s&#10;&lt;b&gt;author&lt;/b&gt;: Thomas Tourlourat &lt;thomas&#10;&lt;b&gt;tourlourat&lt;/b&gt;: .com&gt;;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisHandler.php;f11;41;5;52;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($redis, string $key, $level = Logger::DEBUG, bool $bubble = true, int $capSize = 0)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Predis\Client|\Redis &lt;b&gt;$redis&lt;/b&gt;: The redis instance&#10;    string &lt;b&gt;$key&lt;/b&gt;: The key name to push records to&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    int &lt;b&gt;$capSize&lt;/b&gt;: Number of entries to limit list size to, 0 = unlimited;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;l\Predis\Client|\Redis $redis;;pstring $key;;pstring|int $level;;pbool $bubble;;pint $capSize;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisHandler.php;f14;91;5;94;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,92;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisHandler.php;f14;57;5;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,58;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="writeCapped;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisHandler.php;f14;70;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    writeCapped(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Write and cap the collection&#10;Writes the record to the redis list and caps its;;d4,71;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="RedisPubSubHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisPubSubHandler.php;f0;28;1;66;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RedisPubSubHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends the message to a Redis Pub/Sub channel using PUBLISH&#10;usage example:&#10;$log = new Logger(&apos;application&apos;);s&#10;$redis = new RedisPubSubHandler(new Predis\Client(&quot;tcp://localhost:6379&quot;), &quot;logs&quot;, Logger::WARNING);s&#10;$log-&gt;pushHandler($redis);s&#10;&lt;b&gt;author&lt;/b&gt;: Gaëtan Faugère &lt;gaetan&#10;&lt;b&gt;fauge&lt;/b&gt;: .re&gt;;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisPubSubHandler.php;f11;39;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($redis, string $key, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Predis\Client|\Redis &lt;b&gt;$redis&lt;/b&gt;: The redis instance&#10;    string &lt;b&gt;$key&lt;/b&gt;: The channel key to publish records to&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;l\Predis\Client|\Redis $redis;;pstring $key;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisPubSubHandler.php;f14;62;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,63;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RedisPubSubHandler.php;f14;54;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritDoc&lt;/b&gt;: };;d4,55;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="RegexFileFilter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\RegexFileFilter.php;f0;22;1;30;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RegexFileFilter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A regex exclude path;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\RegexFileFilter.php;f11;26;5;29;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m0;;e0;;i0;;o;;k;;lregex;;p;;x">
</treenode>
</treenode>
<treenode node="Registry;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f0;37;1;132;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Registry&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog log registry&#10;Allows to get `Logger` instances in the global scope&#10;via static method calls on this class.&#10;&lt;code&gt;&#10;$application = new Monolog\Logger(&apos;application&apos;);s&#10;$api = new Monolog\Logger(&apos;api&apos;);s&#10;Monolog\Registry::addLogger($application);s&#10;Monolog\Registry::addLogger($api);s&#10;function testLogger()&#10;{&#10;Monolog\Registry::api()-&gt;error(&apos;Sent to $api Logger instance&apos;);s&#10;Monolog\Registry::application()-&gt;error(&apos;Sent to $application Logger instance&apos;);s&#10;}&#10;&lt;/code&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Tomas Tatarko &lt;tomas&#10;&lt;b&gt;tatarko&lt;/b&gt;: .sk&gt;;;d0,38;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__callStatic;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f18;128;5;131;;;;vpos;;v;;aLogger;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __callStatic($name, $arguments)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets Logger instance from the registry via static method call&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If named Logger instance is not in the registry&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name of the requested Logger instance&#10;    array &lt;b&gt;$arguments&lt;/b&gt;: Arguments passed to static method call&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Requested instance of Logger;;d4,129;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $name;;parray $arguments;;p;;x;;x">
</treenode>
<treenode node="addLogger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f18;54;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addLogger(Logger $logger, ?string $name = null, bool $overwrite = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds new logging channel to the registry&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If $overwrite set to false and named Logger instance already exists&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Logger &lt;b&gt;$logger&lt;/b&gt;: Instance of the logging channel&#10;    string|null &lt;b&gt;$name&lt;/b&gt;: Name of the logging channel ($logger-&gt;getName() by default)&#10;    bool &lt;b&gt;$overwrite&lt;/b&gt;: Overwrite instance in the registry if the given name already exists?;;d4,55;;b1,5;;m0;;e0;;i0;;o;;k;;lLogger $logger;;pstring|null $name;;pbool $overwrite;;p;;x;;x;;x">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f18;100;5;103;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clears the registry;;d4,101;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getInstance;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f18;111;5;118;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getInstance($name): Logger&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets Logger instance from the registry&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If named Logger instance is not in the registry&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name of the requested Logger instance;;d4,112;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="hasLogger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f18;70;5;79;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasLogger($logger): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks if such logging channel exists by name or instance&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|Logger &lt;b&gt;$logger&lt;/b&gt;: Name or logger instance;;d4,71;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|Logger $logger;;p;;x">
</treenode>
<treenode node="removeLogger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Registry.php;f18;86;5;95;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeLogger($logger): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes instance from registry by name or instance&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|Logger &lt;b&gt;$logger&lt;/b&gt;: Name or logger instance;;d4,87;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|Logger $logger;;p;;x">
</treenode>
</treenode>
<treenode node="RejectedPromise;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f0;10;1;90;;;;vpos;;v;;aPromiseInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RejectedPromise implements PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A promise that has been rejected.&#10;Thenning off of this promise will invoke the onRejected callback&#10;immediately and ignore other callbacks.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;14;5;23;;;;vpos;;v;;a;;r;;d4,15;;b1,0;;m0;;e0;;i0;;o;;k;;lreason;;p;;x">
</treenode>
<treenode node="cancel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;86;5;89;;;;vpos;;v;;a;;r;;d4,87;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;69;5;72;;;;vpos;;v;;a;;r;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="otherwise;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;55;5;58;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;lonRejected;;p;;x">
</treenode>
<treenode node="reject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;79;5;84;;;;vpos;;v;;a;;r;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;lreason;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;74;5;77;;;;vpos;;v;;a;;r;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="then;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;25;5;53;;;;vpos;;v;;a;;r;;d6,28;;b1,0;;m0;;e0;;i0;;o;;k;;lonFulfilled;;ponRejected;;p;;x;;x">
</treenode>
<treenode node="wait;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectedPromise.php;f11;60;5;67;;;;vpos;;v;;a;;r;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;lunwrap;;pdefaultDelivery;;p;;x;;x">
</treenode>
</treenode>
<treenode node="RejectionException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectionException.php;f0;9;1;47;;;;vpos;;v;;aRuntimeException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RejectionException extends \RuntimeException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A special exception that is thrown when waiting on a rejected promise.&#10;The reason value is available via the getReason() method.;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectionException.php;f11;18;5;36;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($reason, $description = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;: Rejection reason.&#10;    string &lt;b&gt;$description&lt;/b&gt;: Optional description;;d4,19;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $reason;;pstring $description;;p;;x;;x">
</treenode>
<treenode node="getReason;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\RejectionException.php;f11;43;5;46;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getReason()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the rejection reason.;;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Request;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f0;12;1;151;;;;vpos;;v;;aRequestInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Request implements RequestInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PSR-7 request implementation.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;32;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $method,&#10;        $uri,&#10;        array $headers = [],&#10;        $body = null,&#10;        $version = &apos;1.1&apos;&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI&#10;    array &lt;b&gt;$headers&lt;/b&gt;: Request headers&#10;    string|null|resource|StreamInterface &lt;b&gt;$body&lt;/b&gt;: Request body&#10;    string &lt;b&gt;$version&lt;/b&gt;: Protocol version;;d6,38;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $headers;;pstring|null|resource|StreamInterface $body;;pstring $version;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="assertMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f12;145;5;150;;;;vpos;;v;;a;;r;;d4,146;;b3,0;;m0;;e0;;i0;;o;;k;;lmethod;;p;;x">
</treenode>
<treenode node="getMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;88;5;91;;;;vpos;;v;;a;;r;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRequestTarget;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;58;5;73;;;;vpos;;v;;a;;r;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;101;5;104;;;;vpos;;v;;a;;r;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="updateHostFromUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f12;122;5;143;;;;vpos;;v;;a;;r;;d4,123;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;93;5;99;;;;vpos;;v;;a;;r;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;lmethod;;p;;x">
</treenode>
<treenode node="withRequestTarget;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;75;5;86;;;;vpos;;v;;a;;r;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;lrequestTarget;;p;;x">
</treenode>
<treenode node="withUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Request.php;f11;106;5;120;;;;vpos;;v;;a;;r;;d4,107;;b1,0;;m0;;e0;;i0;;o;;k;;luri;;ppreserveHost;;p;;x;;x">
</treenode>
</treenode>
<treenode node="RequestBuilder;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestBuilder.php;f0;27;1;163;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RequestBuilder&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds a PSR7 request from a service definition.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestBuilder.php;f11;57;5;76;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($servicePath, $baseUri, array $resourceRoot = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$servicePath&lt;/b&gt;&#10;    string &lt;b&gt;$baseUri&lt;/b&gt;&#10;    array &lt;b&gt;$resourceRoot&lt;/b&gt;: [optional];;d4,58;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $servicePath;;pstring $baseUri;;parray $resourceRoot;;p;;x;;x;;x">
</treenode>
<treenode node="build;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestBuilder.php;f11;88;5;150;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    build($resource, $method, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Build the request.&#10;&lt;b&gt;todo&lt;/b&gt;: complexity high, revisit&#10;&lt;b&gt;todo&lt;/b&gt;: consider validating against the schemas&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$resource&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional];;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $resource;;pstring $method;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="loadServiceDefinition;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestBuilder.php;f12;156;5;162;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    loadServiceDefinition($servicePath)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$servicePath&lt;/b&gt;;;d4,157;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $servicePath;;p;;x">
</treenode>
</treenode>
<treenode node="RequestException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f0;14;1;165;;;;vpos;;v;;aTransferException;;cRequestExceptionInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RequestException extends TransferException implements RequestExceptionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    HTTP Request exception;;d0,15;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f11;31;5;44;;;;vpos;;v;;a;;r;;d6,37;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;prequest;;presponse;;pprevious;;phandlerContext;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="create;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f18;63;5;113;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    create(&#10;        RequestInterface $request,&#10;        ResponseInterface $response = null,&#10;        \Throwable $previous = null,&#10;        array $handlerContext = [],&#10;        BodySummarizerInterface $bodySummarizer = null&#10;    ): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Factory method to create a new exception with a normalized error message&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request sent&#10;    ResponseInterface &lt;b&gt;$response&lt;/b&gt;: Response received&#10;    \Throwable|null &lt;b&gt;$previous&lt;/b&gt;: Previous exception&#10;    array &lt;b&gt;$handlerContext&lt;/b&gt;: Optional handler context&#10;    BodySummarizerInterface|null &lt;b&gt;$bodySummarizer&lt;/b&gt;: Optional body summarizer;;d12,69;;b1,5;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;pResponseInterface $response;;p\Throwable|null $previous;;parray $handlerContext;;pBodySummarizerInterface|null $bodySummarizer;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getHandlerContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f11;161;5;164;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandlerContext(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get contextual information about the error from the underlying handler.&#10;The contents of this array will vary depending on which handler you are&#10;using. It may also be just an empty array. Relying on this data will&#10;couple you to a specific handler, but can give more debug information&#10;when needed.;;d4,162;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f11;132;5;135;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRequest(): RequestInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the request that caused the exception;;d4,133;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f11;140;34;140;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the associated response;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f11;148;5;151;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasResponse(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if a response was received;;d4,149;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="obfuscateUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f19;118;5;127;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    obfuscateUri(UriInterface $uri): UriInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Obfuscates URI if there is a username and a password present;;d4,119;;b3,5;;m0;;e0;;i0;;o;;k;;luri;;p;;x">
</treenode>
<treenode node="wrapException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\RequestException.php;f18;49;5;52;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    wrapException(RequestInterface $request, \Throwable $e): RequestException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrap non-RequestExceptions with a RequestException;;d4,50;;b1,5;;m0;;e0;;i0;;o;;k;;lrequest;;pe;;p;;x;;x">
</treenode>
</treenode>
<treenode node="RequestOptions;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f6;11;1;263;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RequestOptions&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This class contains a list of built-in Guzzle request options.&#10;More documentation for each option can be found at http://guzzlephp.org/.&#10;&lt;b&gt;link&lt;/b&gt;: http://docs.guzzlephp.org/en/v6/request-options.html;;d0,12;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="ALLOW_REDIRECTS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;34;32;34;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    allow_redirects: (bool|array) Controls redirect behavior. Pass false&#10;to disable redirects, pass true to enable redirects, pass an&#10;associative to provide custom redirect settings. Defaults to &quot;false&quot;.&#10;This option only works if your handler has the RedirectMiddleware. When&#10;passing an associative array, you can provide the following key value&#10;pairs:&#10;- max: (int, default=5) maximum number of allowed redirects.&#10;- strict: (bool, default=false) Set to true to use strict redirects&#10;meaning redirect POST requests with POST requests vs. doing what most&#10;browsers do which is redirect POST requests with GET requests&#10;- referer: (bool, default=false) Set to true to enable the Referer&#10;header.&#10;- protocols: (array, default=[&apos;http&apos;, &apos;https&apos;]) Allowed redirect&#10;protocols.&#10;- on_redirect: (callable) PHP callable that is invoked when a redirect&#10;is encountered. The callable is invoked with the request, the redirect&#10;response that was received, and the effective URI. Any return value&#10;from the on_redirect function is ignored.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="AUTH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;43;21;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    auth: (array) Pass an array of HTTP authentication parameters to use&#10;with the request. The array must contain the username in index [0],&#10;the password in index [1], and you can optionally provide a built-in&#10;authentication type in index [2]. Pass null to disable authentication&#10;for a request.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="BODY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;49;21;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    body: (resource|string|null|int|float|StreamInterface|callable|\Iterator)&#10;Body to send in the request.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="CERT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;58;21;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    cert: (string|array) Set to a string to specify the path to a file&#10;containing a PEM formatted SSL client side certificate. If a password&#10;is required, then set cert to an array containing the path to the PEM&#10;file in the first array element followed by the certificate password&#10;in the second array element.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="CONNECT_TIMEOUT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;74;32;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    connect_timeout: (float, default=0) Float describing the number of&#10;seconds to wait while trying to connect to a server. Use 0 to wait&#10;indefinitely (the default behavior).;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="COOKIES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;67;24;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    cookies: (bool|GuzzleHttp\Cookie\CookieJarInterface, default=false)&#10;Specifies whether or not cookies are used in a request or what cookie&#10;jar to use or what cookies to send. This option only works if your&#10;handler has the `cookie` middleware. Valid values are `false` and&#10;an instance of {&#10;&lt;b&gt;see&lt;/b&gt;: \GuzzleHttp\Cookie\CookieJarInterface}.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEBUG;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;81;22;81;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    debug: (bool|resource) Set to true or set to a PHP stream returned by&#10;fopen()  enable debug output with the HTTP handler used to send a&#10;request.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DECODE_CONTENT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;88;31;88;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    decode_content: (bool, default=true) Specify whether or not&#10;Content-Encoding responses (gzip, deflate, etc.) are automatically&#10;decoded.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DELAY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;93;22;93;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    delay: (int) The amount of time to delay before sending in milliseconds.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="EXPECT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;111;23;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    expect: (bool|integer) Controls the behavior of the&#10;&quot;Expect: 100-Continue&quot; header.&#10;Set to `true` to enable the &quot;Expect: 100-Continue&quot; header for all&#10;requests that sends a body. Set to `false` to disable the&#10;&quot;Expect: 100-Continue&quot; header for all requests. Set to a number so that&#10;the size of the payload must be greater than the number in order to send&#10;the Expect header. Setting to a number will send the Expect header for&#10;all requests in which the size of the payload cannot be determined or&#10;where the body is not rewindable.&#10;By default, Guzzle will add the &quot;Expect: 100-Continue&quot; header when the&#10;size of the body of a request is greater than 1 MB and a request is&#10;using HTTP/1.1.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FORCE_IP_RESOLVE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;262;33;262;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    force_ip_resolve: (bool) Force client to use only ipv4 or ipv6 protocol;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FORM_PARAMS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;119;28;119;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    form_params: (array) Associative array of form field names to values&#10;where each value is a string or array of strings. Sets the Content-Type&#10;header to application/x-www-form-urlencoded when no Content-Type header&#10;is already present.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="HEADERS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;125;24;125;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    headers: (array) Associative array of HTTP headers. Each value MUST be&#10;a string or array of strings.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="HTTP_ERRORS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;133;28;133;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    http_errors: (bool, default=true) Set to false to disable exceptions&#10;when a non- successful HTTP response is received. By default,&#10;exceptions will be thrown for 4xx and 5xx responses. This option only&#10;works if your handler has the `httpErrors` middleware.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="IDN_CONVERSION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;141;31;141;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    idn: (bool|int, default=true) A combination of IDNA_* constants for&#10;idn_to_ascii() PHP&apos;s function (see &quot;options&quot; parameter). Set to false to&#10;disable IDN support completely, or to true to use the default&#10;configuration (IDNA_DEFAULT constant).;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="JSON;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;148;21;148;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    json: (mixed) Adds JSON data to a request. The provided value is JSON&#10;encoded and a Content-Type header of application/json will be added to&#10;the request if no Content-Type header is already present.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="MULTIPART;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;159;26;159;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    multipart: (array) Array of associative arrays, each containing a&#10;required &quot;name&quot; key mapping to the form field, name, a required&#10;&quot;contents&quot; key mapping to a StreamInterface|resource|string, an&#10;optional &quot;headers&quot; associative array of custom headers, and an&#10;optional &quot;filename&quot; key mapping to a string to send as the filename in&#10;the part. If no &quot;filename&quot; key is present, then no &quot;filename&quot; attribute&#10;will be added to the part.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ON_HEADERS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;166;27;166;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    on_headers: (callable) A callable that is invoked when the HTTP headers&#10;of the response have been received but the body has not yet begun to&#10;download.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ON_STATS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;177;25;177;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    on_stats: (callable) allows you to get access to transfer statistics of&#10;a request and access the lower level transfer details of the handler&#10;associated with your client. ``on_stats`` is a callable that is invoked&#10;when a handler has finished sending a request. The callback is invoked&#10;with transfer statistics about the request, the response received, or&#10;the error encountered. Included in the data is the total amount of time&#10;taken to send the request.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PROGRESS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;186;25;186;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    progress: (callable) Defines a function to invoke when transfer&#10;progress is made. The function accepts the following positional&#10;arguments: the total number of bytes expected to be downloaded, the&#10;number of bytes downloaded so far, the number of bytes expected to be&#10;uploaded, the number of bytes uploaded so far.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PROXY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;193;22;193;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    proxy: (string|array) Pass a string to specify an HTTP proxy, or an&#10;array to specify different proxies for different protocols (where the&#10;key is the protocol and the value is a proxy string).;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="QUERY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;201;22;201;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    query: (array|string) Associative array of query string values to add&#10;to the request. This option uses PHP&apos;s http_build_query() to create&#10;the string representation. Pass a string value if you need more&#10;control than what this method provides;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="READ_TIMEOUT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;252;29;252;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    read_timeout: (float, default=default_socket_timeout ini setting) Float describing&#10;the body read timeout, for stream requests.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SINK;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;208;21;208;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    sink: (resource|string|StreamInterface) Where the data of the&#10;response is written to. Defaults to a PHP temp stream. Providing a&#10;string will write data to a file by the given name.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SSL_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;224;24;224;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ssl_key: (array|string) Specify the path to a file containing a private&#10;SSL key in PEM format. If a password is required, then set to an array&#10;containing the path to the SSL key in the first array element followed&#10;by the password required for the certificate in the second element.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="STREAM;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;230;23;230;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    stream: Set to true to attempt to stream a response rather than&#10;download it all up-front.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SYNCHRONOUS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;216;28;216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    synchronous: (bool) Set to true to inform HTTP handlers that you intend&#10;on waiting on the response. This can be useful for optimizations. Note&#10;that a promise is still returned if you are using one of the async&#10;client methods.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TIMEOUT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;246;24;246;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    timeout: (float, default=0) Float describing the timeout of the&#10;request in seconds. Use 0 to wait indefinitely (the default behavior).;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="VERIFY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;240;23;240;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    verify: (bool|string, default=true) Describes the SSL certificate&#10;verification behavior of a request. Set to true to enable SSL&#10;certificate verification using the system CA bundle when available&#10;(the default). Set to false to disable certificate verification (this&#10;is insecure!). Set to a string to provide the path to a CA bundle on&#10;disk to enable verification using a custom certificate.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="VERSION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RequestOptions.php;f16;257;24;257;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    version: (float) Specifies the HTTP protocol version to attempt to use.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="RequestWrapper;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f0;35;1;446;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RequestWrapper&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The RequestWrapper is responsible for delivering and signing requests.;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f11;126;5;158;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\RequestWrapperTrait::setCommonDefaults()} for&#10;the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: string $componentVersion The current version of the component from&#10;which the request originated.&#10;&lt;b&gt;type&lt;/b&gt;: string $accessToken Access token used to sign requests.&#10;&lt;b&gt;type&lt;/b&gt;: callable $asyncHttpHandler *Experimental* A handler used to&#10;deliver PSR-7 requests asynchronously. Function signature should match:&#10;`function (RequestInterface $request, array $options = []) : PromiseInterface&lt;ResponseInterface&gt;`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $authHttpHandler A handler used to deliver PSR-7&#10;requests specifically for authentication. Function signature&#10;should match:&#10;`function (RequestInterface $request, array $options = []) : ResponseInterface`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $httpHandler A handler used to deliver PSR-7 requests.&#10;Function signature should match:&#10;`function (RequestInterface $request, array $options = []) : ResponseInterface`.&#10;&lt;b&gt;type&lt;/b&gt;: array $restOptions HTTP client specific configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: bool $shouldSignRequest Whether to enable request signing.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restRetryFunction Sets the conditions for whether or&#10;not a request should attempt to retry. Function signature should&#10;match: `function (\Exception $ex) : bool`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restDelayFunction Executes a delay, defaults to&#10;utilizing `usleep`. Function signature should match:&#10;`function (int $delay) : void`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restCalcDelayFunction Sets the conditions for&#10;determining how long to wait between attempts to retry. Function&#10;signature should match: `function (int $attempt) : int`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. Please see {;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="applyHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;277;5;307;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    applyHeaders(RequestInterface $request)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Applies headers to the request.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: A PSR-7 request.;;d4,278;;b3,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;p;;x">
</treenode>
<treenode node="buildDefaultAsyncHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;437;5;445;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildDefaultAsyncHandler()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the default async HTTP handler.;;d4,438;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="convertToGoogleException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;335;5;368;;;;vpos;;v;;aException;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    convertToGoogleException(\Exception $ex)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert any exception to a Google Exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Exception &lt;b&gt;$ex&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   \ServiceException;;d4,336;;b3,0;;m0;;e0;;i0;;o;;k;;l\Exception $ex;;p;;x">
</treenode>
<treenode node="fetchCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;315;5;327;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchCredentials(FetchAuthTokenInterface $credentialsFetcher)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches credentials.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    FetchAuthTokenInterface &lt;b&gt;$credentialsFetcher&lt;/b&gt;;;d4,316;;b3,0;;m0;;e0;;i0;;o;;k;;lFetchAuthTokenInterface $credentialsFetcher;;p;;x">
</treenode>
<treenode node="getExceptionMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;377;5;384;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getExceptionMessage(\Exception $ex)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the exception message.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Exception &lt;b&gt;$ex&lt;/b&gt;;;d4,378;;b3,0;;m0;;e0;;i0;;o;;k;;l\Exception $ex;;p;;x">
</treenode>
<treenode node="getRequestOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;392;5;406;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRequestOptions(array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets a set of request options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,393;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="getRetryOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f12;414;5;430;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRetryOptions(array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets a set of retry options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,415;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f11;184;5;208;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(RequestInterface $request, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Deliver the request.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `0`.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restRetryFunction Sets the conditions for whether or&#10;not a request should attempt to retry. Function signature should&#10;match: `function (\Exception $ex) : bool`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restDelayFunction Executes a delay, defaults to&#10;utilizing `usleep`. Function signature should match:&#10;`function (int $delay) : void`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restCalcDelayFunction Sets the conditions for&#10;determining how long to wait between attempts to retry. Function&#10;signature should match: `function (int $attempt) : int`.&#10;&lt;b&gt;type&lt;/b&gt;: array $restOptions HTTP client specific configuration options.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: A PSR-7 request.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Request options.;;d4,185;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="sendAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapper.php;f11;238;5;269;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendAsync(RequestInterface $request, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Deliver the request asynchronously.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `0`.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restRetryFunction Sets the conditions for whether or&#10;not a request should attempt to retry. Function signature should&#10;match: `function (\Exception $ex, int $retryAttempt) : bool`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restDelayFunction Executes a delay, defaults to&#10;utilizing `usleep`. Function signature should match:&#10;`function (int $delay) : void`.&#10;&lt;b&gt;type&lt;/b&gt;: callable $restCalcDelayFunction Sets the conditions for&#10;determining how long to wait between attempts to retry. Function&#10;signature should match: `function (int $attempt) : int`.&#10;&lt;b&gt;type&lt;/b&gt;: array $restOptions HTTP client specific configuration options.&#10;}&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: A PSR-7 request.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Request options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;ResponseInterface&gt;;;d4,239;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="RequestWrapperTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapperTrait.php;f0;29;1;203;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait RequestWrapperTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encapsulates shared functionality of request wrappers.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getADC;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapperTrait.php;f14;193;5;202;;;;vpos;;v;;aFetchAuthTokenInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getADC()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns application default credentials. Abstracted out for unit testing.&#10;&lt;b&gt;throws&lt;/b&gt;: \DomainException;;d4,194;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCredentialsFetcher;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapperTrait.php;f11;160;5;185;;;;vpos;;v;;aFetchAuthTokenInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCredentialsFetcher()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the credentials fetcher and sets up caching. Precedence is as&#10;follows:&#10;- A user supplied credentials fetcher instance.&#10;- Credentials created from a keyfile.&#10;- Application default credentials.&#10;- Anonymous credentials.;;d4,161;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="keyFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapperTrait.php;f11;134;5;137;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    keyFile()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the Keyfile.;;d4,135;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="scopes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapperTrait.php;f11;144;5;147;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    scopes()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the scopes;;d4,145;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setCommonDefaults;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RequestWrapperTrait.php;f11;98;5;127;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setCommonDefaults(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets common defaults between request wrappers.&#10;&lt;b&gt;type&lt;/b&gt;: CacheItemPoolInterface $authCache A cache for storing access&#10;tokens. **Defaults to** a simple in memory implementation.&#10;&lt;b&gt;type&lt;/b&gt;: array $authCacheOptions Cache configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: FetchAuthTokenInterface $credentialsFetcher A credentials&#10;fetcher instance.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile The contents of the service account credentials&#10;.json file retrieved from the Google Developer&apos;s Console.&#10;Ex: `json_decode(file_get_contents($path), true)`.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `0` with REST and `60` with gRPC.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: array $scopes Scopes to be used for the request.&#10;&lt;b&gt;type&lt;/b&gt;: string $quotaProject Specifies a user project to bill for&#10;access charges associated with the request.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: { Configuration options.;;d4,99;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
</treenode>
<treenode node="Response;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f0;10;1;154;;;;vpos;;v;;aResponseInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Response implements ResponseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PSR-7 response implementation.;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f11;89;5;114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $status = 200,&#10;        array $headers = [],&#10;        $body = null,&#10;        $version = &apos;1.1&apos;,&#10;        $reason = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$status&lt;/b&gt;: Status code&#10;    array &lt;b&gt;$headers&lt;/b&gt;: Response headers&#10;    string|null|resource|StreamInterface &lt;b&gt;$body&lt;/b&gt;: Response body&#10;    string &lt;b&gt;$version&lt;/b&gt;: Protocol version&#10;    string|null &lt;b&gt;$reason&lt;/b&gt;: Reason phrase (when empty a default will be used based on the status code);;d6,95;;b1,0;;m0;;e0;;i0;;o;;k;;lint $status;;parray $headers;;pstring|null|resource|StreamInterface $body;;pstring $version;;pstring|null $reason;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="assertStatusCodeIsInteger;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f12;141;5;146;;;;vpos;;v;;a;;r;;d4,142;;b3,0;;m0;;e0;;i0;;o;;k;;lstatusCode;;p;;x">
</treenode>
<treenode node="assertStatusCodeRange;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f12;148;5;153;;;;vpos;;v;;a;;r;;d4,149;;b3,0;;m0;;e0;;i0;;o;;k;;lstatusCode;;p;;x">
</treenode>
<treenode node="getReasonPhrase;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f11;121;5;124;;;;vpos;;v;;a;;r;;d4,122;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getStatusCode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f11;116;5;119;;;;vpos;;v;;a;;r;;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withStatus;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Response.php;f11;126;5;139;;;;vpos;;v;;a;;r;;d4,127;;b1,0;;m0;;e0;;i0;;o;;k;;lcode;;preasonPhrase;;p;;x;;x">
</treenode>
</treenode>
<treenode node="Rest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f0;40;1;598;;;;vpos;;v;;aConnectionInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Rest implements ConnectionInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Implementation of the&#10;[Google Cloud Storage JSON API](https://cloud.google.com/storage/docs/json_api/).;;d0,41;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="BASE_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f9;48;18;48;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_API_ENDPOINT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f9;50;30;50;;;;vpos;;v;;a;;r&apos;https://storage.googleapis.com&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DOWNLOAD_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f9;64;23;64;;;;vpos;;v;;a;;r&apos;storage/v1/b/{bucket}/o/{object}{?query*}&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DOWNLOAD_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f9;62;22;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="UPLOAD_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f9;57;21;57;;;;vpos;;v;;a;;r&apos;upload/storage/v1/b/{bucket}/o{?query*}&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="UPLOAD_URI;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f9;55;20;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;79;5;96;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="buildDownloadObjectParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f12;479;5;510;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildDownloadObjectParams(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,480;;b3,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="chooseValidationMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f12;519;5;547;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    chooseValidationMethod(array $args)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Choose a upload validation method based on user input and platform&#10;requirements.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |string;;d4,520;;b3,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="composeObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;213;5;216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    composeObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,214;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="copyObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;197;5;200;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    copyObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,198;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="crc32cExtensionLoaded;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f14;582;5;585;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    crc32cExtensionLoaded()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if the crc32c extension is available.&#10;Protected access for unit testing.;;d4,583;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="crcFromStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f12;555;5;573;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    crcFromStream(StreamInterface $data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate a CRC32c checksum from a stream.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$data&lt;/b&gt;;;d4,556;;b3,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $data;;p;;x">
</treenode>
<treenode node="createHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;438;5;441;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createHmacKey(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,439;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;109;5;112;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteAcl(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,110;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;149;5;152;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteBucket(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,150;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;446;5;449;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteHmacKey(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,447;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;398;5;401;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteNotification(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,399;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="deleteObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;189;5;192;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,190;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="downloadObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;245;5;253;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    downloadObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,246;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="downloadObjectAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;262;5;272;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    downloadObjectAsync(array $args = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,263;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;117;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAcl(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;157;5;160;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBucket(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,158;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getBucketIamPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;366;5;369;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBucketIamPolicy(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,367;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;454;5;457;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHmacKey(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,455;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;390;5;393;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getNotification(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,391;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;221;5;224;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,222;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="getServiceAccount;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;422;5;425;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getServiceAccount(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,423;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;133;5;136;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    insertAcl(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;173;5;176;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    insertBucket(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,174;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;406;5;409;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    insertNotification(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,407;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="insertObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;277;5;306;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    insertObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,278;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;125;5;128;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    listAcl(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listBuckets;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;165;5;168;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    listBuckets(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,166;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listHmacKeys;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;470;5;473;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    listHmacKeys(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,471;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listNotifications;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;414;5;417;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    listNotifications(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,415;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="listObjects;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;229;5;232;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    listObjects(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,230;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="lockRetentionPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;430;5;433;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    lockRetentionPolicy(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,431;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="patchAcl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;141;5;144;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    patchAcl(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,142;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="patchBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;181;5;184;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    patchBucket(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,182;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="patchObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;237;5;240;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    patchObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,238;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="projectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;101;5;104;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    projectId()&#10;;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="resolveUploadOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f12;311;5;361;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resolveUploadOptions(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,312;;b3,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="rewriteObject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;205;5;208;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rewriteObject(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,206;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="setBucketIamPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;374;5;377;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setBucketIamPolicy(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,375;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="supportsBuiltinCrc32c;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f14;594;5;597;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    supportsBuiltinCrc32c()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if hash() supports crc32c.&#10;Protected access for unit testing.;;d4,595;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testBucketIamPermissions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;382;5;385;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testBucketIamPermissions(array $args)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,383;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
<treenode node="updateHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\Connection\Rest.php;f11;462;5;465;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateHmacKey(array $args = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$args&lt;/b&gt;;;d4,463;;b1,0;;m0;;e0;;i0;;o;;k;;larray $args;;p;;x">
</treenode>
</treenode>
<treenode node="RestTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RestTrait.php;f0;24;1;133;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait RestTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides shared functionality for REST service implementations.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getApiEndpoint;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RestTrait.php;f12;117;5;132;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getApiEndpoint($default, array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a custom API endpoint in the proper format, or default if none provided.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$default&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,118;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $default;;parray $config;;p;;x;;x">
</treenode>
<treenode node="requestWrapper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RestTrait.php;f11;68;5;71;;;;vpos;;v;;aRequestWrapper;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    requestWrapper()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the RequestWrapper.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RestTrait.php;f11;82;5;108;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send($resource, $method, array $options = [], $whitelisted = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delivers a request built from the service definition.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The resource type used for the request.&#10;    string &lt;b&gt;$method&lt;/b&gt;: The method used for the request.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Options used to build out the request.&#10;    array &lt;b&gt;$whitelisted&lt;/b&gt;: [optional];;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $resource;;pstring $method;;parray $options;;parray $whitelisted;;p;;x;;x;;x;;x">
</treenode>
<treenode node="setRequestBuilder;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RestTrait.php;f11;47;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setRequestBuilder(RequestBuilder $requestBuilder)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the request builder.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestBuilder &lt;b&gt;$requestBuilder&lt;/b&gt;: Builds PSR7 requests from a service definition.;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestBuilder $requestBuilder;;p;;x">
</treenode>
<treenode node="setRequestWrapper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RestTrait.php;f11;58;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setRequestWrapper(RequestWrapper $requestWrapper)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets the request wrapper.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestWrapper &lt;b&gt;$requestWrapper&lt;/b&gt;: Wrapper used to handle sending requests to the JSON API.;;d4,59;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestWrapper $requestWrapper;;p;;x">
</treenode>
</treenode>
<treenode node="ResultPrinter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ResultPrinter.php;f0;29;1;74;;;;vpos;;v;;aPHPUnit_TextUI_ResultPrinter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ResultPrinter extends \PHPUnit_TextUI_ResultPrinter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Augments the PHPUnit test run report with snippet info.&#10;Will report coverage status and perform cleanup steps for the next run.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="printResult;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\ResultPrinter.php;f11;39;5;73;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    printResult(\PHPUnit_Framework_TestResult $result)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Show snippet results.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \PHPUnit_Framework_TestResult &lt;b&gt;$result&lt;/b&gt;: The test result.;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;l\PHPUnit_Framework_TestResult $result;;p;;x">
</treenode>
</treenode>
<treenode node="ResumableUploader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f0;34;1;287;;;;vpos;;v;;aAbstractUploader;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ResumableUploader extends AbstractUploader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resumable upload implementation.;;d0,35;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f11;86;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        RequestWrapper $requestWrapper,&#10;        $data,&#10;        $uri,&#10;        array $options = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: array $metadata Metadata on the resource.&#10;&lt;b&gt;type&lt;/b&gt;: callable $uploadProgressCallback The given callable&#10;function/method will be called after each successfully uploaded&#10;chunk. The callable function/method will receive the number of&#10;uploaded bytes after each uploaded chunk as a parameter to this&#10;callable. It&apos;s useful if you want to create a progress bar when&#10;using resumable upload type together with $chunkSize parameter.&#10;If $chunkSize is not set the callable function/method will be&#10;called only once after the successful file upload.&#10;&lt;b&gt;type&lt;/b&gt;: int $chunkSize Size of the chunks to send incrementally during&#10;a resumable upload. Must be in multiples of 262144 bytes.&#10;&lt;b&gt;type&lt;/b&gt;: array $restOptions HTTP client specific configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType Content type of the resource.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestWrapper &lt;b&gt;$requestWrapper&lt;/b&gt;&#10;    string|resource|StreamInterface &lt;b&gt;$data&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Optional configuration.;;d6,91;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestWrapper $requestWrapper;;pstring|resource|StreamInterface $data;;pstring $uri;;parray $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="createResumeUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f14;235;5;255;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createResumeUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates the resume URI.;;d4,236;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="decodeResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f14;225;5;228;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    decodeResponse(ResponseInterface $response)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetch and decode the response body&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ResponseInterface &lt;b&gt;$response&lt;/b&gt;;;d4,226;;b2,0;;m0;;e0;;i0;;o;;k;;lResponseInterface $response;;p;;x">
</treenode>
<treenode node="getRangeStart;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f14;279;5;286;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRangeStart($rangeHeader)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the starting range for the upload.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$rangeHeader&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,280;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $rangeHeader;;p;;x">
</treenode>
<treenode node="getResumeUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f11;107;5;114;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResumeUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the resume URI.;;d4,108;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getStatusResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f14;262;5;271;;;;vpos;;v;;aResponseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getStatusResponse()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the status of the upload.;;d4,263;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="resume;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f11;123;5;139;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resume($resumeUri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resumes a download using the provided URI.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$resumeUri&lt;/b&gt;;;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $resumeUri;;p;;x">
</treenode>
<treenode node="upload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f11;150;5;200;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    upload()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers the upload process.&#10;Errors are of form [`google.rpc.Status`](https://cloud.google.com/apis/design/errors#error_model),&#10;and may be obtained via {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Exception\ServiceException::getMetadata()}.&#10;&lt;b&gt;throws&lt;/b&gt;: ServiceException;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="uploadAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\ResumableUploader.php;f11;214;5;217;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uploadAsync()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Currently only the MultiPartUploader supports async.&#10;Any calls to this will throw a generic Google Exception.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d4,215;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Retry;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\Retry.php;f0;27;1;75;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Retry.php;f0;25;1;113;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Retry&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A class for retrying the failed items.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\Retry.php;f11;39;5;43;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Retry.php;f11;51;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(BatchRunner $runner = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initialize a BatchRunner and $failureFile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    BatchRunner &lt;b&gt;$runner&lt;/b&gt;: [optional] **Defaults to** a new BatchRunner.;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lBatchRunner $runner;;p;;x">
</treenode>
<treenode node="execute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Retry.php;f11;69;5;103;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    execute(callable $function, array $arguments = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Executes the retry process.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception The last exception caught while retrying.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$function&lt;/b&gt;&#10;    array &lt;b&gt;$arguments&lt;/b&gt;: [optional];;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $function;;parray $arguments;;p;;x;;x">
</treenode>
<treenode node="retryAll;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\Retry.php;f11;48;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    retryAll()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retry all the failed items.;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setDelayFunction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Retry.php;f11;109;5;112;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setDelayFunction(callable $delayFunction)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$delayFunction&lt;/b&gt;;;d4,110;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $delayFunction;;p;;x">
</treenode>
</treenode>
<treenode node="RetryDeciderTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RetryDeciderTrait.php;f0;24;1;110;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait RetryDeciderTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides methods for deciding if a request should be retried.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getRetryFunction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RetryDeciderTrait.php;f12;52;5;93;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRetryFunction($shouldRetryMessages = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines whether or not the request should be retried.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$shouldRetryMessages&lt;/b&gt;: Whether or not to attempt retrying based on the failure message.;;d4,53;;b3,0;;m0;;e0;;i0;;o;;k;;lbool $shouldRetryMessages;;p;;x">
</treenode>
<treenode node="setHttpRetryCodes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RetryDeciderTrait.php;f12;98;5;101;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setHttpRetryCodes(array $codes)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$codes&lt;/b&gt;;;d4,99;;b3,0;;m0;;e0;;i0;;o;;k;;larray $codes;;p;;x">
</treenode>
<treenode node="setHttpRetryMessages;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\RetryDeciderTrait.php;f12;106;5;109;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setHttpRetryMessages(array $messages)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$messages&lt;/b&gt;;;d4,107;;b3,0;;m0;;e0;;i0;;o;;k;;larray $messages;;p;;x">
</treenode>
</treenode>
<treenode node="RetryMiddleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f0;15;1;115;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RetryMiddleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Middleware that retries requests based on the boolean result of&#10;invoking the provided &quot;decider&quot; function.&#10;&lt;b&gt;final&lt;/b&gt;;;d0,16;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f11;42;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(callable $decider, callable $nextHandler, callable $delay = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$decider&lt;/b&gt;: Function that accepts the number of retries, a request, [response], and [exception] and returns true if the request is to be retried.&#10;    callable(RequestInterface,: array): PromiseInterface $nextHandler Next handler to invoke.&#10;    null|callable(int):: int                             $delay       Function that accepts the number of retries and returns the number of milliseconds to delay.;;d4,43;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $decider;;pcallable(RequestInterface,;;pnull|callable(int):;;p;;x;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f11;59;5;71;;;;vpos;;v;;a PromiseInterface;;r;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="doRetry;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f12;109;5;114;;;;vpos;;v;;a PromiseInterface;;r;;d4,110;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;presponse;;p;;x;;x;;x">
</treenode>
<treenode node="exponentialDelay;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f18;54;5;57;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    exponentialDelay(int $retries): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Default exponential backoff delay function.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   milliseconds.;;d4,55;;b1,5;;m0;;e0;;i0;;o;;k;;lretries;;p;;x">
</treenode>
<treenode node="onFulfilled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f12;76;5;89;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onFulfilled(RequestInterface $request, array $options): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Execute fulfilled closure;;d4,77;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="onRejected;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\RetryMiddleware.php;f12;94;5;107;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onRejected(RequestInterface $req, array $options): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Execute rejected closure;;d4,95;;b3,0;;m0;;e0;;i0;;o;;k;;lreq;;poptions;;p;;x;;x">
</treenode>
</treenode>
<treenode node="Rfc7230;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Rfc7230.php;f6;4;1;17;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="HEADER_FOLD_REGEX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Rfc7230.php;f9;16;27;16;;;;vpos;;v;;a;;r&quot;(\r?\n[ \t]++)&quot;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="HEADER_REGEX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Rfc7230.php;f9;15;22;15;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Header related regular expressions (copied from amphp/http package)&#10;(Note: once we require PHP 7.x we could just depend on the upstream package)&#10;Note: header delimiter (\r\n) is modified to \r?\n to accept line feed only delimiters for BC reasons.&#10;&lt;b&gt;link&lt;/b&gt;: https://github.com/amphp/http/blob/v1.0.1/src/Rfc7230.php#L12-L15&#10;&lt;b&gt;license&lt;/b&gt;: https://github.com/amphp/http/blob/v1.0.1/LICENSE;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="RollbarHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RollbarHandler.php;f0;33;1;129;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RollbarHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends errors to Rollbar&#10;If the context data contains a `payload` key, that is used as an array&#10;of payload options to RollbarLogger&apos;s log method.&#10;Rollbar&apos;s context info will contain the context + extra keys from the log record&#10;merged, and then on top of that a few keys:&#10;- level (rollbar level name)&#10;- monolog_level (monolog level name, raw level, as rollbar only has 5 but monolog 8)&#10;- channel&#10;- datetime (unix timestamp)&#10;&lt;b&gt;author&lt;/b&gt;: Paul Statezny &lt;paulstatezny&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,34;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RollbarHandler.php;f11;65;5;70;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(RollbarLogger $rollbarLogger, $level = Logger::ERROR, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RollbarLogger &lt;b&gt;$rollbarLogger&lt;/b&gt;: RollbarLogger object constructed with valid token&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;lRollbarLogger $rollbarLogger;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RollbarHandler.php;f11;115;5;118;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RollbarHandler.php;f11;104;5;110;;;;vpos;;v;;a void;;r;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RollbarHandler.php;f11;123;5;128;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reset()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RollbarHandler.php;f14;75;5;102;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,76;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="RotatingFileHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f0;26;1;193;;;;vpos;;v;;aStreamHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class RotatingFileHandler extends StreamHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores logs to files that are rotated every day and a limited number of files are kept.&#10;This rotation is only intended to be used as a workaround. Using logrotate to&#10;handle the rotation is strongly encouraged when you can use it.&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FILE_PER_DAY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f16;28;29;28;;;;vpos;;v;;a;;r&apos;Y-m-d&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FILE_PER_MONTH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f16;29;31;29;;;;vpos;;v;;a;;r&apos;Y-m&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FILE_PER_YEAR;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f16;30;30;30;;;;vpos;;v;;a;;r&apos;Y&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f11;47;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $filename, int $maxFiles = 0, $level = Logger::DEBUG, bool $bubble = true, ?int $filePermission = null, bool $useLocking = false)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;&#10;    int &lt;b&gt;$maxFiles&lt;/b&gt;: The maximal amount of files to keep (0 means unlimited)&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    int|null &lt;b&gt;$filePermission&lt;/b&gt;: Optional file permissions (default (0644) are only for owner read/write)&#10;    bool &lt;b&gt;$useLocking&lt;/b&gt;: Try to lock log file before doing any writes;;d4,48;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $filename;;pint $maxFiles;;pstring|int $level;;pbool $bubble;;pint|null $filePermission;;pbool $useLocking;;p;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f11;61;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getGlobPattern;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f14;179;5;192;;;;vpos;;v;;a string;;r;;d4,180;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTimedFilename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f14;163;5;177;;;;vpos;;v;;a string;;r;;d4,164;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f11;73;5;80;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reset()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="rotate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f14;126;5;161;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rotate(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Rotates the files.;;d4,127;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFilenameFormat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f11;82;5;103;;;;vpos;;v;;a self;;r;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;lfilenameFormat;;pdateFormat;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\RotatingFileHandler.php;f14;108;5;121;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,109;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="SamplingHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f0;29;1;124;;;;vpos;;v;;aAbstractHandler;;cProcessableHandlerInterface;;cFormattableHandlerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SamplingHandler extends AbstractHandler implements ProcessableHandlerInterface, FormattableHandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sampling handler&#10;A sampled event stream can be useful for logging high frequency events in&#10;a production environment where you only need an idea of what is happening&#10;and are not concerned with capturing every occurrence. Since the decision to&#10;handle or not handle a particular event is determined randomly, the&#10;resulting sampled log is not guaranteed to contain 1/N of the events that&#10;occurred in the application, but based on the Law of large numbers, it will&#10;tend to be close to this ratio with a large number of attempts.&#10;&lt;b&gt;author&lt;/b&gt;: Bryan Davis &lt;bd808&#10;&lt;b&gt;wikimedia&lt;/b&gt;: .org&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Kunal Mehta &lt;legoktm&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f11;49;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($handler, int $factor)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param HandlerInterface|callable(array, HandlerInterface): HandlerInterface $handler&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable|HandlerInterface &lt;b&gt;$handler&lt;/b&gt;: Handler or factory callable($record|null, $samplingHandler).&#10;    int &lt;b&gt;$factor&lt;/b&gt;: Sample factor (e.g. 10 means every ~10th record is sampled);;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable|HandlerInterface $handler;;pint $factor;;p;;x;;x">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f11;115;5;123;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f11;85;5;95;;;;vpos;;v;;aHandlerInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandler(array $record = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the nested handler&#10;If the handler was provided as a factory callable, this will trigger the handler&apos;s instantiation.;;d4,86;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f11;65;5;76;;;;vpos;;v;;a bool;;r;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="isHandling;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f11;60;5;63;;;;vpos;;v;;a bool;;r;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SamplingHandler.php;f11;100;5;110;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFormatter(FormatterInterface $formatter): HandlerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
</treenode>
<treenode node="ScalarFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ScalarFormatter.php;f0;19;1;47;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ScalarFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats data into an associative array of scalar values.&#10;Objects and arrays will be JSON encoded.&#10;&lt;b&gt;author&lt;/b&gt;: Andrew Lawson &lt;adlawson&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ScalarFormatter.php;f11;24;5;31;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,25;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="normalizeValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\ScalarFormatter.php;f14;37;5;46;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeValue($value)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |int|bool|null;;d4,38;;b2,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
</treenode>
<treenode node="Scanner;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Scanner.php;f0;30;1;163;;;;vpos;;v;;aScannerInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Scanner implements ScannerInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Scan a directory for files, a set of files for classes, and a set of classes&#10;for code snippets.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Scanner.php;f11;55;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(Parser $parser, $basePath, array $exclude = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Parser &lt;b&gt;$parser&lt;/b&gt;: An instance of the Snippet Parser.&#10;    \Iterator|string &lt;b&gt;$basePath&lt;/b&gt;: The path(s) to scan for PHP files.&#10;    array &lt;b&gt;$exclude&lt;/b&gt;: A list of patterns to exclude.;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;lParser $parser;;p\Iterator|string $basePath;;parray $exclude;;p;;x;;x;;x">
</treenode>
<treenode node="checkExclude;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Scanner.php;f12;98;5;106;;;;vpos;;v;;a;;r;;d4,99;;b3,0;;m0;;e0;;i0;;o;;k;;lclassName;;pexclude;;p;;x;;x">
</treenode>
<treenode node="classes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Scanner.php;f11;118;5;132;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    classes(array $files, array $exclude = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a list of classes in the given PHP files.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$files&lt;/b&gt;&#10;    array &lt;b&gt;$exclude&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;larray $files;;parray $exclude;;p;;x;;x">
</treenode>
<treenode node="files;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Scanner.php;f11;73;5;96;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    files()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a list of PHP files to scan.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="snippets;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Coverage\Scanner.php;f11;143;5;162;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    snippets(array $classes)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a list of all snippets from the given classes.&#10;\Google\Cloud\Core\Testing\Snippet\Parser\Snippet[]&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&lt;b&gt;throws&lt;/b&gt;: \ReflectionException;;d4,144;;b1,0;;m0;;e0;;i0;;o;;k;;lclasses;;p;;x">
</treenode>
</treenode>
<treenode node="ScopedAccessTokenMiddleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\ScopedAccessTokenMiddleware.php;f0;35;1;174;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ScopedAccessTokenMiddleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ScopedAccessTokenMiddleware is a Guzzle Middleware that adds an Authorization&#10;header provided by a closure.&#10;The closure returns an access token, taking the scope, either a single&#10;string or an array of strings, as its value.  If provided, a cache will be&#10;used to preserve the access token for a given lifetime.&#10;Requests will be accessed with the authorization header:&#10;&apos;authorization&apos; &apos;Bearer &lt;value of auth_token&gt;&apos;;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_CACHE_LIFETIME;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\ScopedAccessTokenMiddleware.php;f9;39;32;39;;;;vpos;;v;;a;;r1500;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\ScopedAccessTokenMiddleware.php;f11;69;5;90;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        callable $tokenFunc,&#10;        $scopes,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new ScopedAccessTokenMiddleware.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$tokenFunc&lt;/b&gt;: a token generator function&#10;    array|string &lt;b&gt;$scopes&lt;/b&gt;: the token authentication scopes&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: an implementation of CacheItemPoolInterface;;d6,74;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $tokenFunc;;parray|string $scopes;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\ScopedAccessTokenMiddleware.php;f11;124;5;136;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(callable $handler)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the request with an Authorization header when auth is &apos;scoped&apos;.&#10;E.g this could be used to authenticate using the AppEngine&#10;AppIdentityService.&#10;use google\appengine\api\app_identity\AppIdentityService;s&#10;use Google\Auth\Middleware\ScopedAccessTokenMiddleware;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$scope = &apos;https://www.googleapis.com/auth/taskqueue&apos;&#10;$middleware = new ScopedAccessTokenMiddleware(&#10;&apos;AppIdentityService::getAccessToken&apos;,&#10;$scope,&#10;[ &apos;prefix&apos; =&gt; &apos;Google\Auth\ScopedAccessToken::&apos; ],&#10;$cache = new Memcache()&#10;);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_url&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;auth&apos; =&gt; &apos;scoped&apos; // authorize all requests&#10;]);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s&#10;\Closure&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$handler&lt;/b&gt;;;d4,125;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $handler;;p;;x">
</treenode>
<treenode node="fetchToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\ScopedAccessTokenMiddleware.php;f12;160;5;173;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine if token is available in the cache, if not call tokenFunc to&#10;fetch it.;;d4,161;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\ScopedAccessTokenMiddleware.php;f12;141;5;152;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,142;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ScopedAccessTokenSubscriber;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f0;37;1;179;;;;vpos;;v;;aSubscriberInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ScopedAccessTokenSubscriber implements SubscriberInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ScopedAccessTokenSubscriber is a Guzzle Subscriber that adds an Authorization&#10;header provided by a closure.&#10;The closure returns an access token, taking the scope, either a single&#10;string or an array of strings, as its value.  If provided, a cache will be&#10;used to preserve the access token for a given lifetime.&#10;Requests will be accessed with the authorization header:&#10;&apos;authorization&apos; &apos;Bearer &lt;access token obtained from the closure&gt;&apos;;;d0,38;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_CACHE_LIFETIME;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f9;41;32;41;;;;vpos;;v;;a;;r1500;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f11;71;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        callable $tokenFunc,&#10;        $scopes,&#10;        array $cacheConfig = null,&#10;        CacheItemPoolInterface $cache = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new ScopedAccessTokenSubscriber.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$tokenFunc&lt;/b&gt;: a token generator function&#10;    array|string &lt;b&gt;$scopes&lt;/b&gt;: the token authentication scopes&#10;    array &lt;b&gt;$cacheConfig&lt;/b&gt;: configuration for the cache when it&apos;s present&#10;    CacheItemPoolInterface &lt;b&gt;$cache&lt;/b&gt;: an implementation of CacheItemPoolInterface;;d6,76;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $tokenFunc;;parray|string $scopes;;parray $cacheConfig;;pCacheItemPoolInterface $cache;;p;;x;;x;;x;;x">
</treenode>
<treenode node="fetchToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f12;165;5;178;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine if token is available in the cache, if not call tokenFunc to&#10;fetch it.;;d4,166;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f12;146;5;157;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,147;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getEvents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f11;97;5;100;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getEvents()&#10;;;d4,98;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="onBefore;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\ScopedAccessTokenSubscriber.php;f11;132;5;141;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onBefore(BeforeEvent $event)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the request with an Authorization header when auth is &apos;scoped&apos;.&#10;E.g this could be used to authenticate using the AppEngine AppIdentityService.&#10;Example:&#10;```&#10;use google\appengine\api\app_identity\AppIdentityService;s&#10;use Google\Auth\Subscriber\ScopedAccessTokenSubscriber;s&#10;use GuzzleHttp\Client;s&#10;$scope = &apos;https://www.googleapis.com/auth/taskqueue&apos;&#10;$subscriber = new ScopedAccessToken(&#10;&apos;AppIdentityService::getAccessToken&apos;,&#10;$scope,&#10;[&apos;prefix&apos; =&gt; &apos;Google\Auth\ScopedAccessToken::&apos;],&#10;$cache = new Memcache()&#10;);s&#10;$client = new Client([&#10;&apos;base_url&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;defaults&apos; =&gt; [&apos;auth&apos; =&gt; &apos;scoped&apos;]&#10;]);s&#10;$client-&gt;getEmitter()-&gt;attach($subscriber);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    BeforeEvent &lt;b&gt;$event&lt;/b&gt;;;d4,133;;b1,0;;m0;;e0;;i0;;o;;k;;lBeforeEvent $event;;p;;x">
</treenode>
</treenode>
<treenode node="SemaphoreLock;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SemaphoreLock.php;f0;30;1;129;;;;vpos;;v;;aLockInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SemaphoreLock implements LockInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Semaphore based lock implementation.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/book.sem.php&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SemaphoreLock.php;f11;50;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If an invalid key is provided.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the System V IPC extensions are missing.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$key&lt;/b&gt;: A key.;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lint $key;;p;;x">
</treenode>
<treenode node="acquire;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SemaphoreLock.php;f11;75;5;94;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    acquire(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Acquires a lock that will block until released.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to be acquired.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="initializeId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SemaphoreLock.php;f12;119;5;128;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    initializeId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initializes the semaphore ID.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If semaphore ID fails to generate.;;d4,120;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SemaphoreLock.php;f11;101;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    release()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Releases the lock.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to release.;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SendGridHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SendGridHandler.php;f0;20;1;99;;;;vpos;;v;;aMailHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SendGridHandler extends MailHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SendGridrHandler uses the SendGrid API v2 function to send Log emails, more information in https://sendgrid.com/docs/API_Reference/Web_API/mail.html&#10;&lt;b&gt;author&lt;/b&gt;: Ricardo Fontanelli &lt;ricardo.fontanelli&#10;&lt;b&gt;hotmail&lt;/b&gt;: .com&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SendGridHandler.php;f11;61;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $apiUser, string $apiKey, string $from, $to, string $subject, $level = Logger::ERROR, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$apiUser&lt;/b&gt;: The SendGrid API User&#10;    string &lt;b&gt;$apiKey&lt;/b&gt;: The SendGrid API Key&#10;    string &lt;b&gt;$from&lt;/b&gt;: The sender of the email&#10;    string|array &lt;b&gt;$to&lt;/b&gt;: The recipients of the email&#10;    string &lt;b&gt;$subject&lt;/b&gt;: The subject of the mail&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $apiUser;;pstring $apiKey;;pstring $from;;pstring|array $to;;pstring $subject;;pint|string $level;;pbool $bubble;;p;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SendGridHandler.php;f14;74;5;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(string $content, array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,75;;b2,0;;m0;;e0;;i0;;o;;k;;lcontent;;precords;;p;;x;;x">
</treenode>
</treenode>
<treenode node="SerializableClientTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SerializableClientTrait.php;f0;30;1;105;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait SerializableClientTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A trait to assist in serializing/deserializing client configuration that may&#10;contain closures.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getDefaultClosureSerializer;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SerializableClientTrait.php;f12;99;5;104;;;;vpos;;v;;aClosureSerializerInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultClosureSerializer()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,100;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUnwrappedClientConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SerializableClientTrait.php;f12;87;5;94;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUnwrappedClientConfig()&#10;;;d4,88;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setSerializableClientOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SerializableClientTrait.php;f12;56;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSerializableClientOptions(array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: ClosureSerializerInterface $closureSerializer An implementation&#10;responsible for serializing closures used in the&#10;`$clientConfig`. This is especially important when using the&#10;batch daemon. **Defaults to**&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Batch\OpisClosureSerializer} if the&#10;`opis/closure` library is installed.&#10;&lt;b&gt;type&lt;/b&gt;: array $clientConfig A config used to construct the client upon&#10;which requests will be made.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration options.;;d4,57;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="setWrappedClientConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SerializableClientTrait.php;f12;71;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setWrappedClientConfig(array $options)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,72;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
</treenode>
<treenode node="ServerException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\ServerException.php;f0;7;1;9;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ServerException.php;f0;23;1;26;;;;vpos;;v;;aBadResponseException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ServerException extends BadResponseException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception when a server error is encountered (5xx codes);;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="ServerRequest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f0;24;1;377;;;;vpos;;v;;aRequest;;cServerRequestInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ServerRequest extends Request implements ServerRequestInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Server-side HTTP request&#10;Extends the Request definition to add methods for accessing incoming data,&#10;specifically server parameters, cookies, matched path parameters, query&#10;string arguments, body parameters, and upload file information.&#10;&quot;Attributes&quot; are discovered via decomposing the request (and usually&#10;specifically the URI path), and typically will be injected by the application.&#10;Requests are considered immutable;s all methods that might change state are&#10;implemented such that they retain the internal state of the current&#10;message and return a new instance that contains the changed state.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;64;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $method,&#10;        $uri,&#10;        array $headers = [],&#10;        $body = null,&#10;        $version = &apos;1.1&apos;,&#10;        array $serverParams = []&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: HTTP method&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI&#10;    array &lt;b&gt;$headers&lt;/b&gt;: Request headers&#10;    string|null|resource|StreamInterface &lt;b&gt;$body&lt;/b&gt;: Request body&#10;    string &lt;b&gt;$version&lt;/b&gt;: Protocol version&#10;    array &lt;b&gt;$serverParams&lt;/b&gt;: Typically the $_SERVER superglobal;;d6,71;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;pstring|UriInterface $uri;;parray $headers;;pstring|null|resource|StreamInterface $body;;pstring $version;;parray $serverParams;;p;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="createUploadedFileFromSpec;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f19;115;5;128;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createUploadedFileFromSpec(array $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create and return an UploadedFile instance from a $_FILES specification.&#10;If the specification represents an array of values, this method will&#10;delegate to normalizeNestedFileSpec() and return that return value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$value&lt;/b&gt;: $_FILES struct&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |UploadedFileInterface;;d4,116;;b3,5;;m0;;e0;;i0;;o;;k;;larray $value;;p;;x">
</treenode>
<treenode node="extractHostAndPortFromAuthority;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f19;184;5;196;;;;vpos;;v;;a;;r;;d4,185;;b3,5;;m0;;e0;;i0;;o;;k;;lauthority;;p;;x">
</treenode>
<treenode node="fromGlobals;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f18;167;5;182;;;;vpos;;v;;aServerRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromGlobals()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a ServerRequest populated with superglobals:&#10;$_GET&#10;$_POST&#10;$_COOKIE&#10;$_FILES&#10;$_SERVER;;d4,168;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getAttribute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;343;5;350;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAttribute($attribute, $default = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,344;;b1,0;;m0;;e0;;i0;;o;;k;;lattribute;;pdefault;;p;;x;;x">
</treenode>
<treenode node="getAttributes;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;335;5;338;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAttributes()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,336;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getCookieParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;278;5;281;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCookieParams()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,279;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getParsedBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;316;5;319;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getParsedBody()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,317;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQueryParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;297;5;300;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getQueryParams()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,298;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getServerParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;251;5;254;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getServerParams()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,252;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUploadedFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;259;5;262;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUploadedFiles()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,260;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUriFromGlobals;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f18;203;5;245;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUriFromGlobals()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a Uri populated with values from $_SERVER.;;d4,204;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="normalizeFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f18;86;5;104;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeFiles(array $files)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an UploadedFile instance array.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException for unrecognized values&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$files&lt;/b&gt;: A array which respect $_FILES structure;;d4,87;;b1,5;;m0;;e0;;i0;;o;;k;;larray $files;;p;;x">
</treenode>
<treenode node="normalizeNestedFileSpec;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f19;139;5;155;;;;vpos;;v;;aUploadedFileInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeNestedFileSpec(array $files = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalize an array of file specifications.&#10;Loops through all nested files and returns a normalized array of&#10;UploadedFileInterface instances.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$files&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [];;d4,140;;b3,5;;m0;;e0;;i0;;o;;k;;larray $files;;p;;x">
</treenode>
<treenode node="withAttribute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;355;5;361;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withAttribute($attribute, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,356;;b1,0;;m0;;e0;;i0;;o;;k;;lattribute;;pvalue;;p;;x;;x">
</treenode>
<treenode node="withCookieParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;286;5;292;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withCookieParams(array $cookies)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,287;;b1,0;;m0;;e0;;i0;;o;;k;;lcookies;;p;;x">
</treenode>
<treenode node="withParsedBody;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;324;5;330;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withParsedBody($data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,325;;b1,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="withQueryParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;305;5;311;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withQueryParams(array $query)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,306;;b1,0;;m0;;e0;;i0;;o;;k;;lquery;;p;;x">
</treenode>
<treenode node="withUploadedFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;267;5;273;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withUploadedFiles(array $uploadedFiles)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,268;;b1,0;;m0;;e0;;i0;;o;;k;;luploadedFiles;;p;;x">
</treenode>
<treenode node="withoutAttribute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\ServerRequest.php;f11;366;5;376;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withoutAttribute($attribute)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,367;;b1,0;;m0;;e0;;i0;;o;;k;;lattribute;;p;;x">
</treenode>
</treenode>
<treenode node="ServiceAccountCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f0;60;1;278;;;;vpos;;v;;aCredentialsLoader;;cGetQuotaProjectInterface;;cSignBlobInterface;;cProjectIdProviderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ServiceAccountCredentials extends CredentialsLoader implements&#10;    GetQuotaProjectInterface,&#10;    SignBlobInterface,&#10;    ProjectIdProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ServiceAccountCredentials supports authorization using a Google service&#10;account.&#10;(cf https://developers.google.com/accounts/docs/OAuth2ServiceAccount)&#10;It&apos;s initialized using the json key file that&apos;s downloadable from developer&#10;console, which should contain a private_key and client_email fields that it&#10;uses.&#10;Use it with AuthTokenMiddleware to authorize http requests:&#10;use Google\Auth\Credentials\ServiceAccountCredentials;s&#10;use Google\Auth\Middleware\AuthTokenMiddleware;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$sa = new ServiceAccountCredentials(&#10;&apos;https://www.googleapis.com/auth/taskqueue&apos;,&#10;&apos;/path/to/your/json/key_file.json&apos;&#10;);s&#10;$middleware = new AuthTokenMiddleware($sa);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_uri&apos; =&gt; &apos;https://www.googleapis.com/taskqueue/v1beta2/projects/&apos;,&#10;&apos;auth&apos; =&gt; &apos;google_auth&apos; // authorize all requests&#10;]);s&#10;$res = $client-&gt;get(&apos;myproject/taskqueues/myqueue&apos;);s;;d0,64;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;102;5;153;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $scope,&#10;        $jsonKey,&#10;        $sub = null,&#10;        $targetAudience = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new ServiceAccountCredentials.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$scope&lt;/b&gt;: the scope of the access request, expressed either as an Array or as a space-delimited String.&#10;    string|array &lt;b&gt;$jsonKey&lt;/b&gt;: JSON credential file path or JSON credentials as an associative array&#10;    string &lt;b&gt;$sub&lt;/b&gt;: an email address account to impersonate, in situations when the service account has been delegated domain wide access.&#10;    string &lt;b&gt;$targetAudience&lt;/b&gt;: The audience for the ID token.;;d6,107;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $scope;;pstring|array $jsonKey;;pstring $sub;;pstring $targetAudience;;p;;x;;x;;x;;x">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;164;5;167;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A set of auth related metadata, containing the following keys: - access_token (string) - expires_in (int) - token_type (string);;d4,165;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;172;5;180;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,173;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;259;5;262;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientName(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the client name from the keyfile.&#10;In this case, it returns the keyfile&apos;s client_email key.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Not used by this credentials type.;;d4,260;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;185;5;192;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;;;d4,186;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;202;5;205;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectId(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the project ID from the service account keyfile.&#10;Returns null if the project ID does not exist in the keyfile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Not used by this credentials type.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,203;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;269;5;272;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getQuotaProject()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the quota project used for this API request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,270;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setSub;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;246;5;249;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSub($sub)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$sub&lt;/b&gt;: an email address account to impersonate, in situations when the service account has been delegated domain wide access.;;d4,247;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $sub;;p;;x">
</treenode>
<treenode node="updateMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f11;215;5;240;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateMetadata(&#10;        $metadata,&#10;        $authUri = null,&#10;        callable $httpHandler = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates metadata with the authorization token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: metadata hashmap&#10;    string &lt;b&gt;$authUri&lt;/b&gt;: optional auth uri&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updated metadata hashmap;;d6,219;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;pstring $authUri;;pcallable $httpHandler;;p;;x;;x;;x">
</treenode>
<treenode node="useSelfSignedJwt;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountCredentials.php;f12;274;5;277;;;;vpos;;v;;a;;r;;d4,275;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="ServiceAccountJwtAccessCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f0;35;1;193;;;;vpos;;v;;aCredentialsLoader;;cGetQuotaProjectInterface;;cSignBlobInterface;;cProjectIdProviderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ServiceAccountJwtAccessCredentials extends CredentialsLoader implements&#10;    GetQuotaProjectInterface,&#10;    SignBlobInterface,&#10;    ProjectIdProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Authenticates requests using Google&apos;s Service Account credentials via&#10;JWT Access.&#10;This class allows authorizing requests for service accounts directly&#10;from credentials from a json key file downloaded from the developer&#10;console (via &apos;Generate new Json Key&apos;).  It is not part of any OAuth2&#10;flow, rather it creates a JWT and sends that as a credential.;;d0,39;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;60;5;94;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($jsonKey)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new ServiceAccountJwtAccessCredentials.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$jsonKey&lt;/b&gt;: JSON credential file path or JSON credentials as an associative array;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $jsonKey;;p;;x">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;127;5;140;;;;vpos;;v;;aarray|void;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Implements FetchAuthTokenInterface#fetchAuthToken.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A set of auth related metadata, containing the following keys: - access_token (string);;d4,128;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;145;5;148;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,146;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;179;5;182;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientName(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the client name from the keyfile.&#10;In this case, it returns the keyfile&apos;s client_email key.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Not used by this credentials type.;;d4,180;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;153;5;156;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;;;d4,154;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;166;5;169;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getProjectId(callable $httpHandler = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the project ID from the service account keyfile.&#10;Returns null if the project ID does not exist in the keyfile.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: Not used by this credentials type.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,167;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;189;5;192;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getQuotaProject()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the quota project used for this API request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,190;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="updateMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\ServiceAccountJwtAccessCredentials.php;f11;104;5;116;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    updateMetadata(&#10;        $metadata,&#10;        $authUri = null,&#10;        callable $httpHandler = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates metadata with the authorization token.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: metadata hashmap&#10;    string &lt;b&gt;$authUri&lt;/b&gt;: optional auth uri&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;: callback which delivers psr7 request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   updated metadata hashmap;;d6,108;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;pstring $authUri;;pcallable $httpHandler;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="ServiceAccountSignerTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ServiceAccountSignerTrait.php;f0;24;1;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ServiceAccountSignerTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using a Service Account private key.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="signBlob;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\ServiceAccountSignerTrait.php;f11;34;5;55;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signBlob($stringToSign, $forceOpenssl = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a string using the service account private key.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$stringToSign&lt;/b&gt;&#10;    bool &lt;b&gt;$forceOpenssl&lt;/b&gt;: Whether to use OpenSSL regardless of whether phpseclib is installed. **Defaults to** `false`.;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $stringToSign;;pbool $forceOpenssl;;p;;x;;x">
</treenode>
</treenode>
<treenode node="ServiceBuilder;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f0;53;1;446;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ServiceBuilder&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Platform is a set of modular cloud-based services that allow you&#10;to create anything from simple websites to complex applications.&#10;This API aims to expose access to these services in a way that is intuitive&#10;and easy to use for PHP enthusiasts. The ServiceBuilder instance exposes&#10;factory methods which grant access to the various services contained within&#10;the API.&#10;Configuration is simple. Pass in an array of configuration options to the&#10;constructor up front which can be shared between clients or specify the&#10;options for the specific services you wish to access, e.g. Datastore, or&#10;Storage.&#10;Please note that unless otherwise noted the examples below take advantage of&#10;[Application Default Credentials](https://developers.google.com/identity/protocols/application-default-credentials).;;d0,54;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;96;5;99;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Pass in an array of configuration options which will be shared between&#10;clients.&#10;Example:&#10;```&#10;use Google\Cloud\Core\ServiceBuilder;s&#10;$cloud = new ServiceBuilder([&#10;&apos;projectId&apos; =&gt; &apos;myAwesomeProject&apos;&#10;]);s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $projectId The project ID from the Google Developer&apos;s&#10;Console.&#10;&lt;b&gt;type&lt;/b&gt;: CacheItemPoolInterface $authCache A cache for storing access&#10;tokens. **Defaults to** a simple in memory implementation.&#10;&lt;b&gt;type&lt;/b&gt;: array $authCacheOptions Cache configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: callable $authHttpHandler A handler used to deliver Psr7&#10;requests specifically for authentication.&#10;&lt;b&gt;type&lt;/b&gt;: callable $httpHandler A handler used to deliver Psr7 requests.&#10;Only valid for requests sent over REST.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile The contents of the service account credentials&#10;.json file retrieved from the Google Developer&apos;s Console.&#10;Ex: `json_decode(file_get_contents($path), true)`.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath The full path to your service account&#10;credentials .json file retrieved from the Google Developers&#10;Console.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: array $scopes Scopes to be used for the request.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options.;;d4,97;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="bigQuery;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;127;5;130;;;;vpos;;v;;aBigQueryClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    bigQuery(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud BigQuery allows you to create, manage, share and query&#10;data. Find more information at the&#10;[Google Cloud BigQuery Docs](https://cloud.google.com/bigquery/docs).&#10;Example:&#10;```&#10;$bigQuery = $cloud-&gt;bigQuery();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: bool $returnInt64AsObject If true, 64 bit integers will be&#10;returned as a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Int64} object for 32 bit&#10;platform compatibility. **Defaults to** false.&#10;&lt;b&gt;type&lt;/b&gt;: string $location If provided, determines the default geographic&#10;location used when creating datasets and managing jobs. Please&#10;note: This is only required for jobs started outside of the US&#10;and EU regions. Also, if location metadata has already been&#10;fetched over the network it will take precedent over this&#10;setting.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. See {;;d4,128;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="createClient;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f12;413;5;422;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createClient($class, $packageName, array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create the client library, or error if not installed.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The class to create.&#10;    string &lt;b&gt;$packageName&lt;/b&gt;: The name of the package&#10;    array &lt;b&gt;$config&lt;/b&gt;: Configuration options.;;d4,414;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $class;;pstring $packageName;;parray $config;;p;;x;;x;;x">
</treenode>
<treenode node="datastore;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;151;5;154;;;;vpos;;v;;aDatastoreClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    datastore(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Datastore is a highly-scalable NoSQL database for your&#10;applications. Find more information at the&#10;[Google Cloud Datastore docs](https://cloud.google.com/datastore/docs/).&#10;Example:&#10;```&#10;$datastore = $cloud-&gt;datastore();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: bool $returnInt64AsObject If true, 64 bit integers will be&#10;returned as a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Int64} object for 32 bit&#10;platform compatibility. **Defaults to** false.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. See {;;d4,152;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="firestore;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;175;5;178;;;;vpos;;v;;aFirestoreClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    firestore(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cloud Firestore is a flexible, scalable, realtime database for mobile,&#10;web, and server development. Find more information at the&#10;[Google Cloud firestore docs](https://cloud.google.com/firestore/docs/).&#10;Example:&#10;```&#10;$firestore = $cloud-&gt;firestore();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: bool $returnInt64AsObject If true, 64 bit integers will be&#10;returned as a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Int64} object for 32 bit&#10;platform compatibility. **Defaults to** false.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. See {;;d4,176;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="language;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;216;5;219;;;;vpos;;v;;aLanguageClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    language(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Natural Language provides natural language understanding&#10;technologies to developers, including sentiment analysis, entity&#10;recognition, and syntax analysis. Currently only English, Spanish,&#10;and Japanese textual context are supported. Find more information at the&#10;[Google Cloud Natural Language docs](https://cloud.google.com/natural-language/docs/).&#10;Example:&#10;```&#10;$language = $cloud-&gt;language();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the available options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] Configuration options. See {;;d4,217;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="logging;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;195;5;198;;;;vpos;;v;;aLoggingClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    logging(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Stackdriver Logging allows you to store, search, analyze, monitor,&#10;and alert on log data and events from Google Cloud Platform and Amazon&#10;Web Services. Find more information at the&#10;[Google Stackdriver Logging docs](https://cloud.google.com/logging/docs/).&#10;Example:&#10;```&#10;$logging = $cloud-&gt;logging();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the available options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] Configuration options. See {;;d4,196;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="pubsub;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;240;5;243;;;;vpos;;v;;aPubSubClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pubsub(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Pub/Sub allows you to send and receive messages between&#10;independent applications. Find more information at the&#10;[Google Cloud Pub/Sub docs](https://cloud.google.com/pubsub/docs/).&#10;Example:&#10;```&#10;$pubsub = $cloud-&gt;pubsub();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: string $transport The transport type used for requests. May be&#10;either `grpc` or `rest`. **Defaults to** `grpc` if gRPC support&#10;is detected on the system.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. See {;;d4,241;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="resolveConfig;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f12;430;5;445;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resolveConfig(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resolves configuration options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;;;d4,431;;b3,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="spanner;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;265;5;268;;;;vpos;;v;;aSpannerClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    spanner(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Spanner is a highly scalable, transactional, managed, NewSQL&#10;database service. Find more information at&#10;[Google Cloud Spanner API docs](https://cloud.google.com/spanner/).&#10;Example:&#10;```&#10;$spanner = $cloud-&gt;spanner();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: bool $returnInt64AsObject If true, 64 bit integers will be&#10;returned as a {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Int64} object for 32 bit&#10;platform compatibility. **Defaults to** false.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. See {;;d4,266;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="speech;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;294;5;297;;;;vpos;;v;;aSpeechClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    speech(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Speech enables easy integration of Google speech recognition&#10;technologies into developer applications. Send audio and receive a text&#10;transcription from the Cloud Speech API service. Find more information at&#10;the [Google Cloud Speech API docs](https://cloud.google.com/speech/docs/).&#10;Example:&#10;```&#10;$speech = $cloud-&gt;speech([&#10;&apos;languageCode&apos; =&gt; &apos;en-US&apos;&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the other available options.&#10;&lt;b&gt;type&lt;/b&gt;: string $languageCode The language of the content to&#10;be recognized. Only BCP-47 (e.g., `&quot;en-US&quot;`, `&quot;es-ES&quot;`)&#10;language codes are accepted. See&#10;[Language Support](https://cloud.google.com/speech/docs/languages)&#10;for a list of the currently supported language codes.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options. See {;;d4,295;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="storage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;313;5;316;;;;vpos;;v;;aStorageClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    storage(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Storage allows you to store and retrieve data on Google&apos;s&#10;infrastructure. Find more information at the&#10;[Google Cloud Storage API docs](https://developers.google.com/storage).&#10;Example:&#10;```&#10;$storage = $cloud-&gt;storage();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the available options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] Configuration options. See {;;d4,314;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="trace;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;333;5;336;;;;vpos;;v;;aTraceClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trace(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Stackdriver Trace allows you to collect latency data from your applications&#10;and display it in the Google Cloud Platform Console. Find more information at&#10;[Stackdriver Trace API docs](https://cloud.google.com/trace/docs/).&#10;Example:&#10;```&#10;$trace = $cloud-&gt;trace();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the available options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] Configuration options. See {;;d4,334;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="translate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;401;5;404;;;;vpos;;v;;aTranslateClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    translate(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Translation provides the ability to dynamically translate&#10;text between thousands of language pairs and lets websites and programs&#10;integrate with translation service programmatically.&#10;The Google Cloud Translation API is available as a paid&#10;service. See the [Pricing](https://cloud.google.com/translation/v2/pricing)&#10;and [FAQ](https://cloud.google.com/translation/v2/faq) pages for details.&#10;Find more information at the the&#10;[Google Cloud Translation docs](https://cloud.google.com/translation/docs/).&#10;Please note that while the Google Cloud Translation API supports&#10;authentication via service account and application default credentials&#10;like other Cloud Platform APIs, it also supports authentication via a&#10;public API access key. If you wish to authenticate using an API key,&#10;follow the&#10;[before you begin](https://cloud.google.com/translation/v2/translating-text-with-rest#before-you-begin)&#10;instructions to learn how to generate a key.&#10;Example:&#10;```&#10;use Google\Cloud\Core\ServiceBuilder;s&#10;$builder = new ServiceBuilder([&#10;&apos;key&apos; =&gt; &apos;YOUR_KEY&apos;&#10;]);s&#10;$translate = $builder-&gt;translate();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $key A public API access key.&#10;&lt;b&gt;type&lt;/b&gt;: string $target The target language to assign to the client.&#10;Defaults to `en` (English).&#10;&lt;b&gt;type&lt;/b&gt;: callable $httpHandler A handler used to deliver Psr7 requests.&#10;Only valid for requests sent over REST.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options.;;d4,402;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="vision;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ServiceBuilder.php;f11;353;5;356;;;;vpos;;v;;aVisionClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    vision(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Vision allows you to understand the content of an image,&#10;classify images into categories, detect text, objects, faces and more.&#10;Find more information at the&#10;[Google Cloud Vision docs](https://cloud.google.com/vision/docs/).&#10;Example:&#10;```&#10;$vision = $cloud-&gt;vision();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\ServiceBuilder::__construct()} for the available options.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] Configuration options. See {;;d4,354;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
</treenode>
<treenode node="ServiceException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ServiceException.php;f0;24;1;83;;;;vpos;;v;;aGoogleException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ServiceException extends GoogleException&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Exception thrown when a request fails.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ServiceException.php;f11;44;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $message,&#10;        $code = null,&#10;        Exception $serviceException = null,&#10;        array $metadata = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handle previous exceptions differently here.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;&#10;    int &lt;b&gt;$code&lt;/b&gt;&#10;    Exception &lt;b&gt;$serviceException&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: [optional] Exception metadata.;;d6,49;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pint $code;;pException $serviceException;;parray $metadata;;p;;x;;x;;x;;x">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ServiceException.php;f11;79;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMetadata()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get exception metadata.;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getServiceException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ServiceException.php;f11;71;5;74;;;;vpos;;v;;aException;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getServiceException()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the service exception object.;;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasServiceException;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Exception\ServiceException.php;f11;61;5;64;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasServiceException()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    If $serviceException is set, return true.;;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SessionCookieJar;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SessionCookieJar.php;f0;7;1;76;;;;vpos;;v;;aCookieJar;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SessionCookieJar extends CookieJar&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Persists cookies in the client session;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SessionCookieJar.php;f11;27;5;33;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $sessionKey, bool $storeSessionCookies = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new SessionCookieJar object&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$sessionKey&lt;/b&gt;: Session key name to store the cookie data in session&#10;    bool &lt;b&gt;$storeSessionCookies&lt;/b&gt;: Set to true to store session cookies in the cookie jar.;;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $sessionKey;;pbool $storeSessionCookies;;p;;x;;x">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SessionCookieJar.php;f11;38;5;41;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __destruct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Saves cookies to session when shutting down;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="load;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SessionCookieJar.php;f14;62;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    load(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load the contents of the client session into the data array;;d4,63;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SessionCookieJar.php;f11;46;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    save(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Save cookies to the client session;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SetCookie;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f0;7;1;409;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SetCookie&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set-Cookie object;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;74;5;90;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $data = [])&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$data&lt;/b&gt;: Array of cookie data provided by a Cookie parser;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;larray $data;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;92;5;106;;;;vpos;;v;;a;;r;;d4,93;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fromString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f18;34;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromString(string $cookie): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new SetCookie object from a string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$cookie&lt;/b&gt;: Set-Cookie header string;;d4,35;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $cookie;;p;;x">
</treenode>
<treenode node="getDiscard;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;260;5;263;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDiscard()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get whether or not this is a session cookie.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,261;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getDomain;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;158;5;161;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDomain()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the domain.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,159;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getExpires;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;218;5;221;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getExpires()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The UNIX timestamp when the cookie Expires.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |int|null;;d4,219;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHttpOnly;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;280;5;283;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHttpOnly()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get whether or not this is an HTTP only cookie.;;d4,281;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMaxAge;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;198;5;201;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMaxAge()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Maximum lifetime of the cookie in seconds.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,199;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;118;5;121;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getName()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the cookie name.;;d4,119;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;178;5;181;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getPath()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the path.;;d4,179;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSecure;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;240;5;243;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSecure()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get whether or not this is a secure cookie.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,241;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;138;5;141;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getValue()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the cookie value.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,139;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isExpired;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;366;5;369;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isExpired(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if the cookie is expired.;;d4,367;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="matchesDomain;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;338;5;361;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    matchesDomain(string $domain): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if the cookie matches a domain value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$domain&lt;/b&gt;: Domain to check against;;d4,339;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $domain;;p;;x">
</treenode>
<treenode node="matchesPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;310;5;331;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    matchesPath(string $requestPath): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if the cookie matches a path value.&#10;A request-path path-matches a given cookie-path if at least one of&#10;the following conditions holds:&#10;- The cookie-path and the request-path are identical.&#10;- The cookie-path is a prefix of the request-path, and the last&#10;character of the cookie-path is %x2F (&quot;/&quot;).&#10;- The cookie-path is a prefix of the request-path, and the first&#10;character of the request-path that is not included in the cookie-&#10;path is a %x2F (&quot;/&quot;) character.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$requestPath&lt;/b&gt;: Path to check against;;d4,311;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $requestPath;;p;;x">
</treenode>
<treenode node="setDiscard;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;270;5;273;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setDiscard($discard): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set whether or not this is a session cookie.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$discard&lt;/b&gt;: Set to true or false if this is a session cookie;;d4,271;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $discard;;p;;x">
</treenode>
<treenode node="setDomain;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;168;5;171;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setDomain($domain): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the domain of the cookie.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$domain&lt;/b&gt;;;d4,169;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $domain;;p;;x">
</treenode>
<treenode node="setExpires;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;228;5;233;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setExpires($timestamp): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the unix timestamp for which the cookie will expire.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$timestamp&lt;/b&gt;: Unix timestamp or any English textual datetime description.;;d4,229;;b1,0;;m0;;e0;;i0;;o;;k;;lint|string $timestamp;;p;;x">
</treenode>
<treenode node="setHttpOnly;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;290;5;293;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setHttpOnly($httpOnly): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set whether or not this is an HTTP only cookie.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$httpOnly&lt;/b&gt;: Set to true or false if this is HTTP only;;d4,291;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $httpOnly;;p;;x">
</treenode>
<treenode node="setMaxAge;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;208;5;211;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setMaxAge($maxAge): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the max-age of the cookie.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$maxAge&lt;/b&gt;: Max age of the cookie in seconds;;d4,209;;b1,0;;m0;;e0;;i0;;o;;k;;lint $maxAge;;p;;x">
</treenode>
<treenode node="setName;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;128;5;131;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setName($name): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the cookie name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Cookie name;;d4,129;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="setPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;188;5;191;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPath($path): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the path of the cookie.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: Path of the cookie;;d4,189;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="setSecure;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;250;5;253;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSecure($secure): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set whether or not the cookie is secure.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$secure&lt;/b&gt;: Set to true or false if secure;;d4,251;;b1,0;;m0;;e0;;i0;;o;;k;;lbool $secure;;p;;x">
</treenode>
<treenode node="setValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;148;5;151;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setValue($value): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the cookie value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$value&lt;/b&gt;: Cookie value;;d4,149;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $value;;p;;x">
</treenode>
<treenode node="toArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;108;5;111;;;;vpos;;v;;a array;;r;;d4,109;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="validate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Cookie\SetCookie.php;f11;376;5;408;;;;vpos;;v;;abool|string;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    validate()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if the cookie is valid according to RFC 6265.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns true if valid or an error message if invalid;;d4,377;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SignalHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\SignalHandler.php;f0;22;1;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SignalHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Monolog POSIX signal handler&#10;&lt;b&gt;author&lt;/b&gt;: Robert Gust-Bardon &lt;robert&#10;&lt;b&gt;gust&lt;/b&gt;: -bardon.org&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\SignalHandler.php;f11;30;5;33;;;;vpos;;v;;a;;r;;d4,31;;b1,0;;m0;;e0;;i0;;o;;k;;llogger;;p;;x">
</treenode>
<treenode node="handleSignal;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\SignalHandler.php;f11;59;5;97;;;;vpos;;v;;a void;;r;;d4,60;;b1,0;;m0;;e0;;i0;;o;;k;;lsigno;;psiginfo;;p;;x;;x">
</treenode>
<treenode node="registerSignalHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\SignalHandler.php;f11;35;5;57;;;;vpos;;v;;a self;;r;;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;lsigno;;plevel;;pcallPrevious;;prestartSyscalls;;pasync;;p;;x;;x;;x;;x;;x">
</treenode>
</treenode>
<treenode node="SignatureInvalidException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\firebase\php-jwt\src\SignatureInvalidException.php;f0;3;1;5;;;;vpos;;v;;aUnexpectedValueException;;c;;r;;d0,4;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SignedUrlUploader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\SignedUrlUploader.php;f0;27;1;98;;;;vpos;;v;;aResumableUploader;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SignedUrlUploader extends ResumableUploader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Upload data to Cloud Storage using a Signed URL;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\SignedUrlUploader.php;f11;50;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        RequestWrapper $requestWrapper,&#10;        $data,&#10;        $uri,&#10;        array $options = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;type&lt;/b&gt;: array $metadata Metadata on the resource.&#10;&lt;b&gt;type&lt;/b&gt;: int $chunkSize Size of the chunks to send incrementally during&#10;a resumable upload. Must be in multiples of 262144 bytes.&#10;&lt;b&gt;type&lt;/b&gt;: array $restOptions HTTP client specific configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `0`.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType Content type of the resource.&#10;&lt;b&gt;type&lt;/b&gt;: string $origin If the target has Cross-Origin Resource Sharing&#10;enabled, the value of the Origin header to be used in upload&#10;requests.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestWrapper &lt;b&gt;$requestWrapper&lt;/b&gt;&#10;    string|resource|StreamInterface &lt;b&gt;$data&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Optional configuration.;;d6,55;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestWrapper $requestWrapper;;pstring|resource|StreamInterface $data;;pstring $uri;;parray $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="createResumeUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\SignedUrlUploader.php;f14;69;5;86;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createResumeUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates the resume URI.;;d4,70;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="decodeResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\SignedUrlUploader.php;f14;94;5;97;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    decodeResponse(ResponseInterface $response)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decode the response body&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ResponseInterface &lt;b&gt;$response&lt;/b&gt;;;d4,95;;b2,0;;m0;;e0;;i0;;o;;k;;lResponseInterface $response;;p;;x">
</treenode>
</treenode>
<treenode node="SigningHelper;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f0;31;1;885;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SigningHelper&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides common methods for signing storage URLs.&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,32;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_DOWNLOAD_HOST;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f9;37;31;37;;;;vpos;;v;;a;;r&apos;storage.googleapis.com&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_URL_SIGNING_VERSION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f9;36;37;36;;;;vpos;;v;;a;;r&apos;v2&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="V4_ALGO_NAME;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f9;39;22;39;;;;vpos;;v;;a;;r&apos;GOOG4-RSA-SHA256&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="V4_DATESTAMP_FORMAT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f9;41;29;41;;;;vpos;;v;;a;;r&apos;Ymd&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="V4_TIMESTAMP_FORMAT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f9;40;29;40;;;;vpos;;v;;a;;r&apos;Ymd\THis\Z&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="addCommonParams;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;848;5;866;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addCommonParams($generation, array $params, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add parameters common to all signed URL versions.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|null &lt;b&gt;$generation&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,849;;b3,0;;m0;;e0;;i0;;o;;k;;lint|null $generation;;parray $params;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="buildQueryString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;876;5;884;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildQueryString(array $input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a query string from an array.&#10;Note that this method does NOT urlencode keys or values.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$input&lt;/b&gt;;;d4,877;;b3,0;;m0;;e0;;i0;;o;;k;;larray $input;;p;;x">
</treenode>
<treenode node="chooseScheme;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;516;5;530;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    chooseScheme($scheme, $bucketBoundHostname, $virtualHostedStyle = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Choose the correct URL scheme.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$scheme&lt;/b&gt;: The scheme provided by the user or defaults.&#10;    string &lt;b&gt;$bucketBoundHostname&lt;/b&gt;: The bucketBoundHostname provided by the user or defaults.&#10;    bool &lt;b&gt;$virtualHostedStyle&lt;/b&gt;: Whether virtual host style is enabled.;;d4,517;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $scheme;;pstring $bucketBoundHostname;;pbool $virtualHostedStyle;;p;;x;;x;;x">
</treenode>
<treenode node="createV2CanonicalRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;503;5;506;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createV2CanonicalRequest(array $canonicalRequest)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a canonical request for a V2 Signed URL.&#10;NOTE: While in most cases `PHP_EOL` is preferable to a system-specific&#10;character, in this case `\n` is required.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$canonicalRequest&lt;/b&gt;: The canonical request, with each element representing a line in the request.;;d4,504;;b3,0;;m0;;e0;;i0;;o;;k;;larray $canonicalRequest;;p;;x">
</treenode>
<treenode node="createV4CanonicalRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;487;5;491;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createV4CanonicalRequest(array $canonicalRequest)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a canonical request hash for a V4 Signed URL.&#10;NOTE: While in most cases `PHP_EOL` is preferable to a system-specific&#10;character, in this case `\n` is required.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$canonicalRequest&lt;/b&gt;: The canonical request, with each element representing a line in the request.;;d4,488;;b3,0;;m0;;e0;;i0;;o;;k;;larray $canonicalRequest;;p;;x">
</treenode>
<treenode node="getHelper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f18;48;5;56;;;;vpos;;v;;aSigningHelper;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHelper()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create or fetch a SigningHelper instance.;;d4,49;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPayloadHash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;539;5;546;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getPayloadHash(array $headers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    If `X-Goog-Content-SHA256` header is provided, use that as the payload.&#10;Otherwise, `UNSIGNED-PAYLOAD`.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$headers&lt;/b&gt;;;d4,540;;b3,0;;m0;;e0;;i0;;o;;k;;larray $headers;;p;;x">
</treenode>
<treenode node="getSigningCredentials;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;790;5;838;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSigningCredentials(ConnectionInterface $connection, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the credentials for use with signing.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the credentials type is not valid for signing.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If a keyfile is given and is not valid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: A Storage connection object.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A list containing a credentials object at index 0 and the modified options at index 1.;;d4,791;;b3,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;parray $options;;p;;x;;x">
</treenode>
<treenode node="normalizeCanonicalRequestResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;769;5;778;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeCanonicalRequestResource($resource, $bucketBoundHostname, $virtualHostedStyle = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalize the resource provided to the canonical request string.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$resource&lt;/b&gt;&#10;    string &lt;b&gt;$bucketBoundHostname&lt;/b&gt;&#10;    boolean &lt;b&gt;$virtualHostedStyle&lt;/b&gt;;;d4,770;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $resource;;pstring $bucketBoundHostname;;pboolean $virtualHostedStyle;;p;;x;;x;;x">
</treenode>
<treenode node="normalizeExpiration;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;555;5;568;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeExpiration($expires)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalizes and validates an expiration.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If an invalid value is given.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: The expiration;;d4,556;;b3,0;;m0;;e0;;i0;;o;;k;;lTimestamp|\DateTimeInterface|int $expires;;p;;x">
</treenode>
<treenode node="normalizeHeaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;703;5;728;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeHeaders(array $headers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Cleans and normalizes header values.&#10;Arrays of values are collapsed into a comma-separated list, trailing and&#10;leading spaces are removed, newlines are replaced by empty strings, and&#10;multiple whitespace chars are replaced by a single space.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$headers&lt;/b&gt;: Input headers;;d4,704;;b3,0;;m0;;e0;;i0;;o;;k;;larray $headers;;p;;x">
</treenode>
<treenode node="normalizeOptions;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;608;5;691;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeOptions(array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fixes the user input options, filters and validates data.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Signed URL configuration options.;;d4,609;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="normalizeResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;579;5;599;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeResource($resource, $urlencode = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalizes and encodes the resource identifier.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The resource identifier. In form `[/]$bucket/$object`.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A list, where index 0 is the resource path, with pieces encoded and prefixed with a forward slash, index 1 is the bucket name, and index 2 is the object name, relative to the bucket.;;d4,580;;b3,0;;m0;;e0;;i0;;o;;k;;lresource;;purlencode;;p;;x;;x">
</treenode>
<treenode node="normalizeUriPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f12;740;5;759;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeUriPath($bucketBoundHostname, $resource, $withTrailingSlash = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a resource formatted for use in a URI.&#10;If the bucketBoundHostname is other than the default, will omit the bucket name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$bucketBoundHostname&lt;/b&gt;: The bucketBoundHostname provided by the user, or the default value.&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The GCS resource path (i.e. /bucket/object).;;d4,741;;b3,0;;m0;;e0;;i0;;o;;k;;lbucketBoundHostname;;presource;;pwithTrailingSlash;;p;;x;;x;;x">
</treenode>
<treenode node="sign;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f11;78;5;106;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sign(ConnectionInterface $connection, $expires, $resource, $generation, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign using the version inferred from `$options.version`.&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::signedUrl()} for&#10;details.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If required data could not be gathered from&#10;credentials.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If OpenSSL signing is required by user input&#10;and OpenSSL is not available.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: A connection to the Cloud Storage API.&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: The signed URL expiration.&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The URI to the storage resource, preceded by a leading slash.&#10;    int|null &lt;b&gt;$generation&lt;/b&gt;: The resource generation.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration options. See {;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pTimestamp|\DateTimeInterface|int $expires;;pstring $resource;;pint|null $generation;;parray $options;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="v2Sign;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f11;130;5;204;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    v2Sign(ConnectionInterface $connection, $expires, $resource, $generation, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a URL using Google Signed URLs v2.&#10;This method will be deprecated in the future.&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::signedUrl()} for&#10;details.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If required data could not be gathered from&#10;credentials.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If OpenSSL signing is required by user input&#10;and OpenSSL is not available.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: A connection to the Cloud Storage API.&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: The signed URL expiration.&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The URI to the storage resource, preceded by a leading slash.&#10;    int|null &lt;b&gt;$generation&lt;/b&gt;: The resource generation.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration options. See {;;d4,131;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pTimestamp|\DateTimeInterface|int $expires;;pstring $resource;;pint|null $generation;;parray $options;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="v4PostPolicy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f11;375;5;475;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    v4PostPolicy(&#10;        ConnectionInterface $connection,&#10;        $expires,&#10;        $resource,&#10;        array $options = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create an HTTP POST policy using v4 signing.&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::generateSignedPostPolicyV4()} for details.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: A Connection to Google Cloud Storage.&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: The signed URL expiration.&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The URI to the storage resource, preceded by a leading slash.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration options. See {&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An associative array, containing (string) `uri` and (array) `fields` keys.;;d6,380;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pTimestamp|\DateTimeInterface|int $expires;;pstring $resource;;parray $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="v4Sign;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\SigningHelper.php;f11;226;5;360;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    v4Sign(ConnectionInterface $connection, $expires, $resource, $generation, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sign a storage URL using Google Signed URLs v4.&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::signedUrl()} for&#10;details.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If required data could not be gathered from&#10;credentials.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If OpenSSL signing is required by user input&#10;and OpenSSL is not available.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: A connection to the Cloud Storage API.&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: The signed URL expiration.&#10;    string &lt;b&gt;$resource&lt;/b&gt;: The URI to the storage resource, preceded by a leading slash.&#10;    int|null &lt;b&gt;$generation&lt;/b&gt;: The resource generation.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Configuration options. See {;;d4,227;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pTimestamp|\DateTimeInterface|int $expires;;pstring $resource;;pint|null $generation;;parray $options;;p;;x;;x;;x;;x;;x">
</treenode>
</treenode>
<treenode node="SimpleJob;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJob.php;f0;27;1;75;;;;vpos;;v;;aJobInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SimpleJob implements JobInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a simple job that runs a single method that loops forever.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJob.php;f11;51;5;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($identifier, $func, $id, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new Simple Job.&#10;&lt;b&gt;type&lt;/b&gt;: string $bootstrapFile A file to load before executing the job.&#10;It&apos;s needed for registering global functions.&#10;&lt;b&gt;type&lt;/b&gt;: int $numWorkers The number of workers for this job.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: Unique identifier of the job.&#10;    callable &lt;b&gt;$func&lt;/b&gt;: Any Callable except for Closure. The callable should not accept arguments and should loop forever.&#10;    int &lt;b&gt;$id&lt;/b&gt;: The job id.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;pcallable $func;;pint $id;;parray $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJob.php;f11;68;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    run()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runs the job loop. This is expected to be a blocking call.;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SimpleJobTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJobTrait.php;f0;29;1;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait SimpleJobTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A trait to assist in the registering and processing of simple jobs.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="defaultConfigStorage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJobTrait.php;f12;96;5;103;;;;vpos;;v;;a;;r;;d4,97;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJobTrait.php;f20;38;34;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The simple loop function. This method is expected to be a blocking call.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setSimpleJobProperties;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SimpleJobTrait.php;f12;61;5;94;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSimpleJobProperties(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers this object as a SimpleJob.&#10;&lt;b&gt;type&lt;/b&gt;: string $identifier An identifier for the simple job. This&#10;value must be unique across all job configs.&#10;&lt;b&gt;type&lt;/b&gt;: ConfigStorageInterface $configStorage The configuration storage&#10;used to save configuration.&#10;&lt;b&gt;type&lt;/b&gt;: int $numWorkers The number of workers for this job.&#10;&lt;b&gt;type&lt;/b&gt;: array $clientConfig A config used to construct the client upon&#10;which requests will be made.&#10;&lt;b&gt;type&lt;/b&gt;: ClosureSerializerInterface $closureSerializer An implementation&#10;responsible for serializing closures used in the&#10;`$clientConfig`. This is especially important when using the&#10;batch daemon. **Defaults to**&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Batch\OpisClosureSerializer} if the&#10;`opis/closure` library is installed.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,62;;b3,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
</treenode>
<treenode node="SimpleMetadataProvider;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f0;22;1;95;;;;vpos;;v;;aMetadataProviderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SimpleMetadataProvider implements MetadataProviderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Simple MetadataProvider.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f11;35;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $monitoredResource = [],&#10;        $projectId = &apos;&apos;,&#10;        $serviceId = &apos;&apos;,&#10;        $versionId = &apos;&apos;,&#10;        $labels = []&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/logging/docs/reference/v2/rest/v2/MonitoredResource}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$monitoredResource&lt;/b&gt;: . {&#10;    string &lt;b&gt;$projectId&lt;/b&gt;: [optional] **Defaults to** &apos;&apos;&#10;    string &lt;b&gt;$serviceId&lt;/b&gt;: [optional] **Defaults to** &apos;&apos;&#10;    string &lt;b&gt;$versionId&lt;/b&gt;: [optional] **Defaults to** &apos;&apos;&#10;    array &lt;b&gt;$labels&lt;/b&gt;: [optional] **Defaults to** [];;d6,41;;b1,0;;m0;;e0;;i0;;o;;k;;larray $monitoredResource;;pstring $projectId;;pstring $serviceId;;pstring $versionId;;parray $labels;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="labels;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f11;91;5;94;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    labels()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the labels.;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="monitoredResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f11;55;5;58;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    monitoredResource()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an array representing MonitoredResource.&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/logging/docs/reference/v2/rest/v2/MonitoredResource};;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="projectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f11;64;5;67;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    projectId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the project id.;;d4,65;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="serviceId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f11;73;5;76;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    serviceId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the service id.;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="versionId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Report\SimpleMetadataProvider.php;f11;82;5;85;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    versionId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the version id.;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SimpleMiddleware;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\SimpleMiddleware.php;f0;28;1;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SimpleMiddleware&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SimpleMiddleware is a Guzzle Middleware that implements Google&apos;s Simple API&#10;access.&#10;Requests are accessed using the Simple API access developer key.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\SimpleMiddleware.php;f11;43;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new Simple plugin.&#10;The configuration array expects one option&#10;- key: required, otherwise InvalidArgumentException is thrown&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: Configuration array;;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Middleware\SimpleMiddleware.php;f11;75;5;90;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(callable $handler)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the request query with the developer key if auth is set to simple.&#10;use Google\Auth\Middleware\SimpleMiddleware;s&#10;use GuzzleHttp\Client;s&#10;use GuzzleHttp\HandlerStack;s&#10;$my_key = &apos;is not the same as yours&apos;;s&#10;$middleware = new SimpleMiddleware([&apos;key&apos; =&gt; $my_key]);s&#10;$stack = HandlerStack::create();s&#10;$stack-&gt;push($middleware);s&#10;$client = new Client([&#10;&apos;handler&apos; =&gt; $stack,&#10;&apos;base_uri&apos; =&gt; &apos;https://www.googleapis.com/discovery/v1/&apos;,&#10;&apos;auth&apos; =&gt; &apos;simple&apos;&#10;]);s&#10;$res = $client-&gt;get(&apos;drive/v2/rest&apos;);s&#10;\Closure&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$handler&lt;/b&gt;;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $handler;;p;;x">
</treenode>
</treenode>
<treenode node="SimpleSubscriber;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\SimpleSubscriber.php;f0;29;1;92;;;;vpos;;v;;aSubscriberInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SimpleSubscriber implements SubscriberInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SimpleSubscriber is a Guzzle Subscriber that implements Google&apos;s Simple API&#10;access.&#10;Requests are accessed using the Simple API access developer key.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\SimpleSubscriber.php;f11;44;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new Simple plugin.&#10;The configuration array expects one option&#10;- key: required, otherwise InvalidArgumentException is thrown&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: Configuration array;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="getEvents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\SimpleSubscriber.php;f11;56;5;59;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getEvents()&#10;;;d4,57;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="onBefore;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Subscriber\SimpleSubscriber.php;f11;83;5;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    onBefore(BeforeEvent $event)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Updates the request query with the developer key if auth is set to simple.&#10;Example:&#10;```&#10;use Google\Auth\Subscriber\SimpleSubscriber;s&#10;use GuzzleHttp\Client;s&#10;$my_key = &apos;is not the same as yours&apos;;s&#10;$subscriber = new SimpleSubscriber([&apos;key&apos; =&gt; $my_key]);s&#10;$client = new Client([&#10;&apos;base_url&apos; =&gt; &apos;https://www.googleapis.com/discovery/v1/&apos;,&#10;&apos;defaults&apos; =&gt; [&apos;auth&apos; =&gt; &apos;simple&apos;]&#10;]);s&#10;$client-&gt;getEmitter()-&gt;attach($subscriber);s&#10;$res = $client-&gt;get(&apos;drive/v2/rest&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    BeforeEvent &lt;b&gt;$event&lt;/b&gt;;;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;lBeforeEvent $event;;p;;x">
</treenode>
</treenode>
<treenode node="SlackHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f0;24;1;232;;;;vpos;;v;;aSocketHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SlackHandler extends SocketHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends notifications through Slack API&#10;&lt;b&gt;author&lt;/b&gt;: Greg Kedzierski &lt;greg&#10;&lt;b&gt;gregkedzierski&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://api.slack.com/;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;51;5;80;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        string $token,&#10;        string $channel,&#10;        ?string $username = null,&#10;        bool $useAttachment = true,&#10;        ?string $iconEmoji = null,&#10;        $level = Logger::CRITICAL,&#10;        bool $bubble = true,&#10;        bool $useShortAttachment = false,&#10;        bool $includeContextAndExtra = false,&#10;        array $excludeFields = array()&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException If no OpenSSL PHP extension configured&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$token&lt;/b&gt;: Slack API token&#10;    string &lt;b&gt;$channel&lt;/b&gt;: Slack channel (encoded ID or name)&#10;    string|null &lt;b&gt;$username&lt;/b&gt;: Name of a bot&#10;    bool &lt;b&gt;$useAttachment&lt;/b&gt;: Whether the message should be added to Slack as attachment (plain text otherwise)&#10;    string|null &lt;b&gt;$iconEmoji&lt;/b&gt;: The emoji name to use (or null)&#10;    int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    bool &lt;b&gt;$useShortAttachment&lt;/b&gt;: Whether the context/extra messages added to Slack as attachments are in a short style&#10;    bool &lt;b&gt;$includeContextAndExtra&lt;/b&gt;: Whether the attachment should include context and extra data&#10;    array &lt;b&gt;$excludeFields&lt;/b&gt;: Dot separated list of fields to exclude from slack message. E.g. [&apos;context.field1&apos;, &apos;extra.field2&apos;];;d6,62;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $token;;pstring $channel;;pstring|null $username;;pbool $useAttachment;;pstring|null $iconEmoji;;pint $level;;pbool $bubble;;pbool $useShortAttachment;;pbool $includeContextAndExtra;;parray $excludeFields;;p;;x;;x;;x;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="buildContent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f12;105;5;110;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildContent(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the body of API call;;d4,106;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="buildHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f12;127;5;136;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildHeader(string $content): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Builds the header of the API Call;;d4,128;;b3,0;;m0;;e0;;i0;;o;;k;;lcontent;;p;;x">
</treenode>
<treenode node="excludeFields;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;226;5;231;;;;vpos;;v;;a self;;r;;d4,227;;b1,0;;m0;;e0;;i0;;o;;k;;lexcludeFields;;p;;x">
</treenode>
<treenode node="finalizeWrite;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f14;153;5;160;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    finalizeWrite(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finalizes the request by reading some bytes and then closing the socket&#10;If we do not read some but close the socket too early, slack sometimes&#10;drops the request entirely.;;d4,154;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f14;95;5;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateDataStream(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,96;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;170;5;176;;;;vpos;;v;;a FormatterInterface;;r;;d4,171;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSlackRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;82;5;85;;;;vpos;;v;;a SlackRecord;;r;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;87;5;90;;;;vpos;;v;;a string;;r;;d4,88;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="includeContextAndExtra;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;219;5;224;;;;vpos;;v;;a self;;r;;d4,220;;b1,0;;m0;;e0;;i0;;o;;k;;lincludeContextAndExtra;;p;;x">
</treenode>
<treenode node="prepareContentData;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f14;112;5;122;;;;vpos;;v;;a array;;r;;d4,113;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="setChannel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;181;5;186;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setChannel(string $channel): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Channel used by the bot when posting;;d4,182;;b1,0;;m0;;e0;;i0;;o;;k;;lchannel;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;162;5;168;;;;vpos;;v;;a HandlerInterface;;r;;d4,163;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
<treenode node="setIconEmoji;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;205;5;210;;;;vpos;;v;;a self;;r;;d4,206;;b1,0;;m0;;e0;;i0;;o;;k;;liconEmoji;;p;;x">
</treenode>
<treenode node="setUsername;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;191;5;196;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUsername(string $username): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Username used by the bot when posting;;d4,192;;b1,0;;m0;;e0;;i0;;o;;k;;lusername;;p;;x">
</treenode>
<treenode node="useAttachment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;198;5;203;;;;vpos;;v;;a self;;r;;d4,199;;b1,0;;m0;;e0;;i0;;o;;k;;luseAttachment;;p;;x">
</treenode>
<treenode node="useShortAttachment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f11;212;5;217;;;;vpos;;v;;a self;;r;;d4,213;;b1,0;;m0;;e0;;i0;;o;;k;;luseShortAttachment;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackHandler.php;f14;141;5;145;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,142;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="SlackRecord;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f0;26;1;355;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SlackRecord&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Slack record utility helping to log to Slack webhooks or API.&#10;&lt;b&gt;author&lt;/b&gt;: Greg Kedzierski &lt;greg&#10;&lt;b&gt;gregkedzierski&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Haralan Dobrev &lt;hkdobrev&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://api.slack.com/incoming-webhooks&#10;&lt;b&gt;see&lt;/b&gt;: https://api.slack.com/docs/message-attachments;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="COLOR_DANGER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f16;28;29;28;;;;vpos;;v;;a;;r&apos;danger&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="COLOR_DEFAULT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f16;34;30;34;;;;vpos;;v;;a;;r&apos;#e3e4e6&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="COLOR_GOOD;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f16;32;27;32;;;;vpos;;v;;a;;r&apos;good&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="COLOR_WARNING;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f16;30;30;30;;;;vpos;;v;;a;;r&apos;warning&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;88;5;111;;;;vpos;;v;;a;;r;;d6,97;;b1,0;;m0;;e0;;i0;;o;;k;;lchannel;;pusername;;puseAttachment;;puserIcon;;puseShortAttachment;;pincludeContextAndExtra;;pexcludeFields;;pformatter;;p;;x;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="excludeFields;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;287;5;292;;;;vpos;;v;;a self;;r;;d4,288;;b1,0;;m0;;e0;;i0;;o;;k;;lexcludeFields;;p;;x">
</treenode>
<treenode node="generateAttachmentField;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f12;306;5;317;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateAttachmentField(string $title, $value): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generates attachment field&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$value&lt;/b&gt;;;d4,307;;b3,0;;m0;;e0;;i0;;o;;k;;ltitle;;pvalue;;p;;x;;x">
</treenode>
<treenode node="generateAttachmentFields;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f12;322;5;330;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateAttachmentFields(array $data): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generates a collection of attachment fields from array;;d4,323;;b3,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="getAttachmentColor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;194;5;206;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAttachmentColor(int $level): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a Slack message attachment color associated with&#10;provided level.;;d4,195;;b1,0;;m0;;e0;;i0;;o;;k;;llevel;;p;;x">
</treenode>
<treenode node="getSlackData;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;117;5;188;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSlackData(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns required data in format that Slack&#10;is expecting.;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="includeContextAndExtra;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;276;5;285;;;;vpos;;v;;a self;;r;;d4,277;;b1,0;;m0;;e0;;i0;;o;;k;;lincludeContextAndExtra;;p;;x">
</treenode>
<treenode node="removeExcludedFields;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f12;335;5;354;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeExcludedFields(array $record): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a copy of record with fields excluded according to $this-&gt;excludeFields;;d4,336;;b3,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="setChannel;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;230;5;235;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setChannel(?string $channel = null): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Channel used by the bot when posting&#10;?string $channel&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ;;d4,231;;b1,0;;m0;;e0;;i0;;o;;k;;l;;p;;x">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;294;5;299;;;;vpos;;v;;a self;;r;;d4,295;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
<treenode node="setUserIcon;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;258;5;267;;;;vpos;;v;;a self;;r;;d4,259;;b1,0;;m0;;e0;;i0;;o;;k;;luserIcon;;p;;x">
</treenode>
<treenode node="setUsername;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;244;5;249;;;;vpos;;v;;astatic;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUsername(?string $username = null): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Username used by the bot when posting&#10;?string $username&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ;;d4,245;;b1,0;;m0;;e0;;i0;;o;;k;;l;;p;;x">
</treenode>
<treenode node="stringify;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;211;5;221;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    stringify(array $fields): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stringifies an array of key/value pairs to be used in attachment fields;;d4,212;;b1,0;;m0;;e0;;i0;;o;;k;;lfields;;p;;x">
</treenode>
<treenode node="useAttachment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;251;5;256;;;;vpos;;v;;a self;;r;;d4,252;;b1,0;;m0;;e0;;i0;;o;;k;;luseAttachment;;p;;x">
</treenode>
<treenode node="useShortAttachment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Slack\SlackRecord.php;f11;269;5;274;;;;vpos;;v;;a self;;r;;d4,270;;b1,0;;m0;;e0;;i0;;o;;k;;luseShortAttachment;;p;;x">
</treenode>
</treenode>
<treenode node="SlackWebhookHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f0;24;1;129;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SlackWebhookHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends notifications through Slack Webhooks&#10;&lt;b&gt;author&lt;/b&gt;: Haralan Dobrev &lt;hkdobrev&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;see&lt;/b&gt;: https://api.slack.com/incoming-webhooks;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f11;50;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        string $webhookUrl,&#10;        ?string $channel = null,&#10;        ?string $username = null,&#10;        bool $useAttachment = true,&#10;        ?string $iconEmoji = null,&#10;        bool $useShortAttachment = false,&#10;        bool $includeContextAndExtra = false,&#10;        $level = Logger::CRITICAL,&#10;        bool $bubble = true,&#10;        array $excludeFields = array()&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$webhookUrl&lt;/b&gt;: Slack Webhook URL&#10;    string|null &lt;b&gt;$channel&lt;/b&gt;: Slack channel (encoded ID or name)&#10;    string|null &lt;b&gt;$username&lt;/b&gt;: Name of a bot&#10;    bool &lt;b&gt;$useAttachment&lt;/b&gt;: Whether the message should be added to Slack as attachment (plain text otherwise)&#10;    string|null &lt;b&gt;$iconEmoji&lt;/b&gt;: The emoji name to use (or null)&#10;    bool &lt;b&gt;$useShortAttachment&lt;/b&gt;: Whether the the context/extra messages added to Slack as attachments are in a short style&#10;    bool &lt;b&gt;$includeContextAndExtra&lt;/b&gt;: Whether the attachment should include context and extra data&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    array &lt;b&gt;$excludeFields&lt;/b&gt;: Dot separated list of fields to exclude from slack message. E.g. [&apos;context.field1&apos;, &apos;extra.field2&apos;];;d6,61;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $webhookUrl;;pstring|null $channel;;pstring|null $username;;pbool $useAttachment;;pstring|null $iconEmoji;;pbool $useShortAttachment;;pbool $includeContextAndExtra;;pstring|int $level;;pbool $bubble;;parray $excludeFields;;p;;x;;x;;x;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f11;122;5;128;;;;vpos;;v;;a FormatterInterface;;r;;d4,123;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSlackRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f11;77;5;80;;;;vpos;;v;;a SlackRecord;;r;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getWebhookUrl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f11;82;5;85;;;;vpos;;v;;a string;;r;;d4,83;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f11;114;5;120;;;;vpos;;v;;a HandlerInterface;;r;;d4,115;;b1,0;;m0;;e0;;i0;;o;;k;;lformatter;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SlackWebhookHandler.php;f14;92;5;112;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,93;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="Snippet;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f0;22;1;310;;;;vpos;;v;;aJsonSerializable;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Snippet implements \JsonSerializable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a single code snippet;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;50;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($identifier, array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a snippet&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$identifier&lt;/b&gt;: The snippet ID&#10;    array &lt;b&gt;$config&lt;/b&gt;: The snippet config;;d4,51;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $identifier;;parray $config;;p;;x;;x">
</treenode>
<treenode node="addLocal;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;186;5;189;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addLocal($name, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a local variable to make available in the snippet execution scope.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The variable name&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The variable value;;d4,187;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pmixed $value;;p;;x;;x">
</treenode>
<treenode node="addUse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;197;5;200;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addUse($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a `use` statement for a class.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The class name to import.;;d4,198;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="content;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;114;5;117;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    content()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The snippet content.;;d4,115;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createReturnVar;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f12;298;5;309;;;;vpos;;v;;a;;r;;d4,299;;b3,0;;m0;;e0;;i0;;o;;k;;lreturnVar;;p;;x">
</treenode>
<treenode node="file;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;81;5;84;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    file()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The file in which the snippet is found.;;d4,82;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fqn;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;91;5;94;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fqn()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The Snippet fully-qualified name.;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="identifier;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;71;5;74;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    identifier()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A unique identifier for the snippet.&#10;This identifier is deterministic and will remain constant unless the&#10;snippet is modified or moved.;;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="index;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;124;5;127;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    index()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The Snippet Index;;d4,125;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="insertAfterLine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;240;5;246;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    insertAfterLine($line, $content)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Inject new code after a given line.&#10;Hopefully this is obvious, but be careful using this, and only use it&#10;when no other feasible options present themselves. It&apos;s pretty easy to&#10;make your test useless when you&apos;re modifying the thing you are trying&#10;to test.&#10;This is provided for cases when a snippet relies on a global, or on&#10;something else which can not be overridden or mocked.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$line&lt;/b&gt;: The line number (0-indexed) to write in after.&#10;    string &lt;b&gt;$content&lt;/b&gt;: The PHP code to inject.;;d4,241;;b1,0;;m0;;e0;;i0;;o;;k;;lint $line;;pstring $content;;p;;x;;x">
</treenode>
<treenode node="invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;144;5;177;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    invoke($returnVar = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Eval the snippet and return the result.;;d4,145;;b1,0;;m0;;e0;;i0;;o;;k;;lreturnVar;;p;;x">
</treenode>
<treenode node="jsonSerialize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;293;5;296;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonSerialize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Serialize to json;;d4,294;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="line;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;104;5;107;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    line()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The line number where the snippet&apos;s method or class is declared.&#10;Note that this is NOT the line number where the snippet is declared. It&#10;indicates the method or class which the snippet annotates.;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="name;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;134;5;137;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    name()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The snippet name;;d4,135;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="regexReplace;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;283;5;286;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    regexReplace($pattern, $new)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Find something with a regex and replace it.&#10;Hopefully this is obvious, but be careful using this, and only use it&#10;when no other feasible options present themselves. It&apos;s pretty easy to&#10;make your test useless when you&apos;re modifying the thing you are trying&#10;to test.&#10;This is provided for cases when a snippet relies on a global, or on&#10;something else which can not be overridden or mocked.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$pattern&lt;/b&gt;: The regex pattern to search for.&#10;    string &lt;b&gt;$new&lt;/b&gt;: The new string to insert.;;d4,284;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $pattern;;pstring $new;;p;;x;;x">
</treenode>
<treenode node="replace;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;263;5;266;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    replace($old, $new)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Replace a string in the snippet with a new one.&#10;Hopefully this is obvious, but be careful using this, and only use it&#10;when no other feasible options present themselves. It&apos;s pretty easy to&#10;make your test useless when you&apos;re modifying the thing you are trying&#10;to test.&#10;This is provided for cases when a snippet relies on a global, or on&#10;something else which can not be overridden or mocked.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$old&lt;/b&gt;: The string to be replaced.&#10;    string &lt;b&gt;$new&lt;/b&gt;: The new string to insert.;;d4,264;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $old;;pstring $new;;p;;x;;x">
</treenode>
<treenode node="setLine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\Parser\Snippet.php;f11;217;5;223;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLine($line, $content)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Replace a line with new code.&#10;Hopefully this is obvious, but be careful using this, and only use it&#10;when no other feasible options present themselves. It&apos;s pretty easy to&#10;make your test useless when you&apos;re overwriting the thing you are trying&#10;to test.&#10;This is provided for cases when a snippet relies on a global, or on&#10;something else which can not be overridden or mocked.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$line&lt;/b&gt;: The line number (0-indexed) to replace.&#10;    string &lt;b&gt;$content&lt;/b&gt;: The PHP code to inject.;;d4,218;;b1,0;;m0;;e0;;i0;;o;;k;;lint $line;;pstring $content;;p;;x;;x">
</treenode>
</treenode>
<treenode node="SnippetTestCase;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\SnippetTestCase.php;f0;32;1;127;;;;vpos;;v;;aTestCase;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SnippetTestCase extends TestCase&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provide helpers for Snippet tests.&#10;Snippet test cases should extend this class.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,33;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="setUpBeforeClass;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\SnippetTestCase.php;f18;45;5;49;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUpBeforeClass()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Run to set up class before testing&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,46;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="snippetFromClass;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\SnippetTestCase.php;f18;61;5;73;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    snippetFromClass($class, $indexOrName = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a snippet from a class-level docblock.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The class name.&#10;    string|int &lt;b&gt;$indexOrName&lt;/b&gt;: The index of the snippet, or its name.;;d4,62;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $class;;pstring|int $indexOrName;;p;;x;;x">
</treenode>
<treenode node="snippetFromMagicMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\SnippetTestCase.php;f18;87;5;100;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    snippetFromMagicMethod($class, $method, $indexOrName = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a snippet from a magic method docblock (i.e. `&#10;&lt;b&gt;method&lt;/b&gt;: ` tag&#10;nexted inside a class-level docblock).&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The class name&#10;    string &lt;b&gt;$method&lt;/b&gt;: The method name&#10;    string|int &lt;b&gt;$indexOrName&lt;/b&gt;: The index of the snippet, or its name.;;d4,88;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $class;;pstring $method;;pstring|int $indexOrName;;p;;x;;x;;x">
</treenode>
<treenode node="snippetFromMethod;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Snippet\SnippetTestCase.php;f18;113;5;126;;;;vpos;;v;;aSnippet;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    snippetFromMethod($class, $method, $indexOrName = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieve a snippet from a method docblock.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The class name&#10;    string &lt;b&gt;$method&lt;/b&gt;: The method name&#10;    string|int &lt;b&gt;$indexOrName&lt;/b&gt;: The index of the snippet, or its name.;;d4,114;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $class;;pstring $method;;pstring|int $indexOrName;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="SocketHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f0;21;1;379;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SocketHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores to any socket - uses fsockopen() or pfsockopen().&#10;&lt;b&gt;author&lt;/b&gt;: Pablo de Leon Belloc &lt;pablolb&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.fsockopen.php;;d0,22;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;45;5;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $connectionString, $level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$connectionString&lt;/b&gt;: Socket connection string&#10;    int|string &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,46;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $connectionString;;pint|string $level;;pbool $bubble;;p;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;70;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    We will not close a PersistentSocket instance so it can be reused in other requests.;;d4,71;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="closeSocket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;80;5;86;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    closeSocket(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Close socket, if open;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="connect;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;292;5;297;;;;vpos;;v;;a void;;r;;d4,293;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="connectIfNotConnected;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;271;5;277;;;;vpos;;v;;a;;r;;d4,272;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createSocketResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;299;5;310;;;;vpos;;v;;a void;;r;;d4,300;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fsockopen;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;219;5;222;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fsockopen()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper to allow mocking;;d4,220;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fwrite;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;250;5;253;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fwrite($data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper to allow mocking;;d4,251;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="generateDataStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;279;5;282;;;;vpos;;v;;a string;;r;;d4,280;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="getChunkSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;192;5;195;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getChunkSize(): int&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get current chunk size;;d4,193;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getConnectionString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;150;5;153;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getConnectionString(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get current connection string;;d4,151;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getConnectionTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;166;5;169;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getConnectionTimeout(): float&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get current connection timeout setting;;d4,167;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;287;5;290;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResource()&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,288;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;174;5;177;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getTimeout(): float&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get current in-transfer timeout;;d4,175;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getWritingTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;184;5;187;;;;vpos;;v;;afloat;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getWritingTimeout(): float&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get current local writing timeout;;d4,185;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isConnected;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;202;5;206;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isConnected(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check to see if the socket is currently available.&#10;UDP might appear to be connected but might fail when writing.  See http://php.net/fsockopen for details.;;d4,203;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isPersistent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;158;5;161;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isPersistent(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get persistent setting;;d4,159;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="pfsockopen;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;211;5;214;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    pfsockopen()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper to allow mocking;;d4,212;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setChunkSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;140;5;145;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setChunkSize(int $bytes): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set chunk size. Only has effect during connection in the writing cycle.;;d4,141;;b1,0;;m0;;e0;;i0;;o;;k;;lbytes;;p;;x">
</treenode>
<treenode node="setConnectionTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;103;5;109;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setConnectionTimeout(float $seconds): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set connection timeout.  Only has effect before we connect.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.fsockopen.php;;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;lseconds;;p;;x">
</treenode>
<treenode node="setPersistent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;91;5;96;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPersistent(bool $persistent): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set socket connection to be persistent. It only has effect before the connection is initiated.;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;lpersistent;;p;;x">
</treenode>
<treenode node="setSocketTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;312;5;317;;;;vpos;;v;;a void;;r;;d4,313;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setStreamChunkSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;319;5;324;;;;vpos;;v;;a void;;r;;d4,320;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;116;5;122;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setTimeout(float $seconds): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set write timeout. Only has effect before we connect.&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.stream-set-timeout.php;;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;lseconds;;p;;x">
</treenode>
<treenode node="setWritingTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f11;129;5;135;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setWritingTimeout(float $seconds): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set writing timeout. Only has effect during connection in the writing cycle.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    float &lt;b&gt;$seconds&lt;/b&gt;: 0 for no timeout;;d4,130;;b1,0;;m0;;e0;;i0;;o;;k;;lfloat $seconds;;p;;x">
</treenode>
<treenode node="streamGetMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;258;5;261;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    streamGetMetadata()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper to allow mocking;;d4,259;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="streamSetChunkSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;242;5;245;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    streamSetChunkSize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper to allow mocking&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.stream-set-chunk-size.php;;d4,243;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="streamSetTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;229;5;235;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    streamSetTimeout()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper to allow mocking&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/function.stream-set-timeout.php;;d4,230;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="validateTimeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;263;5;269;;;;vpos;;v;;a;;r;;d4,264;;b3,0;;m0;;e0;;i0;;o;;k;;lvalue;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f14;60;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Connect (if necessary) and write to the socket&#10;&lt;b&gt;throws&lt;/b&gt;: \UnexpectedValueException&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,61;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
<treenode node="writeToSocket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;326;5;353;;;;vpos;;v;;a void;;r;;d4,327;;b3,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="writingIsTimedOut;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SocketHandler.php;f12;355;5;378;;;;vpos;;v;;a bool;;r;;d4,356;;b3,0;;m0;;e0;;i0;;o;;k;;lsent;;p;;x">
</treenode>
</treenode>
<treenode node="SqsHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SqsHandler.php;f0;22;1;63;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SqsHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes to any sqs queue.&#10;&lt;b&gt;author&lt;/b&gt;: Martijn van Calker &lt;git&#10;&lt;b&gt;amvc&lt;/b&gt;: .nl&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="HEAD_MESSAGE_SIZE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SqsHandler.php;f19;27;37;27;;;;vpos;;v;;a;;r102400;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="MAX_MESSAGE_SIZE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SqsHandler.php;f19;25;36;25;;;;vpos;;v;;a;;r262144;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SqsHandler.php;f11;34;5;40;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lsqsClient;;pqueueUrl;;plevel;;pbubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SqsHandler.php;f14;47;5;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Writes the record down to the log of the implementing handler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,48;;b2,0;;m0;;e0;;i0;;o;;k;;larray $record;;p;;x">
</treenode>
</treenode>
<treenode node="StorageClient;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f0;44;1;576;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class StorageClient&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Google Cloud Storage allows you to store and retrieve data on Google&apos;s&#10;infrastructure. Find more information at the&#10;[Google Cloud Storage API docs](https://developers.google.com/storage).&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;```;;d0,45;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FULL_CONTROL_SCOPE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f9;51;28;51;;;;vpos;;v;;a;;r&apos;https://www.googleapis.com/auth/devstorage.full_control&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="READ_ONLY_SCOPE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f9;52;25;52;;;;vpos;;v;;a;;r&apos;https://www.googleapis.com/auth/devstorage.read_only&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="READ_WRITE_SCOPE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f9;53;26;53;;;;vpos;;v;;a;;r&apos;https://www.googleapis.com/auth/devstorage.read_write&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="VERSION;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f9;49;17;49;;;;vpos;;v;;a;;r&apos;1.23.1&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;95;5;107;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(array $config = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Storage client.&#10;&lt;b&gt;type&lt;/b&gt;: string $apiEndpoint The hostname with optional port to use in&#10;place of the default service endpoint. Example:&#10;`foobar.com` or `foobar.com:1234`.&#10;&lt;b&gt;type&lt;/b&gt;: string $projectId The project ID from the Google Developer&apos;s&#10;Console.&#10;&lt;b&gt;type&lt;/b&gt;: CacheItemPoolInterface $authCache A cache used storing access&#10;tokens. **Defaults to** a simple in memory implementation.&#10;&lt;b&gt;type&lt;/b&gt;: array $authCacheOptions Cache configuration options.&#10;&lt;b&gt;type&lt;/b&gt;: callable $authHttpHandler A handler used to deliver Psr7&#10;requests specifically for authentication.&#10;&lt;b&gt;type&lt;/b&gt;: FetchAuthTokenInterface $credentialsFetcher A credentials&#10;fetcher instance.&#10;&lt;b&gt;type&lt;/b&gt;: callable $httpHandler A handler used to deliver Psr7 requests.&#10;Only valid for requests sent over REST.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile The contents of the service account credentials&#10;.json file retrieved from the Google Developer&apos;s Console.&#10;Ex: `json_decode(file_get_contents($path), true)`.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath The full path to your service account&#10;credentials .json file retrieved from the Google Developers&#10;Console.&#10;&lt;b&gt;type&lt;/b&gt;: float $requestTimeout Seconds to wait before timing out the&#10;request. **Defaults to** `0` with REST and `60` with gRPC.&#10;&lt;b&gt;type&lt;/b&gt;: int $retries Number of retries for a failed request.&#10;**Defaults to** `3`.&#10;&lt;b&gt;type&lt;/b&gt;: array $scopes Scopes to be used for the request.&#10;&lt;b&gt;type&lt;/b&gt;: string $quotaProject Specifies a user project to bill for&#10;access charges associated with the request.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$config&lt;/b&gt;: [optional] { Configuration options.;;d4,96;;b1,0;;m0;;e0;;i0;;o;;k;;larray $config;;p;;x">
</treenode>
<treenode node="bucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;132;5;143;;;;vpos;;v;;aBucket;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    bucket($name, $userProject = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lazily instantiates a bucket. There are no network requests made at this&#10;point. To see the operations that can be performed on a bucket please&#10;see {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket}.&#10;If `$userProject` is set to true, the current project ID (used to&#10;instantiate the client) will be billed for all requests. If&#10;`$userProject` is a project ID, given as a string, that project&#10;will be billed for all requests. This only has an effect when the bucket&#10;is not owned by the current or given project ID.&#10;Example:&#10;```&#10;$bucket = $storage-&gt;bucket(&apos;my-bucket&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The name of the bucket to request.&#10;    string|bool &lt;b&gt;$userProject&lt;/b&gt;: If true, the current Project ID will be used. If a string, that string will be used as the userProject argument, and that project will be billed for the request. **Defaults to** `false`.;;d4,133;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;pstring|bool $userProject;;p;;x;;x">
</treenode>
<treenode node="buckets;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;191;5;218;;;;vpos;;v;;aItemIterator;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buckets(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fetches all buckets in the project.&#10;Example:&#10;```&#10;$buckets = $storage-&gt;buckets();s&#10;```&#10;```&#10;// Get all buckets beginning with the prefix &apos;album&apos;.&#10;$buckets = $storage-&gt;buckets([&#10;&apos;prefix&apos; =&gt; &apos;album&apos;&#10;]);s&#10;foreach ($buckets as $bucket) {&#10;echo $bucket-&gt;name() . PHP_EOL;s&#10;}&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/list Buckets list API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: int $maxResults Maximum number of results to return per&#10;requested page.&#10;&lt;b&gt;type&lt;/b&gt;: int $resultLimit Limit the number of results returned in total.&#10;**Defaults to** `0` (return all results).&#10;&lt;b&gt;type&lt;/b&gt;: string $pageToken A previously-returned page token used to&#10;resume the loading of results from a specific point.&#10;&lt;b&gt;type&lt;/b&gt;: string $prefix Filter results with this prefix.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either &apos;full&apos; or &apos;noAcl&apos;.&#10;&lt;b&gt;type&lt;/b&gt;: string $fields Selector which will cause the response to only&#10;return the specified fields.&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request.&#10;&lt;b&gt;type&lt;/b&gt;: bool $bucketUserProject If true, each returned instance will&#10;have `$userProject` set to the value of `$options.userProject`.&#10;If false, `$options.userProject` will be used ONLY for the&#10;listBuckets operation. If `$options.userProject` is not set,&#10;this option has no effect. **Defaults to** `true`.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException When a project ID has not been detected.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;Bucket&gt;;;d4,192;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="createBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;330;5;352;;;;vpos;;v;;aBucket;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createBucket($name, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a bucket. Bucket names must be unique as Cloud Storage uses a flat&#10;namespace. For more information please see&#10;[bucket name requirements](https://cloud.google.com/storage/docs/naming#requirements)&#10;Example:&#10;```&#10;$bucket = $storage-&gt;createBucket(&apos;bucket&apos;);s&#10;```&#10;```&#10;// Create a bucket with logging enabled.&#10;$bucket = $storage-&gt;createBucket(&apos;myBeautifulBucket&apos;, [&#10;&apos;logging&apos; =&gt; [&#10;&apos;logBucket&apos; =&gt; &apos;bucketToLogTo&apos;,&#10;&apos;logObjectPrefix&apos; =&gt; &apos;myPrefix&apos;&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/buckets/insert Buckets insert API documentation.&#10;&lt;b&gt;codingStandardsIgnoreStart&lt;/b&gt;&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the bucket.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedDefaultObjectAcl Apply a predefined set of&#10;default object access controls to this bucket.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either `&quot;full&quot;` or `&quot;noAcl&quot;`. **Defaults to** `&quot;noAcl&quot;`,&#10;unless the bucket resource specifies acl or defaultObjectAcl&#10;properties, when it defaults to `&quot;full&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $fields Selector which will cause the response to only&#10;return the specified fields.&#10;&lt;b&gt;type&lt;/b&gt;: array $acl Access controls on the bucket.&#10;&lt;b&gt;type&lt;/b&gt;: array $cors The bucket&apos;s Cross-Origin Resource Sharing (CORS)&#10;configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $defaultObjectAcl Default access controls to apply to new&#10;objects when no ACL is provided.&#10;&lt;b&gt;type&lt;/b&gt;: array|Lifecycle $lifecycle The bucket&apos;s lifecycle configuration.&#10;&lt;b&gt;type&lt;/b&gt;: string $location The location of the bucket. **Defaults to**&#10;`&quot;US&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $logging The bucket&apos;s logging configuration, which&#10;defines the destination bucket and optional name prefix for the&#10;current bucket&apos;s logs.&#10;&lt;b&gt;type&lt;/b&gt;: string $storageClass The bucket&apos;s storage class. This defines&#10;how objects in the bucket are stored and determines the SLA and&#10;the cost of storage. Acceptable values include the following&#10;strings: `&quot;STANDARD&quot;`, `&quot;NEARLINE&quot;`, `&quot;COLDLINE&quot;` and&#10;`&quot;ARCHIVE&quot;`. Legacy values including `&quot;MULTI_REGIONAL&quot;`,&#10;`&quot;REGIONAL&quot;` and `&quot;DURABLE_REDUCED_AVAILABILITY&quot;` are also&#10;available, but should be avoided for new implementations. For&#10;more information, refer to the&#10;[Storage Classes](https://cloud.google.com/storage/docs/storage-classes)&#10;documentation. **Defaults to** `&quot;STANDARD&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: array $versioning The bucket&apos;s versioning configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $website The bucket&apos;s website configuration.&#10;&lt;b&gt;type&lt;/b&gt;: array $billing The bucket&apos;s billing configuration.&#10;&lt;b&gt;type&lt;/b&gt;: bool $billing.requesterPays When `true`, requests to this bucket&#10;and objects within it must provide a project ID to which the&#10;request will be billed.&#10;&lt;b&gt;type&lt;/b&gt;: array $labels The Bucket labels. Labels are represented as an&#10;array of keys and values. To remove an existing label, set its&#10;value to `null`.&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request.&#10;&lt;b&gt;type&lt;/b&gt;: bool $bucketUserProject If true, the returned instance will&#10;have `$userProject` set to the value of `$options.userProject`.&#10;If false, `$options.userProject` will be used ONLY for the&#10;createBucket operation. If `$options.userProject` is not set,&#10;this option has no effect. **Defaults to** `true`.&#10;&lt;b&gt;type&lt;/b&gt;: array $encryption Encryption configuration used by default for&#10;newly inserted objects.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryption.defaultKmsKeyName A Cloud KMS Key used to&#10;encrypt objects uploaded into this bucket. Should be in the&#10;format&#10;`projects/my-project/locations/kr-location/keyRings/my-kr/cryptoKeys/my-key`.&#10;Please note the KMS key ring must use the same location as the&#10;bucket.&#10;&lt;b&gt;type&lt;/b&gt;: bool $defaultEventBasedHold When `true`, newly created objects&#10;in this bucket will be retained indefinitely until an event&#10;occurs, signified by the hold&apos;s release.&#10;&lt;b&gt;type&lt;/b&gt;: array $retentionPolicy Defines the retention policy for a&#10;bucket. In order to lock a retention policy, please see&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\Bucket::lockRetentionPolicy()}.&#10;&lt;b&gt;type&lt;/b&gt;: int $retentionPolicy.retentionPeriod Specifies the retention&#10;period for objects in seconds. During the retention period an&#10;object cannot be overwritten or deleted. Retention period must&#10;be greater than zero and less than 100 years.&#10;&lt;b&gt;type&lt;/b&gt;: array $iamConfiguration The bucket&apos;s IAM configuration.&#10;&lt;b&gt;type&lt;/b&gt;: bool $iamConfiguration.bucketPolicyOnly.enabled this is an alias&#10;for $iamConfiguration.uniformBucketLevelAccess.&#10;&lt;b&gt;type&lt;/b&gt;: bool $iamConfiguration.uniformBucketLevelAccess.enabled If set and&#10;true, access checks only use bucket-level IAM policies or&#10;above. When enabled, requests attempting to view or manipulate&#10;ACLs will fail with error code 400. **NOTE**: Before using&#10;Uniform bucket-level access, please review the&#10;[feature documentation](https://cloud.google.com/storage/docs/uniform-bucket-level-access),&#10;as well as&#10;[Should You Use uniform bucket-level access](https://cloud.google.com/storage/docs/uniform-bucket-level-access#should-you-use)&#10;}&#10;&lt;b&gt;codingStandardsIgnoreEnd&lt;/b&gt;&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException When a project ID has not been detected.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name of the bucket to be created.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,331;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;parray $options;;p;;x;;x">
</treenode>
<treenode node="createHmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;536;5;559;;;;vpos;;v;;aCreatedHmacKey;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createHmacKey($serviceAccountEmail, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new HMAC key for the specified service account.&#10;Please note that the HMAC secret is only available at creation. Make sure&#10;to note the secret after creation.&#10;Example:&#10;```&#10;$response = $storage-&gt;createHmacKey(&apos;account&#10;&lt;b&gt;myProject&lt;/b&gt;: .iam.gserviceaccount.com&apos;);s&#10;$secret = $response-&gt;secret();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request. **NOTE**: This option is&#10;currently ignored by Cloud Storage.&#10;&lt;b&gt;type&lt;/b&gt;: string $projectId The project ID to use, if different from that&#10;with which the client was created.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$serviceAccountEmail&lt;/b&gt;: Email address of the service account.&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options;;d4,537;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $serviceAccountEmail;;parray $options;;p;;x;;x">
</treenode>
<treenode node="getServiceAccount;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;427;5;431;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getServiceAccount(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the service account email associated with this client.&#10;Example:&#10;```&#10;$serviceAccount = $storage-&gt;getServiceAccount();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,428;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="hmacKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;503;5;510;;;;vpos;;v;;aHmacKey;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hmacKey($accessId, $projectId = null, array $metadata = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lazily instantiate an HMAC Key instance using an Access ID.&#10;Example:&#10;```&#10;$hmacKey = $storage-&gt;hmacKey($accessId);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$accessId&lt;/b&gt;: The ID of the HMAC Key.&#10;    string &lt;b&gt;$projectId&lt;/b&gt;: [optional] The project ID to use, if different from that with which the client was created.&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: [optional] HMAC key metadata.;;d4,504;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $accessId;;pstring $projectId;;parray $metadata;;p;;x;;x;;x">
</treenode>
<treenode node="hmacKeys;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;462;5;487;;;;vpos;;v;;aItemIterator;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hmacKeys(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    List Service Account HMAC keys in the project.&#10;Example:&#10;```&#10;$hmacKeys = $storage-&gt;hmacKeys();s&#10;```&#10;```&#10;// Get the HMAC keys associated with a Service Account email&#10;$hmacKeys = $storage-&gt;hmacKeys([&#10;&apos;serviceAccountEmail&apos; =&gt; $serviceAccountEmail&#10;]);s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $serviceAccountEmail If present, only keys for the given&#10;service account are returned.&#10;&lt;b&gt;type&lt;/b&gt;: bool $showDeletedKeys Whether or not to show keys in the&#10;DELETED state.&#10;&lt;b&gt;type&lt;/b&gt;: string $userProject If set, this is the ID of the project which&#10;will be billed for the request.&#10;&lt;b&gt;type&lt;/b&gt;: string $projectId The project ID to use, if different from that&#10;with which the client was created.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;HmacKey&gt;;;d4,463;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="registerStreamWrapper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;360;5;363;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    registerStreamWrapper($protocol = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers this StorageClient as the handler for stream reading/writing.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$protocol&lt;/b&gt;: The name of the protocol to use. **Defaults to** `gs`.;;d4,361;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $protocol;;p;;x">
</treenode>
<treenode node="requireProjectId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f12;567;5;575;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    requireProjectId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Throw an exception if no project ID available.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException;;d4,568;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="signedUrlUploader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;389;5;392;;;;vpos;;v;;aSignedUrlUploader;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signedUrlUploader($uri, $data, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create an uploader to handle a Signed URL.&#10;Example:&#10;```&#10;$uploader = $storage-&gt;signedUrlUploader($uri, fopen(&apos;/path/to/myfile.doc&apos;, &apos;r&apos;));s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Upload\AbstractUploader::__construct()}.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;: The URI to accept an upload request.&#10;    string|resource|StreamInterface &lt;b&gt;$data&lt;/b&gt;: The data to be uploaded&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration Options. Refer to {;;d4,390;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;pstring|resource|StreamInterface $data;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="timestamp;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;406;5;409;;;;vpos;;v;;aTimestamp;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    timestamp(\DateTimeInterface $timestamp, $nanoSeconds = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Timestamp object.&#10;Example:&#10;```&#10;$timestamp = $storage-&gt;timestamp(new \DateTime(&apos;2003-02-05 11:15:02.421827Z&apos;));s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \DateTimeInterface &lt;b&gt;$timestamp&lt;/b&gt;: The timestamp value.&#10;    int &lt;b&gt;$nanoSeconds&lt;/b&gt;: [optional] The number of nanoseconds in the timestamp.;;d4,407;;b1,0;;m0;;e0;;i0;;o;;k;;l\DateTimeInterface $timestamp;;pint $nanoSeconds;;p;;x;;x">
</treenode>
<treenode node="unregisterStreamWrapper;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageClient.php;f11;370;5;373;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unregisterStreamWrapper($protocol = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Unregisters the SteamWrapper&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$protocol&lt;/b&gt;: The name of the protocol to unregister. **Defaults to** `gs`.;;d4,371;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $protocol;;p;;x">
</treenode>
</treenode>
<treenode node="StorageObject;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f0;42;1;1275;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class StorageObject&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Objects are the individual pieces of data that you store in Google Cloud&#10;Storage.&#10;Example:&#10;```&#10;use Google\Cloud\Storage\StorageClient;s&#10;$storage = new StorageClient();s&#10;$bucket = $storage-&gt;bucket(&apos;my-bucket&apos;);s&#10;$object = $bucket-&gt;object(&apos;my-object&apos;);s&#10;```;;d0,43;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_DOWNLOAD_URL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f9;50;30;50;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;89;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        ConnectionInterface $connection,&#10;        $name,&#10;        $bucket,&#10;        $generation = null,&#10;        array $info = [],&#10;        $encryptionKey = null,&#10;        $encryptionKeySHA256 = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    ConnectionInterface &lt;b&gt;$connection&lt;/b&gt;: Represents a connection to Cloud Storage.&#10;    string &lt;b&gt;$name&lt;/b&gt;: The object&apos;s name.&#10;    string &lt;b&gt;$bucket&lt;/b&gt;: The name of the bucket the object is contained in.&#10;    string &lt;b&gt;$generation&lt;/b&gt;: [optional] The generation of the object.&#10;    array &lt;b&gt;$info&lt;/b&gt;: [optional] The object&apos;s metadata.&#10;    string &lt;b&gt;$encryptionKey&lt;/b&gt;: [optional] An AES-256 customer-supplied encryption key.&#10;    string &lt;b&gt;$encryptionKeySHA256&lt;/b&gt;: [optional] The SHA256 hash of the customer-supplied encryption key.;;d6,97;;b1,0;;m0;;e0;;i0;;o;;k;;lConnectionInterface $connection;;pstring $name;;pstring $bucket;;pstring $generation;;parray $info;;pstring $encryptionKey;;pstring $encryptionKeySHA256;;p;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="acl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;125;5;128;;;;vpos;;v;;aAcl;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    acl()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Configure ACL for this object.&#10;Example:&#10;```&#10;$acl = $object-&gt;acl();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/access-control More about Access Control Lists;;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="beginSignedUploadSession;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;1077;5;1094;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    beginSignedUploadSession(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a signed URL upload session.&#10;The returned URL differs from the return value of&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::signedUploadUrl()} in that it&#10;is ready to accept upload data immediately via an HTTP PUT request.&#10;Because an upload session is created by the client, the expiration date&#10;is not configurable. The URL generated by this method is valid for one&#10;week.&#10;Example:&#10;```&#10;$url = $object-&gt;beginSignedUploadSession();s&#10;```&#10;```&#10;// Use Signed URLs v4&#10;$url = $object-&gt;beginSignedUploadSession([&#10;&apos;version&apos; =&gt; &apos;v4&apos;&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/xml-api/resumable-upload#practices Resumable Upload Best Practices&#10;&lt;b&gt;type&lt;/b&gt;: string $contentMd5 The MD5 digest value in base64. If you&#10;provide this, the client must provide this HTTP header with&#10;this same value in its request. If provided, take care to&#10;always provide this value as a base64 encoded string.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType If you provide this value, the client must&#10;provide this HTTP header set to the same value.&#10;&lt;b&gt;type&lt;/b&gt;: bool $forceOpenssl If true, OpenSSL will be used regardless of&#10;whether phpseclib is available. **Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: array $headers If additional headers are provided, the server&#10;will check to make sure that the client provides matching&#10;values. Provide headers as a key/value array, where the key is&#10;the header name, and the value is an array of header values.&#10;Headers with multiple  values may provide values as a simple&#10;array, or a comma-separated string. For a reference of allowed&#10;headers, see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers).&#10;Header values will be trimmed of leading and trailing spaces,&#10;multiple spaces within values will be collapsed to a single&#10;space, and line breaks will be replaced by an empty string.&#10;V2 Signed URLs may not provide `x-goog-encryption-key` or&#10;`x-goog-encryption-key-sha256` headers.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile Keyfile data to use in place of the keyfile with&#10;which the client was constructed. If `$options.keyFilePath` is&#10;set, this option is ignored.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath A path to a valid Keyfile to use in place&#10;of the keyfile with which the client was constructed.&#10;&lt;b&gt;type&lt;/b&gt;: string $origin Value of CORS header&#10;&quot;Access-Control-Allow-Origin&quot;. **Defaults to** `&quot;*&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string|array $scopes One or more authentication scopes to be&#10;used with a key file. This option is ignored unless&#10;`$options.keyFile` or `$options.keyFilePath` is set.&#10;&lt;b&gt;type&lt;/b&gt;: array $queryParams Additional query parameters to be included&#10;as part of the signed URL query string. For allowed values,&#10;see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers#query).&#10;&lt;b&gt;type&lt;/b&gt;: string $version One of &quot;v2&quot; or &quot;v4&quot;. **Defaults to** `&quot;v2&quot;`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options.;;d4,1078;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="copy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;313;5;331;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    copy($destination, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copy the object to a destination bucket.&#10;Please note that if the destination bucket is the same as the source&#10;bucket and a new name is not provided the source object will be replaced&#10;with the copy of itself.&#10;Example:&#10;```&#10;// Provide your destination bucket as a string and retain the source&#10;// object&apos;s name.&#10;$copiedObject = $object-&gt;copy(&apos;otherBucket&apos;);s&#10;```&#10;```&#10;// Provide your destination bucket as a bucket object and choose a new&#10;// name for the copied object.&#10;$otherBucket = $storage-&gt;bucket(&apos;otherBucket&apos;);s&#10;$copiedObject = $object-&gt;copy($otherBucket, [&#10;&apos;name&apos; =&gt; &apos;newFile.txt&apos;&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/copy Objects copy API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the destination object. **Defaults&#10;to** the name of the source object.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. It will be neccesary to provide this when a key&#10;was used during the object&apos;s creation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the destination object&apos;s current generation matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the destination object&apos;s current generation does not&#10;match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the destination object&apos;s current metageneration&#10;matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the destination object&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceGenerationMatch Makes the operation conditional&#10;on whether the source object&apos;s current generation matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceGenerationNotMatch Makes the operation&#10;conditional on whether the source object&apos;s current generation&#10;does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceMetagenerationMatch Makes the operation&#10;conditional on whether the source object&apos;s current&#10;metageneration matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceMetagenerationNotMatch Makes the operation&#10;conditional on whether the source object&apos;s current&#10;metageneration does not match the given value.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Bucket|string &lt;b&gt;$destination&lt;/b&gt;: The destination bucket.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,314;;b1,0;;m0;;e0;;i0;;o;;k;;lBucket|string $destination;;parray $options;;p;;x;;x">
</treenode>
<treenode node="delete;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;182;5;185;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    delete(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Delete the object.&#10;Example:&#10;```&#10;$object-&gt;delete();s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/delete Objects delete API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the object&apos;s current generation matches the given&#10;value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the object&apos;s current generation does not match the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the object&apos;s current metageneration matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the object&apos;s current metageneration does&#10;not match the given value.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,183;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="downloadAsStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;671;5;680;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    downloadAsStream(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Download an object as a stream.&#10;Please note Google Cloud Storage respects the Range header as specified&#10;by [RFC7233](https://tools.ietf.org/html/rfc7233#section-3.1). See below&#10;for an example of this in action.&#10;Example:&#10;```&#10;$stream = $object-&gt;downloadAsStream();s&#10;echo $stream-&gt;getContents();s&#10;```&#10;```&#10;// Set the Range header in order to download a subrange of the object. For more examples of&#10;// setting the Range header, please see [RFC7233](https://tools.ietf.org/html/rfc7233#section-3.1).&#10;$firstFiveBytes = &apos;0-4&apos;;s // Get the first 5 bytes.&#10;$fromFifthByteToLastByte = &apos;4-&apos;;s // Get the bytes starting with the 5th to the last.&#10;$lastFiveBytes = &apos;-5&apos;;s // Get the last 5 bytes.&#10;$stream = $object-&gt;downloadAsStream([&#10;&apos;restOptions&apos; =&gt; [&#10;&apos;headers&apos; =&gt; [&#10;&apos;Range&apos; =&gt; &quot;bytes=$firstFiveBytes&quot;&#10;]&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/get Objects get API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/parameters#range Learn more about the Range header.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey An AES-256 customer-supplied encryption&#10;key. It will be neccesary to provide this when a key was used&#10;during the object&apos;s creation. If provided one must also include&#10;an `encryptionKeySHA256`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 The SHA256 hash of the&#10;customer-supplied encryption key. It will be neccesary to&#10;provide this when a key was used during the object&apos;s creation.&#10;If provided one must also include an `encryptionKey`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration Options.;;d4,672;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="downloadAsStreamAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;739;5;748;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    downloadAsStreamAsync(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Asynchronously download an object as a stream.&#10;For an example of setting the range header to download a subrange of the&#10;object please see {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::downloadAsStream()}.&#10;Example:&#10;```&#10;use Psr\Http\Message\StreamInterface;s&#10;$promise = $object-&gt;downloadAsStreamAsync()&#10;-&gt;then(function (StreamInterface $data) {&#10;echo $data-&gt;getContents();s&#10;});s&#10;$promise-&gt;wait();s&#10;```&#10;```&#10;// Download all objects in a bucket asynchronously.&#10;use GuzzleHttp\Promise;s&#10;use Psr\Http\Message\StreamInterface;s&#10;$promises = [];s&#10;foreach ($bucket-&gt;objects() as $object) {&#10;$promises[] = $object-&gt;downloadAsStreamAsync()&#10;-&gt;then(function (StreamInterface $data) {&#10;echo $data-&gt;getContents();s&#10;});s&#10;}&#10;Promise\unwrap($promises);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/get Objects get API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/parameters#range Learn more about the Range header.&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/guzzle/promises Learn more about Guzzle Promises&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey An AES-256 customer-supplied encryption&#10;key. It will be neccesary to provide this when a key was used&#10;during the object&apos;s creation. If provided one must also include&#10;an `encryptionKeySHA256`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 The SHA256 hash of the&#10;customer-supplied encryption key. It will be neccesary to&#10;provide this when a key was used during the object&apos;s creation.&#10;If provided one must also include an `encryptionKey`.&#10;}&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration Options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   &lt;StreamInterface&gt;;;d4,740;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="downloadAsString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;577;5;580;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    downloadAsString(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Download an object as a string.&#10;For an example of setting the range header to download a subrange of the&#10;object please see {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::downloadAsStream()}.&#10;Example:&#10;```&#10;$string = $object-&gt;downloadAsString();s&#10;echo $string;s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/get Objects get API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/parameters#range Learn more about the Range header.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey An AES-256 customer-supplied encryption&#10;key. It will be neccesary to provide this when a key was used&#10;during the object&apos;s creation. If provided one must also include&#10;an `encryptionKeySHA256`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 The SHA256 hash of the&#10;customer-supplied encryption key. It will be neccesary to&#10;provide this when a key was used during the object&apos;s creation.&#10;If provided one must also include an `encryptionKey`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration Options.;;d4,578;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="downloadToFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;611;5;623;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    downloadToFile($path, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Download an object to a specified location.&#10;For an example of setting the range header to download a subrange of the&#10;object please see {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::downloadAsStream()}.&#10;Example:&#10;```&#10;$stream = $object-&gt;downloadToFile(__DIR__ . &apos;/my-file.txt&apos;);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/get Objects get API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/parameters#range Learn more about the Range header.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey An AES-256 customer-supplied encryption&#10;key. It will be neccesary to provide this when a key was used&#10;during the object&apos;s creation. If provided one must also include&#10;an `encryptionKeySHA256`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 The SHA256 hash of the&#10;customer-supplied encryption key. It will be neccesary to&#10;provide this when a key was used during the object&apos;s creation.&#10;If provided one must also include an `encryptionKey`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: Path to download the file to.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration Options.;;d4,612;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;parray $options;;p;;x;;x">
</treenode>
<treenode node="exists;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;143;5;152;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    exists(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check whether or not the object exists.&#10;Example:&#10;```&#10;if ($object-&gt;exists()) {&#10;echo &apos;Object exists!&apos;;s&#10;}&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.;;d4,144;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="formatDestinationRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f12;1251;5;1274;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatDestinationRequest($destination, array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats a destination based request, such as copy or rewrite.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|Bucket &lt;b&gt;$destination&lt;/b&gt;: The destination bucket.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Options to configure.;;d4,1252;;b3,0;;m0;;e0;;i0;;o;;k;;lstring|Bucket $destination;;parray $options;;p;;x;;x">
</treenode>
<treenode node="gcsUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;1235;5;1242;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    gcsUri()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Formats the object as a string in the following format:&#10;`gs://{bucket-name}/{object-name}`.&#10;Example:&#10;```&#10;echo $object-&gt;gcsUri();s&#10;```;;d4,1236;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="identity;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;1219;5;1222;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    identity()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the object&apos;s identity.&#10;Example:&#10;```&#10;echo $object-&gt;identity()[&apos;object&apos;];s&#10;```;;d4,1220;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="info;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;1138;5;1141;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    info(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the object&apos;s details. If no object data is cached a network&#10;request will be made to retrieve it.&#10;Example:&#10;```&#10;$info = $object-&gt;info();s&#10;echo $info[&apos;size&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/get Objects get API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey An AES-256 customer-supplied encryption&#10;key. It will be neccesary to provide this when a key was used&#10;during the object&apos;s creation in order to retrieve the MD5 hash&#10;and CRC32C checksum. If provided one must also include an&#10;`encryptionKeySHA256`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 The SHA256 hash of the&#10;customer-supplied encryption key. It will be neccesary to&#10;provide this when a key was used during the object&apos;s creation&#10;in order to retrieve the MD5 hash and CRC32C checksum. If&#10;provided one must also include an `encryptionKey`.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the object&apos;s current generation matches the given&#10;value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the object&apos;s current generation does not match the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the object&apos;s current metageneration matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the object&apos;s current metageneration does&#10;not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either &apos;full&apos; or &apos;noAcl&apos;.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,1139;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="name;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;1204;5;1207;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    name()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Retrieves the object&apos;s name.&#10;Example:&#10;```&#10;echo $object-&gt;name();s&#10;```;;d4,1205;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="reload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;1183;5;1192;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reload(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers a network request to reload the object&apos;s details.&#10;Example:&#10;```&#10;$object-&gt;reload();s&#10;$info = $object-&gt;info();s&#10;echo $info[&apos;location&apos;];s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/get Objects get API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. It will be neccesary to provide this when a key&#10;was used during the object&apos;s creation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the object&apos;s current generation matches the given&#10;value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the object&apos;s current generation does not match the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the object&apos;s current metageneration matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the object&apos;s current metageneration does&#10;not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either &apos;full&apos; or &apos;noAcl&apos;.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,1184;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="rename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;526;5;546;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rename($name, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Renames the object.&#10;Please note that there is no atomic rename provided by the Storage API.&#10;This method is for convenience and is a set of sequential calls to copy&#10;and delete. Upon success the source object&apos;s metadata will be cleared,&#10;please use the returned object instead.&#10;Example:&#10;```&#10;$object2 = $object-&gt;rename(&apos;object2.txt&apos;);s&#10;echo $object2-&gt;name();s&#10;```&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. It will be neccesary to provide this when a key&#10;was used during the object&apos;s creation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the destination object&apos;s current generation matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the destination object&apos;s current generation does not&#10;match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the destination object&apos;s current metageneration&#10;matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the destination object&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceGenerationMatch Makes the operation conditional&#10;on whether the source object&apos;s current generation matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceGenerationNotMatch Makes the operation&#10;conditional on whether the source object&apos;s current generation&#10;does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceMetagenerationMatch Makes the operation&#10;conditional on whether the source object&apos;s current&#10;metageneration matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceMetagenerationNotMatch Makes the operation&#10;conditional on whether the source object&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $destinationBucket Will move to this bucket if set. If&#10;not set, will default to the same bucket.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The new name.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The renamed object.;;d4,527;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;parray $options;;p;;x;;x">
</treenode>
<treenode node="rewrite;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;441;5;465;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rewrite($destination, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Rewrite the object to a destination bucket.&#10;This method copies data using multiple requests so large objects can be&#10;copied with a normal length timeout per request rather than one very long&#10;timeout for a single request.&#10;Please note that if the destination bucket is the same as the source&#10;bucket and a new name is not provided the source object will be replaced&#10;with the copy of itself.&#10;Example:&#10;```&#10;// Provide your destination bucket as a string and retain the source&#10;// object&apos;s name.&#10;$rewrittenObject = $object-&gt;rewrite(&apos;otherBucket&apos;);s&#10;```&#10;```&#10;// Provide your destination bucket as a bucket object and choose a new&#10;// name for the copied object.&#10;$otherBucket = $storage-&gt;bucket(&apos;otherBucket&apos;);s&#10;$rewrittenObject = $object-&gt;rewrite($otherBucket, [&#10;&apos;name&apos; =&gt; &apos;newFile.txt&apos;&#10;]);s&#10;```&#10;```&#10;// Rotate customer-supplied encryption keys.&#10;$key = file_get_contents(__DIR__ . &apos;/key.txt&apos;);s&#10;$destinationKey = base64_encode(openssl_random_pseudo_bytes(32));s // Make sure to remember your key.&#10;$rewrittenObject = $object-&gt;rewrite(&apos;otherBucket&apos;, [&#10;&apos;encryptionKey&apos; =&gt; $key,&#10;&apos;destinationEncryptionKey&apos; =&gt; $destinationKey&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/rewrite Objects rewrite API documentation.&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/encryption#customer-supplied Customer-supplied encryption keys.&#10;&lt;b&gt;type&lt;/b&gt;: string $name The name of the destination object. **Defaults&#10;to** the name of the source object.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $maxBytesRewrittenPerCall The maximum number of bytes&#10;that will be rewritten per rewrite request. Most callers&#10;shouldn&apos;t need to specify this parameter - it is primarily in&#10;place to support testing. If specified the value must be an&#10;integral multiple of 1 MiB (1048576). Also, this only applies&#10;to requests where the source and destination span locations&#10;and/or storage classes.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKey A base64 encoded AES-256 customer-supplied&#10;encryption key. It will be neccesary to provide this when a key&#10;was used during the object&apos;s creation.&#10;&lt;b&gt;type&lt;/b&gt;: string $encryptionKeySHA256 Base64 encoded SHA256 hash of the&#10;customer-supplied encryption key. This value will be calculated&#10;from the `encryptionKey` on your behalf if not provided, but&#10;for best performance it is recommended to pass in a cached&#10;version of the already calculated SHA.&#10;&lt;b&gt;type&lt;/b&gt;: string $destinationEncryptionKey A base64 encoded AES-256&#10;customer-supplied encryption key that will be used to encrypt&#10;the rewritten object.&#10;&lt;b&gt;type&lt;/b&gt;: string $destinationEncryptionKeySHA256 Base64 encoded SHA256&#10;hash of the customer-supplied destination encryption key. This&#10;value will be calculated from the `destinationEncryptionKey` on&#10;your behalf if not provided, but for best performance it is&#10;recommended to pass in a cached version of the already&#10;calculated SHA.&#10;&lt;b&gt;type&lt;/b&gt;: string $destinationKmsKeyName Name of the Cloud KMS key that&#10;will be used to encrypt the object. Should be in the format&#10;`projects/my-project/locations/kr-location/keyRings/my-kr/cryptoKeys/my-key`.&#10;Please note the KMS key ring must use the same location as the&#10;destination bucket.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the destination object&apos;s current generation matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the destination object&apos;s current generation does not&#10;match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the destination object&apos;s current metageneration&#10;matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the destination object&apos;s current&#10;metageneration does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceGenerationMatch Makes the operation conditional&#10;on whether the source object&apos;s current generation matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceGenerationNotMatch Makes the operation&#10;conditional on whether the source object&apos;s current generation&#10;does not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceMetagenerationMatch Makes the operation&#10;conditional on whether the source object&apos;s current&#10;metageneration matches the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifSourceMetagenerationNotMatch Makes the operation&#10;conditional on whether the source object&apos;s current&#10;metageneration does not match the given value.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Bucket|string &lt;b&gt;$destination&lt;/b&gt;: The destination bucket.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,442;;b1,0;;m0;;e0;;i0;;o;;k;;lBucket|string $destination;;parray $options;;p;;x;;x">
</treenode>
<treenode node="signedUploadUrl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;989;5;1010;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signedUploadUrl($expires, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Signed Upload URL for this object.&#10;This method differs from {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::signedUrl()}&#10;in that it allows you to initiate a new resumable upload session. This&#10;can be used to allow non-authenticated users to insert an object into a&#10;bucket.&#10;In order to upload data, a session URI must be&#10;obtained by sending an HTTP POST request to the URL returned from this&#10;method. See the [Cloud Storage Documentation](https://goo.gl/b1ZiZm) for&#10;more information.&#10;If you prefer to skip this initial step, you may find&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageObject::beginSignedUploadSession()} to&#10;fit your needs. Note that `beginSignedUploadSession()` cannot be used&#10;with Google Cloud PHP&apos;s Signed URL Uploader, and does not support a&#10;configurable expiration date.&#10;Example:&#10;```&#10;$url = $object-&gt;signedUploadUrl(new \DateTime(&apos;tomorrow&apos;));s&#10;```&#10;```&#10;// Use Signed URLs v4&#10;$url = $object-&gt;signedUploadUrl(new \DateTime(&apos;tomorrow&apos;), [&#10;&apos;version&apos; =&gt; &apos;v4&apos;&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Timestamp},&#10;[http://php.net/datetimeimmutable](`\DateTimeImmutable`), or a&#10;UNIX timestamp as an integer.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentMd5 The MD5 digest value in base64. If you&#10;provide this, the client must provide this HTTP header with&#10;this same value in its request. If provided, take care to&#10;always provide this value as a base64 encoded string.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType If you provide this value, the client must&#10;provide this HTTP header set to the same value.&#10;&lt;b&gt;type&lt;/b&gt;: bool $forceOpenssl If true, OpenSSL will be used regardless of&#10;whether phpseclib is available. **Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: array $headers If additional headers are provided, the server&#10;will check to make sure that the client provides matching&#10;values. Provide headers as a key/value array, where the key is&#10;the header name, and the value is an array of header values.&#10;Headers with multiple  values may provide values as a simple&#10;array, or a comma-separated string. For a reference of allowed&#10;headers, see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers).&#10;Header values will be trimmed of leading and trailing spaces,&#10;multiple spaces within values will be collapsed to a single&#10;space, and line breaks will be replaced by an empty string.&#10;V2 Signed URLs may not provide `x-goog-encryption-key` or&#10;`x-goog-encryption-key-sha256` headers.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile Keyfile data to use in place of the keyfile with&#10;which the client was constructed. If `$options.keyFilePath` is&#10;set, this option is ignored.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath A path to a valid Keyfile to use in place&#10;of the keyfile with which the client was constructed.&#10;&lt;b&gt;type&lt;/b&gt;: string $responseDisposition The&#10;[`response-content-disposition`](http://www.iana.org/assignments/cont-disp/cont-disp.xhtml)&#10;parameter of the signed url.&#10;&lt;b&gt;type&lt;/b&gt;: string $responseType The `response-content-type` parameter of the&#10;signed url. When the server contentType is `null`, this option&#10;may be used to control the content type of the response.&#10;&lt;b&gt;type&lt;/b&gt;: string $saveAsName The filename to prompt the user to save the&#10;file as when the signed url is accessed. This is ignored if&#10;`$options.responseDisposition` is set.&#10;&lt;b&gt;type&lt;/b&gt;: string $scheme Either `http` or `https`. Only used if a custom&#10;hostname is provided via `$options.bucketBoundHostname`. In all&#10;other cases, `https` is used. When a custom bucketBoundHostname&#10;is provided, **defaults to** `http`.&#10;&lt;b&gt;type&lt;/b&gt;: string|array $scopes One or more authentication scopes to be&#10;used with a key file. This option is ignored unless&#10;`$options.keyFile` or `$options.keyFilePath` is set.&#10;&lt;b&gt;type&lt;/b&gt;: array $queryParams Additional query parameters to be included&#10;as part of the signed URL query string. For allowed values,&#10;see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers#query).&#10;&lt;b&gt;type&lt;/b&gt;: string $version One of &quot;v2&quot; or &quot;v4&quot;. **Defaults to** `&quot;v2&quot;`.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: Specifies when the URL will expire. May provide an instance of {&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options.;;d4,990;;b1,0;;m0;;e0;;i0;;o;;k;;lTimestamp|\DateTimeInterface|int $expires;;parray $options;;p;;x;;x">
</treenode>
<treenode node="signedUrl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;882;5;901;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    signedUrl($expires, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Signed URL for this object.&#10;Signed URLs can be complex, and it is strongly recommended you read and&#10;understand the [documentation](https://cloud.google.com/storage/docs/access-control/signed-urls).&#10;In cases where a keyfile is available, signing is accomplished in the&#10;client using your Service Account private key. In Google Compute Engine,&#10;signing is accomplished using&#10;[IAM signBlob](https://cloud.google.com/iam/credentials/reference/rest/v1/projects.serviceAccounts/signBlob).&#10;Signing using IAM requires that your service account be granted the&#10;`iam.serviceAccounts.signBlob` permission, part of the &quot;Service Account&#10;Token Creator&quot; IAM role.&#10;Additionally, signing using IAM requires different scopes. When creating&#10;an instance of {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageClient}, provide the&#10;`https://www.googleapis.com/auth/cloud-platform` scopein `$options.scopes`.&#10;This scope may be used entirely in place of the scopes provided in&#10;{&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Storage\StorageClient}.&#10;App Engine and Compute Engine will attempt to sign URLs using IAM.&#10;Example:&#10;```&#10;$url = $object-&gt;signedUrl(new \DateTime(&apos;tomorrow&apos;));s&#10;```&#10;```&#10;// Create a signed URL allowing updates to the object.&#10;$url = $object-&gt;signedUrl(new \DateTime(&apos;tomorrow&apos;), [&#10;&apos;method&apos; =&gt; &apos;PUT&apos;&#10;]);s&#10;```&#10;```&#10;// Use Signed URLs v4&#10;$url = $object-&gt;signedUrl(new \DateTime(&apos;tomorrow&apos;), [&#10;&apos;version&apos; =&gt; &apos;v4&apos;&#10;]);s&#10;```&#10;```&#10;// Using Bucket-Bound hostnames&#10;// By default, a custom bucket-bound hostname will use `http` as the schema rather than `https`.&#10;// In order to get an https URI, we need to specify the proper scheme.&#10;$url = $object-&gt;signedUrl(new \DateTime(&apos;tomorrow&apos;), [&#10;&apos;version&apos; =&gt; &apos;v4&apos;,&#10;&apos;bucketBoundHostname&apos; =&gt; &apos;cdn.example.com&apos;,&#10;&apos;scheme&apos; =&gt; &apos;https&apos;&#10;]);s&#10;```&#10;```&#10;// Using virtual hosted style URIs&#10;// When true, returns a URL with the hostname `&lt;bucket&gt;.storage.googleapis.com`.&#10;$url = $object-&gt;signedUrl(new \DateTime(&apos;tomorrow&apos;), [&#10;&apos;virtualHostedStyle&apos; =&gt; true&#10;]);s&#10;````&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/access-control/signed-urls Signed URLs&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Timestamp},&#10;[http://php.net/datetimeimmutable](`\DateTimeImmutable`), or a&#10;UNIX timestamp as an integer.&#10;&lt;b&gt;type&lt;/b&gt;: string $bucketBoundHostname The hostname for the bucket, for&#10;instance `cdn.example.com`. May be used for Google Cloud Load&#10;Balancers or for custom bucket CNAMEs. **Defaults to**&#10;`storage.googleapis.com`.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentMd5 The MD5 digest value in base64. If you&#10;provide this, the client must provide this HTTP header with&#10;this same value in its request. If provided, take care to&#10;always provide this value as a base64 encoded string.&#10;&lt;b&gt;type&lt;/b&gt;: string $contentType If you provide this value, the client must&#10;provide this HTTP header set to the same value.&#10;&lt;b&gt;type&lt;/b&gt;: bool $forceOpenssl If true, OpenSSL will be used regardless of&#10;whether phpseclib is available. **Defaults to** `false`.&#10;&lt;b&gt;type&lt;/b&gt;: array $headers If additional headers are provided, the server&#10;will check to make sure that the client provides matching&#10;values. Provide headers as a key/value array, where the key is&#10;the header name, and the value is an array of header values.&#10;Headers with multiple  values may provide values as a simple&#10;array, or a comma-separated string. For a reference of allowed&#10;headers, see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers).&#10;Header values will be trimmed of leading and trailing spaces,&#10;multiple spaces within values will be collapsed to a single&#10;space, and line breaks will be replaced by an empty string.&#10;V2 Signed URLs may not provide `x-goog-encryption-key` or&#10;`x-goog-encryption-key-sha256` headers.&#10;&lt;b&gt;type&lt;/b&gt;: array $keyFile Keyfile data to use in place of the keyfile with&#10;which the client was constructed. If `$options.keyFilePath` is&#10;set, this option is ignored.&#10;&lt;b&gt;type&lt;/b&gt;: string $keyFilePath A path to a valid Keyfile to use in place&#10;of the keyfile with which the client was constructed.&#10;&lt;b&gt;type&lt;/b&gt;: string $method One of `GET`, `PUT` or `DELETE`.&#10;**Defaults to** `GET`.&#10;&lt;b&gt;type&lt;/b&gt;: string $responseDisposition The&#10;[`response-content-disposition`](http://www.iana.org/assignments/cont-disp/cont-disp.xhtml)&#10;parameter of the signed url.&#10;&lt;b&gt;type&lt;/b&gt;: string $responseType The `response-content-type` parameter of the&#10;signed url. When the server contentType is `null`, this option&#10;may be used to control the content type of the response.&#10;&lt;b&gt;type&lt;/b&gt;: string $saveAsName The filename to prompt the user to save the&#10;file as when the signed url is accessed. This is ignored if&#10;`$options.responseDisposition` is set.&#10;&lt;b&gt;type&lt;/b&gt;: string $scheme Either `http` or `https`. Only used if a custom&#10;hostname is provided via `$options.bucketBoundHostname`. If a&#10;custom bucketBoundHostname is provided, **defaults to** `http`.&#10;In all other cases, **defaults to** `https`.&#10;&lt;b&gt;type&lt;/b&gt;: string|array $scopes One or more authentication scopes to be&#10;used with a key file. This option is ignored unless&#10;`$options.keyFile` or `$options.keyFilePath` is set.&#10;&lt;b&gt;type&lt;/b&gt;: array $queryParams Additional query parameters to be included&#10;as part of the signed URL query string. For allowed values,&#10;see [Reference Headers](https://cloud.google.com/storage/docs/xml-api/reference-headers#query).&#10;&lt;b&gt;type&lt;/b&gt;: string $version One of &quot;v2&quot; or &quot;v4&quot;. **Defaults to** `&quot;v2&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: bool $virtualHostedStyle If `true`, URL will be of form&#10;`mybucket.storage.googleapis.com`. If `false`,&#10;`storage.googleapis.com/mybucket`. **Defaults to** `false`.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given expiration is invalid or in the past.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given `$options.method` is not valid.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given `$options.keyFilePath` is not valid.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the given custom headers are invalid.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the keyfile does not contain the required information.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the credentials provided cannot be used for signing strings.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Timestamp|\DateTimeInterface|int &lt;b&gt;$expires&lt;/b&gt;: Specifies when the URL will expire. May provide an instance of {&#10;    array &lt;b&gt;$options&lt;/b&gt;: { Configuration Options.;;d4,883;;b1,0;;m0;;e0;;i0;;o;;k;;lTimestamp|\DateTimeInterface|int $expires;;parray $options;;p;;x;;x">
</treenode>
<treenode node="update;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StorageObject.php;f11;231;5;241;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    update(array $metadata, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Update the object. Upon receiving a result the local object&apos;s data will&#10;be updated.&#10;Example:&#10;```&#10;// Add custom metadata to an existing object.&#10;$object-&gt;update([&#10;&apos;metadata&apos; =&gt; [&#10;&apos;albumType&apos; =&gt; &apos;family&apos;&#10;]&#10;]);s&#10;```&#10;&lt;b&gt;see&lt;/b&gt;: https://cloud.google.com/storage/docs/json_api/v1/objects/patch Objects patch API documentation.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationMatch Makes the operation conditional on&#10;whether the object&apos;s current generation matches the given&#10;value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifGenerationNotMatch Makes the operation conditional on&#10;whether the object&apos;s current generation does not match the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationMatch Makes the operation conditional&#10;on whether the object&apos;s current metageneration matches the&#10;given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $ifMetagenerationNotMatch Makes the operation&#10;conditional on whether the object&apos;s current metageneration does&#10;not match the given value.&#10;&lt;b&gt;type&lt;/b&gt;: string $predefinedAcl Predefined ACL to apply to the object.&#10;Acceptable values include, `&quot;authenticatedRead&quot;`,&#10;`&quot;bucketOwnerFullControl&quot;`, `&quot;bucketOwnerRead&quot;`, `&quot;private&quot;`,&#10;`&quot;projectPrivate&quot;`, and `&quot;publicRead&quot;`.&#10;&lt;b&gt;type&lt;/b&gt;: string $projection Determines which properties to return. May&#10;be either &apos;full&apos; or &apos;noAcl&apos;.&#10;&lt;b&gt;type&lt;/b&gt;: string $fields Selector which will cause the response to only&#10;return the specified fields.&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$metadata&lt;/b&gt;: The available options for metadata are outlined at the [JSON API docs](https://cloud.google.com/storage/docs/json_api/v1/objects#resource)&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,232;;b1,0;;m0;;e0;;i0;;o;;k;;larray $metadata;;parray $options;;p;;x;;x">
</treenode>
</treenode>
<treenode node="Stream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f0;11;1;269;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Stream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHP stream implementation.&#10;&lt;b&gt;var&lt;/b&gt;: $stream;;d0,12;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="READABLE_MODES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f9;21;24;21;;;;vposstring;;v;;a;;r&apos;/r|a\+|ab\+|w\+|wb\+|x\+|xb\+|c\+|cb\+/&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="WRITABLE_MODES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f9;22;24;22;;;;vpos;;v;;a;;r&apos;/a|w|r\+|rb\+|rw|x|c/&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;46;5;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($stream, $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This constructor accepts an associative array of options.&#10;- size: (int) If a read stream would otherwise have an indeterminate&#10;size, but the size is known due to foreknowledge, then you can&#10;provide that size, in bytes.&#10;- metadata: (array) Any additional metadata to return when the metadata&#10;of the stream is accessed.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if the stream is not a stream resource&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource &lt;b&gt;$stream&lt;/b&gt;: Stream resource to wrap.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Associative array of options.;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;lresource $stream;;parray $options;;p;;x;;x">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;71;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __destruct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Closes the stream when the destructed;;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;76;5;86;;;;vpos;;v;;a;;r;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;103;5;111;;;;vpos;;v;;a;;r;;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;113;5;125;;;;vpos;;v;;a;;r;;d4,114;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;166;5;173;;;;vpos;;v;;a;;r;;d4,167;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;88;5;101;;;;vpos;;v;;a;;r;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;255;5;268;;;;vpos;;v;;a;;r;;d4,256;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;127;5;149;;;;vpos;;v;;a;;r;;d4,128;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;151;5;154;;;;vpos;;v;;a;;r;;d4,152;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;161;5;164;;;;vpos;;v;;a;;r;;d4,162;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;156;5;159;;;;vpos;;v;;a;;r;;d4,157;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;211;5;233;;;;vpos;;v;;a;;r;;d4,212;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;190;5;193;;;;vpos;;v;;a;;r;;d4,191;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;195;5;209;;;;vpos;;v;;a;;r;;d4,196;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;175;5;188;;;;vpos;;v;;a;;r;;d4,176;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Stream.php;f11;235;5;253;;;;vpos;;v;;a;;r;;d4,236;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="StreamDecoratorTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f0;10;1;150;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait StreamDecoratorTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stream decorator trait&#10;StreamInterface stream;;d0,11;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__call;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;66;5;72;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __call($method, array $args)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allow decorators to implement custom methods&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$method&lt;/b&gt;: Missing method name&#10;    array &lt;b&gt;$args&lt;/b&gt;: Method arguments;;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $method;;parray $args;;p;;x;;x">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;15;5;18;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(StreamInterface $stream)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to decorate;;d4,16;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;p;;x">
</treenode>
<treenode node="__get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;28;5;36;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __get($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Magic method used to create a new stream if streams are not added in&#10;the constructor of a decorator (e.g., LazyOpenStream).&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name of the property (allows &quot;stream&quot; only).;;d4,29;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $name;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;38;5;51;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;74;5;77;;;;vpos;;v;;a;;r;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f14;146;5;149;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createStream()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Implement in subclasses to dynamically create streams when requested.&#10;&lt;b&gt;throws&lt;/b&gt;: \BadMethodCallException;;d4,147;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="detach;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;84;5;87;;;;vpos;;v;;a;;r;;d4,85;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;94;5;97;;;;vpos;;v;;a;;r;;d4,95;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getContents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;53;5;56;;;;vpos;;v;;a;;r;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;79;5;82;;;;vpos;;v;;a;;r;;d4,80;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;89;5;92;;;;vpos;;v;;a;;r;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isReadable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;104;5;107;;;;vpos;;v;;a;;r;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isSeekable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;114;5;117;;;;vpos;;v;;a;;r;;d4,115;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isWritable;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;109;5;112;;;;vpos;;v;;a;;r;;d4,110;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;129;5;132;;;;vpos;;v;;a;;r;;d4,130;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="rewind;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;119;5;122;;;;vpos;;v;;a;;r;;d4,120;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;124;5;127;;;;vpos;;v;;a;;r;;d4,125;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;99;5;102;;;;vpos;;v;;a;;r;;d4,100;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamDecoratorTrait.php;f11;134;5;137;;;;vpos;;v;;a;;r;;d4,135;;b1,0;;m0;;e0;;i0;;o;;k;;lstring;;p;;x">
</treenode>
</treenode>
<treenode node="StreamHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f0;23;1;176;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f0;22;1;526;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class StreamHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Stores to any stream resource&#10;Can be used to store into php://stderr, remote and local files, etc.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f11;43;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($stream, $level = Logger::DEBUG, bool $bubble = true, ?int $filePermission = null, bool $useLocking = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If stream is not a resource or string&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource|string &lt;b&gt;$stream&lt;/b&gt;: If a missing path can&apos;t be created, an UnexpectedValueException will be thrown on first write&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    int|null &lt;b&gt;$filePermission&lt;/b&gt;: Optional file permissions (default (0644) are only for owner read/write)&#10;    bool &lt;b&gt;$useLocking&lt;/b&gt;: Try to lock log file before doing any writes;;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;lresource|string $stream;;pstring|int $level;;pbool $bubble;;pint|null $filePermission;;pbool $useLocking;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f11;35;5;79;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __invoke(RequestInterface $request, array $options): PromiseInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends an HTTP request.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request to send.&#10;    array &lt;b&gt;$options&lt;/b&gt;: Request transfer options.;;d4,36;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $options;;p;;x;;x">
</treenode>
<treenode node="addNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f19;505;5;516;;;;vpos;;v;;a void;;r;;d4,506;;b3,5;;m0;;e0;;i0;;o;;k;;lparams;;pnotify;;p;;x;;x">
</treenode>
<treenode node="add_cert;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;439;5;451;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add_cert(RequestInterface $request, array &amp;$options, $value, array &amp;$params): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: as passed via Request transfer options.;;d4,440;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pvalue;;pparams;;p;;x;;x;;x;;x">
</treenode>
<treenode node="add_debug;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;471;5;503;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add_debug(RequestInterface $request, array &amp;$options, $value, array &amp;$params): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: as passed via Request transfer options.;;d4,472;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pvalue;;pparams;;p;;x;;x;;x;;x">
</treenode>
<treenode node="add_progress;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;456;5;466;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add_progress(RequestInterface $request, array &amp;$options, $value, array &amp;$params): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: as passed via Request transfer options.;;d4,457;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pvalue;;pparams;;p;;x;;x;;x;;x">
</treenode>
<treenode node="add_proxy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;386;5;398;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add_proxy(RequestInterface $request, array &amp;$options, $value, array &amp;$params): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: as passed via Request transfer options.;;d4,387;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pvalue;;pparams;;p;;x;;x;;x;;x">
</treenode>
<treenode node="add_timeout;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;403;5;408;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add_timeout(RequestInterface $request, array &amp;$options, $value, array &amp;$params): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: as passed via Request transfer options.;;d4,404;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pvalue;;pparams;;p;;x;;x;;x;;x">
</treenode>
<treenode node="add_verify;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;413;5;434;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add_verify(RequestInterface $request, array &amp;$options, $value, array &amp;$params): void&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: as passed via Request transfer options.;;d4,414;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pvalue;;pparams;;p;;x;;x;;x;;x">
</treenode>
<treenode node="callArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f19;518;5;525;;;;vpos;;v;;a callable;;r;;d4,519;;b3,5;;m0;;e0;;i0;;o;;k;;lfunctions;;p;;x">
</treenode>
<treenode node="checkDecode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;151;5;180;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    checkDecode(array $options, array $headers, $stream): array&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource &lt;b&gt;$stream&lt;/b&gt;;;d4,152;;b3,0;;m0;;e0;;i0;;o;;k;;loptions;;pheaders;;pstream;;p;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f11;61;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,62;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createDir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f12;157;5;175;;;;vpos;;v;;a void;;r;;d4,158;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;217;5;243;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createResource(callable $callback)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a resource and check to ensure it was created successfully&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$callback&lt;/b&gt;: Callable that returns stream resource;;d4,218;;b3,0;;m0;;e0;;i0;;o;;k;;lcallable $callback;;p;;x">
</treenode>
<treenode node="createResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;97;5;135;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createResponse(RequestInterface $request, array $options, $stream, ?float $startTime): PromiseInterface&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource &lt;b&gt;$stream&lt;/b&gt;;;d4,98;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;pstream;;pstartTime;;p;;x;;x;;x;;x">
</treenode>
<treenode node="createSink;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;137;5;146;;;;vpos;;v;;a StreamInterface;;r;;d4,138;;b3,0;;m0;;e0;;i0;;o;;k;;lstream;;poptions;;p;;x;;x">
</treenode>
<treenode node="createStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;248;5;323;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createStream(RequestInterface $request, array $options)&#10;;;d4,249;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="customErrorHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f12;136;5;141;;;;vpos;;v;;a bool;;r;;d4,137;;b3,0;;m0;;e0;;i0;;o;;k;;lcode;;pmsg;;p;;x;;x">
</treenode>
<treenode node="drain;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;190;5;206;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    drain(StreamInterface $source, StreamInterface $sink, string $contentLength): StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Drains the source stream into the &quot;sink&quot; client option.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when the sink option is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$contentLength&lt;/b&gt;: Header specifying the amount of data to read.;;d4,191;;b3,0;;m0;;e0;;i0;;o;;k;;lsource;;psink;;pcontentLength;;p;;x;;x;;x">
</treenode>
<treenode node="getDefaultContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;349;5;381;;;;vpos;;v;;a array;;r;;d4,350;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;p;;x">
</treenode>
<treenode node="getDirFromStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f12;143;54;143;;;;vpos;;v;;a;;r;;d-1,-1;;b3,0;;m0;;e0;;i0;;o;;k;;lstream;;p;;x">
</treenode>
<treenode node="getStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f11;75;5;78;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getStream()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the currently active stream if it is open&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,76;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUrl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f11;85;29;85;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the stream URL if it was configured with a URL and not an active resource&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="invokeStats;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;81;5;92;;;;vpos;;v;;a void;;r;;d12,87;;b3,0;;m0;;e0;;i0;;o;;k;;loptions;;prequest;;pstartTime;;presponse;;perror;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="resolveHost;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Handler\StreamHandler.php;f12;325;5;347;;;;vpos;;v;;a UriInterface;;r;;d4,326;;b3,0;;m0;;e0;;i0;;o;;k;;lrequest;;poptions;;p;;x;;x">
</treenode>
<treenode node="streamWrite;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f14;131;5;134;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    streamWrite($stream, array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Write to stream&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource &lt;b&gt;$stream&lt;/b&gt;&#10;    array &lt;b&gt;$record&lt;/b&gt;;;d4,132;;b2,0;;m0;;e0;;i0;;o;;k;;lresource $stream;;parray $record;;p;;x;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\StreamHandler.php;f14;93;5;124;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,94;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="StreamReader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f0;25;1;100;;;;vpos;;v;;aReaderInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class StreamReader implements ReaderInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A class only reading the metadata URL with an appropriate header.&#10;This class makes it easy to test the MetadataStream class.;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="BASE_URL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f9;32;18;32;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The base PATH for the metadata.&#10;&lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FLAVOR_HEADER;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f9;39;23;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The header whose presence indicates GCE presence.&#10;&lt;b&gt;deprecated&lt;/b&gt;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f11;49;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    We create the common context in the constructor.;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createStreamContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f14;84;5;87;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createStreamContext(array $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Abstracted for testing.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,85;;b2,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="getMetadata;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f14;96;5;99;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMetadata($url)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Abstracted for testing.&#10;&lt;b&gt;codeCoverageIgnore&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$url&lt;/b&gt;;;d4,97;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $url;;p;;x">
</treenode>
<treenode node="read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Compute\Metadata\Readers\StreamReader.php;f11;66;5;75;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    read($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read the metadata for a given path.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The metadata path, relative to `/computeMetadata/v1/`.;;d4,67;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
</treenode>
<treenode node="StreamWrapper;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f0;9;1;162;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f0;31;1;840;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class StreamWrapper&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts Guzzle streams into PHP stream resources.;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_PROTOCOL;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f9;33;26;33;;;;vpos;;v;;a;;r&apos;gs&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DIRECTORY_READABLE_MODE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f9;38;33;38;;;;vpos;;v;;a;;r16676;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DIRECTORY_WRITABLE_MODE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f9;37;33;37;;;;vpos;;v;;a;;r16895;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FILE_READABLE_MODE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f9;36;28;36;;;;vpos;;v;;a;;r33060;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FILE_WRITABLE_MODE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f9;35;28;35;;;;vpos;;v;;a;;r33206;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TAIL_NAME_SUFFIX;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f9;40;26;40;;;;vpos;;v;;a;;r&apos;~&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__destruct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;117;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __destruct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Ensure we close the stream when this StreamWrapper is destroyed.;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="compose;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;831;5;839;;;;vpos;;v;;a;;r;;d4,832;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="createStreamContext;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f18;52;5;57;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createStreamContext(StreamInterface $stream)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a stream context that can be used to open a stream as a php stream resource.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;;;d4,53;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;p;;x">
</treenode>
<treenode node="determineAclFromMode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;817;5;829;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    determineAclFromMode($mode)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper for determining which predefinedAcl to use given a mode.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$mode&lt;/b&gt;: Decimal representation of the file system permissions;;d4,818;;b3,0;;m0;;e0;;i0;;o;;k;;lint $mode;;p;;x">
</treenode>
<treenode node="dir_closedir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;358;5;361;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    dir_closedir()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for trying to close an opened directory.;;d4,359;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dir_opendir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;370;5;374;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    dir_opendir($path, $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for trying to open a directory.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The url directory to open&#10;    int &lt;b&gt;$options&lt;/b&gt;: Whether or not to enforce safe_mode;;d4,371;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;pint $options;;p;;x;;x">
</treenode>
<treenode node="dir_readdir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;381;5;391;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    dir_readdir()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for reading an entry from a directory handle.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |bool;;d4,382;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dir_rewinddir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;398;5;432;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    dir_rewinddir()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for rewind the directory handle.;;d4,399;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClient;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f18;163;5;167;;;;vpos;;v;;aStorageClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClient($protocol = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the default client to use for streams.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$protocol&lt;/b&gt;: The name of the protocol to get the client for. **Defaults to** `gs`.;;d4,164;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $protocol;;p;;x">
</treenode>
<treenode node="getDirectoryInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;756;5;765;;;;vpos;;v;;aStorageObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDirectoryInfo($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the given path as a directory.&#10;In list objects calls, directories are returned with a trailing slash. By&#10;providing the given path with a trailing slash as a list prefix, we can&#10;check whether the given path exists as a directory.&#10;If the path does not exist or is not a directory, return null.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,757;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="getResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f18;29;5;43;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResource(StreamInterface $stream)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a resource representing the stream.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if stream is not readable or writable&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: The stream to get a resource for;;d4,30;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;p;;x">
</treenode>
<treenode node="makeDirectory;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;665;5;676;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    makeDirectory($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Given a path, ensure that we return a path that looks like a directory&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;;;d4,666;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="makeStatArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;774;5;794;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    makeStatArray($stats)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the associative array that a `stat()` response expects using the&#10;provided stats. Defaults the remaining fields to 0.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$stats&lt;/b&gt;: Sparse stats entries to set.;;d4,775;;b3,0;;m0;;e0;;i0;;o;;k;;larray $stats;;p;;x">
</treenode>
<treenode node="mkdir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;443;5;483;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mkdir($path, $mode, $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for trying to create a directory. If no file path is specified,&#10;or STREAM_MKDIR_RECURSIVE option is set, then create the bucket if it does not exist.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The url directory to create&#10;    int &lt;b&gt;$mode&lt;/b&gt;: The permissions on the directory&#10;    int &lt;b&gt;$options&lt;/b&gt;: Bitwise mask of options. STREAM_MKDIR_RECURSIVE;;d4,444;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;pint $mode;;pint $options;;p;;x;;x;;x">
</treenode>
<treenode node="openPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;645;5;657;;;;vpos;;v;;aStorageClient;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    openPath($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse the URL and set protocol, filename and bucket.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: URL to open;;d4,646;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="register;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f18;62;5;67;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f18;130;5;141;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    register()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers the stream wrapper if needed;;d4,63;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="rename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;492;5;521;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rename($from, $to)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for trying to move a file or directory.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$from&lt;/b&gt;: The URL to the current file&#10;    string &lt;b&gt;$to&lt;/b&gt;: The URL of the new file location;;d4,493;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $from;;pstring $to;;p;;x;;x">
</treenode>
<treenode node="returnError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;803;5;809;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    returnError($message, $flags)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper for whether or not to trigger an error or just return false on an error.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The PHP error message to emit.&#10;    int &lt;b&gt;$flags&lt;/b&gt;: Bitwise mask of options (STREAM_REPORT_ERRORS)&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns false;;d4,804;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $message;;pint $flags;;p;;x;;x">
</treenode>
<treenode node="rmdir;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;535;5;550;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rmdir($path, $options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for trying to remove a directory or a bucket. If the path is empty&#10;or &apos;/&apos;, the bucket will be deleted.&#10;Note that the STREAM_MKDIR_RECURSIVE flag is ignored because the option cannot&#10;be set via the `rmdir()` function.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The URL directory to remove. If the path is empty or is &apos;/&apos;, This will attempt to destroy the bucket.&#10;    int &lt;b&gt;$options&lt;/b&gt;: Bitwise mask of options.;;d4,536;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;pint $options;;p;;x;;x">
</treenode>
<treenode node="statsFromFileInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;729;5;742;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    statsFromFileInfo(array &amp;$info, array &amp;$stats)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Given a `StorageObject` info array, extract the available fields into the&#10;provided `$stats` array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$info&lt;/b&gt;: Array provided from a `StorageObject`.&#10;    array &lt;b&gt;$stats&lt;/b&gt;: Array to put the calculated stats into.;;d4,730;;b3,0;;m0;;e0;;i0;;o;;k;;larray $info;;parray $stats;;p;;x;;x">
</treenode>
<treenode node="stream_cast;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;110;5;115;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;558;5;561;;;;vpos;;v;;a;;r;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;lcast_as;;p;;x">
</treenode>
<treenode node="stream_close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;307;5;324;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    stream_close()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for trying to close the stream.;;d4,308;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="stream_eof;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;98;5;101;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;299;5;302;;;;vpos;;v;;a;;r;;d4,99;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="stream_flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;607;5;637;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    stream_flush()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for fflush() function.;;d4,608;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="stream_open;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;69;5;81;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;179;5;250;;;;vpos;;v;;a;;r;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;lpath;;pmode;;poptions;;popened_path;;p;;x;;x;;x;;x">
</treenode>
<treenode node="stream_read;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;83;5;86;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;259;5;262;;;;vpos;;v;;a;;r;;d4,84;;b1,0;;m0;;e0;;i0;;o;;k;;lcount;;p;;x">
</treenode>
<treenode node="stream_seek;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;103;5;108;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;334;5;341;;;;vpos;;v;;a;;r;;d4,104;;b1,0;;m0;;e0;;i0;;o;;k;;loffset;;pwhence;;p;;x;;x">
</treenode>
<treenode node="stream_stat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;117;5;142;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;283;5;292;;;;vpos;;v;;a;;r;;d4,118;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="stream_tell;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;93;5;96;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;348;5;351;;;;vpos;;v;;a;;r;;d4,94;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="stream_write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;88;5;91;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;271;5;276;;;;vpos;;v;;a;;r;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;ldata;;p;;x">
</treenode>
<treenode node="unlink;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;569;5;580;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unlink($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Callback handler for deleting a file&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The URL of the file to delete;;d4,570;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="unregister;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f18;149;5;154;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unregister($protocol = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Unregisters the SteamWrapper&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$protocol&lt;/b&gt;: The name of the protocol to unregister. **Defaults to** `gs`.;;d4,150;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $protocol;;p;;x">
</treenode>
<treenode node="urlStatDirectory;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;683;5;695;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    urlStatDirectory(StorageObject $object)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Calculate the `url_stat` response for a directory&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |bool;;d4,684;;b3,0;;m0;;e0;;i0;;o;;k;;lobject;;p;;x">
</treenode>
<treenode node="urlStatFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f12;702;5;720;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    urlStatFile()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Calculate the `url_stat` response for a file&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |bool;;d4,703;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="url_stat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\StreamWrapper.php;f11;144;5;161;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\StreamWrapper.php;f11;589;5;600;;;;vpos;;v;;a;;r;;d4,145;;b1,0;;m0;;e0;;i0;;o;;k;;lpath;;pflags;;p;;x;;x">
</treenode>
</treenode>
<treenode node="StreamableUploader;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\StreamableUploader.php;f0;28;1;103;;;;vpos;;v;;aResumableUploader;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class StreamableUploader extends ResumableUploader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Uploader that is a special case of the ResumableUploader where we can write&#10;the file contents in a streaming manner.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="upload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\StreamableUploader.php;f11;39;5;85;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    upload($writeSize = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Triggers the upload process.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$remainder&lt;/b&gt;: [optional] How much data to try and send. Must be in multiples of 262144. If null or not provided, send the all the remaining data and close the file.;;d4,40;;b1,0;;m0;;e0;;i0;;o;;k;;lint $remainder;;p;;x">
</treenode>
<treenode node="uploadAsync;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Upload\StreamableUploader.php;f11;99;5;102;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uploadAsync()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Currently only the MultiPartUploader supports async.&#10;Any calls to this will throw a generic Google Exception.&#10;&lt;b&gt;throws&lt;/b&gt;: GoogleException&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d4,100;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="StubTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\StubTrait.php;f0;25;1;84;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait StubTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Trait StubTrait&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,26;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="___getProperty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\StubTrait.php;f11;34;5;40;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ___getProperty($prop)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$prop&lt;/b&gt;;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;l $prop;;p;;x">
</treenode>
<treenode node="___getPropertyReflector;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\StubTrait.php;f12;61;5;83;;;;vpos;;v;;a;;r;;d4,62;;b3,0;;m0;;e0;;i0;;o;;k;;lproperty;;p;;x">
</treenode>
<treenode node="___setProperty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\StubTrait.php;f11;49;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ___setProperty($prop, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$prop&lt;/b&gt;&#10;     &lt;b&gt;$value&lt;/b&gt;;;d4,50;;b1,0;;m0;;e0;;i0;;o;;k;;l $prop;;p $value;;p;;x;;x">
</treenode>
</treenode>
<treenode node="SwiftMailerHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SwiftMailerHandler.php;f0;24;1;105;;;;vpos;;v;;aMailHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SwiftMailerHandler extends MailHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SwiftMailerHandler uses Swift_Mailer to send the emails&#10;&lt;b&gt;author&lt;/b&gt;: Gyula Sallai;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SwiftMailerHandler.php;f11;37;5;43;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(\Swift_Mailer $mailer, $message, $level = Logger::ERROR, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param Swift_Message|callable(string, array): Swift_Message $message&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \Swift_Mailer &lt;b&gt;$mailer&lt;/b&gt;: The mailer to use&#10;    callable|Swift_Message &lt;b&gt;$message&lt;/b&gt;: An example message for real messages, only the body will be replaced&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;l\Swift_Mailer $mailer;;pcallable|Swift_Message $message;;pstring|int $level;;pbool $bubble;;p;;x;;x;;x;;x">
</treenode>
<treenode node="buildMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SwiftMailerHandler.php;f14;70;5;104;;;;vpos;;v;;aSwift_Message;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildMessage(string $content, array $records): Swift_Message&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates instance of Swift_Message to be sent&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$content&lt;/b&gt;: formatted email body to be sent&#10;    array &lt;b&gt;$records&lt;/b&gt;: Log records that formed the content;;d4,71;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $content;;parray $records;;p;;x;;x">
</treenode>
<treenode node="getSubjectFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SwiftMailerHandler.php;f14;58;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSubjectFormatter(?string $format): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets the formatter for the Swift_Message subject.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$format&lt;/b&gt;: The format of the subject;;d4,59;;b2,0;;m0;;e0;;i0;;o;;k;;lstring|null $format;;p;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SwiftMailerHandler.php;f14;48;5;51;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(string $content, array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,49;;b2,0;;m0;;e0;;i0;;o;;k;;lcontent;;precords;;p;;x;;x">
</treenode>
</treenode>
<treenode node="SymfonyLockAdapter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SymfonyLockAdapter.php;f0;24;1;93;;;;vpos;;v;;aLockInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SymfonyLockAdapter implements LockInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Symfony lock component adapter.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SymfonyLockAdapter.php;f11;36;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(SymfonyLockInterface $lock)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    SymfonyLockInterface &lt;b&gt;$lock&lt;/b&gt;;;d4,37;;b1,0;;m0;;e0;;i0;;o;;k;;lSymfonyLockInterface $lock;;p;;x">
</treenode>
<treenode node="acquire;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SymfonyLockAdapter.php;f11;53;5;71;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    acquire(array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Acquires a lock that will block until released.&#10;&lt;b&gt;type&lt;/b&gt;: bool $blocking Whether the process should block while waiting&#10;to acquire the lock. **Defaults to** true.&#10;}&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException If the lock fails to be acquired.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,54;;b1,0;;m0;;e0;;i0;;o;;k;;larray $options;;p;;x">
</treenode>
<treenode node="release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Lock\SymfonyLockAdapter.php;f11;78;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    release()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Releases the lock.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SysVCacheItemPool;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f0;28;1;240;;;;vpos;;v;;aCacheItemPoolInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SysVCacheItemPool implements CacheItemPoolInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SystemV shared memory based CacheItemPool implementation.&#10;This CacheItemPool implementation can be used among multiple processes, but&#10;it doesn&apos;t provide any locking mechanism. If multiple processes write to&#10;this ItemPool, you have to avoid race condition manually in your code.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_MEMSIZE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f9;34;25;34;;;;vpos;;v;;a;;r10000;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_PERM;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f9;36;22;36;;;;vpos;;v;;a;;r0600;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_PROJ;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f9;32;22;32;;;;vpos;;v;;a;;r&apos;A&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="VAR_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f9;30;17;30;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;74;5;90;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a SystemV shared memory based CacheItemPool.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] Configuration options.&#10;    int &lt;b&gt;$options&lt;/b&gt;: .variableKey The variable key for getting the data from the shared memory. **Defaults to** 1.&#10;     &lt;b&gt;$options&lt;/b&gt;: .proj string The project identifier for ftok. This needs to be a one character string. **Defaults to** &apos;A&apos;.&#10;     &lt;b&gt;$options&lt;/b&gt;: .memsize int The memory size in bytes for shm_attach. **Defaults to** 10000.&#10;     &lt;b&gt;$options&lt;/b&gt;: .perm int The permission for shm_attach. **Defaults to** 0600.;;d4,75;;b1,0;;m0;;e0;;i0;;o;;k;;loptions;;p;;x">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;125;5;130;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="commit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;180;5;189;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    commit()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,181;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="deleteItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;135;5;138;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteItem($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,136;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="deleteItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;143;5;153;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    deleteItems(array $keys)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,144;;b1,0;;m0;;e0;;i0;;o;;k;;lkeys;;p;;x">
</treenode>
<treenode node="getItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;92;5;96;;;;vpos;;v;;a;;r;;d4,93;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="getItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;101;5;111;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getItems(array $keys = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;lkeys;;p;;x">
</treenode>
<treenode node="hasItem;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;116;5;120;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasItem($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="loadItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f12;220;5;239;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    loadItems()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load the items from the shared memory.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true when success, false upon failure;;d4,221;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;158;5;166;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    save(CacheItemInterface $item)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,159;;b1,0;;m0;;e0;;i0;;o;;k;;litem;;p;;x">
</treenode>
<treenode node="saveCurrentItems;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f12;196;5;213;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    saveCurrentItems()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Save the current items.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   true when success, false upon failure;;d4,197;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="saveDeferred;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Cache\SysVCacheItemPool.php;f11;171;5;175;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    saveDeferred(CacheItemInterface $item)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,172;;b1,0;;m0;;e0;;i0;;o;;k;;litem;;p;;x">
</treenode>
</treenode>
<treenode node="SyslogHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogHandler.php;f0;28;1;66;;;;vpos;;v;;aAbstractSyslogHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SyslogHandler extends AbstractSyslogHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logs to syslog service.&#10;usage example:&#10;$log = new Logger(&apos;application&apos;);s&#10;$syslog = new SyslogHandler(&apos;myfacility&apos;, &apos;local6&apos;);s&#10;$formatter = new LineFormatter(&quot;%channel%.%level_name%: %message% %extra%&quot;);s&#10;$syslog-&gt;setFormatter($formatter);s&#10;$log-&gt;pushHandler($syslog);s&#10;&lt;b&gt;author&lt;/b&gt;: Sven Paulus &lt;sven&#10;&lt;b&gt;karlsruhe&lt;/b&gt;: .org&gt;;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogHandler.php;f11;40;5;46;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $ident, $facility = LOG_USER, $level = Logger::DEBUG, bool $bubble = true, int $logopts = LOG_PID)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$ident&lt;/b&gt;&#10;    string|int &lt;b&gt;$facility&lt;/b&gt;: Either one of the names of the keys in $this-&gt;facilities, or a LOG_* facility constant&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    int &lt;b&gt;$logopts&lt;/b&gt;: Option flags for the openlog() call, defaults to LOG_PID;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $ident;;pstring|int $facility;;pstring|int $level;;pbool $bubble;;pint $logopts;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogHandler.php;f11;51;5;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close(): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,52;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogHandler.php;f14;59;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,60;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="SyslogUdpHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f0;23;1;126;;;;vpos;;v;;aAbstractSyslogHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SyslogUdpHandler extends AbstractSyslogHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A Handler for logging to a remote syslogd server.&#10;&lt;b&gt;author&lt;/b&gt;: Jesper Skovgaard Nielsen &lt;nulpunkt&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Dominik Kukacka &lt;dominik.kukacka&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="RFC3164;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f9;25;17;25;;;;vpos;;v;;a;;r0;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="RFC5424;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f9;26;17;26;;;;vpos;;v;;a;;r1;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="RFC5424e;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f9;27;18;27;;;;vpos;;v;;a;;r2;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f11;48;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(string $host, int $port = 514, $facility = LOG_USER, $level = Logger::DEBUG, bool $bubble = true, string $ident = &apos;php&apos;, int $rfc = self::RFC5424)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: Either IP/hostname or a path to a unix socket (port must be 0 then)&#10;    int &lt;b&gt;$port&lt;/b&gt;: Port number, or 0 if $host is a unix socket&#10;    string|int &lt;b&gt;$facility&lt;/b&gt;: Either one of the names of the keys in $this-&gt;facilities, or a LOG_* facility constant&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not&#10;    string &lt;b&gt;$ident&lt;/b&gt;: Program name or tag for each log message.&#10;    int &lt;b&gt;$rfc&lt;/b&gt;: RFC to format the message for.;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $host;;pint $port;;pstring|int $facility;;pstring|int $level;;pbool $bubble;;pstring $ident;;pint $rfc;;p;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f11;69;5;72;;;;vpos;;v;;a void;;r;;d4,70;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="makeCommonSyslogHeader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f14;86;5;115;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    makeCommonSyslogHeader(int $severity, DateTimeInterface $datetime): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Make common syslog header (see rfc5424 or rfc3164);;d4,87;;b2,0;;m0;;e0;;i0;;o;;k;;lseverity;;pdatetime;;p;;x;;x">
</treenode>
<treenode node="setSocket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f11;120;5;125;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSocket(UdpSocket $socket): self&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Inject your own socket, mainly used for testing;;d4,121;;b1,0;;m0;;e0;;i0;;o;;k;;lsocket;;p;;x">
</treenode>
<treenode node="splitMessageIntoLines;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f12;74;5;81;;;;vpos;;v;;a array;;r;;d4,75;;b3,0;;m0;;e0;;i0;;o;;k;;lmessage;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdpHandler.php;f14;58;5;67;;;;vpos;;v;;a void;;r;;d4,59;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="SystemTestCase;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f0;35;1;283;;;;vpos;;v;;aTestCase;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SystemTestCase extends TestCase&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SystemTestCase can be extended to implement system tests&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,36;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="createBucket;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;97;5;114;;;;vpos;;v;;aBucket;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createBucket(StorageClient $client, $bucketName, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a bucket and enqueue it for deletion.&#10;This method provides a means of creating a bucket with pre-configured&#10;flush+delete functionality. Use in place of `StorageClient::createBucket()`.&#10;When inserting objects into a bucket created with this method, you do NOT need&#10;to enqueue those objects for deletion or concern yourself with order of&#10;operations.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StorageClient &lt;b&gt;$client&lt;/b&gt;&#10;    string &lt;b&gt;$bucketName&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,98;;b1,5;;m0;;e0;;i0;;o;;k;;lStorageClient $client;;pstring $bucketName;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="createDataset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;134;5;143;;;;vpos;;v;;aDataset;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createDataset(BigQueryClient $client, $datasetName, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a dataset and enqueue it for deletion.&#10;This method provides a means of creating a dataset with pre-configured&#10;flush+delete functionality. Use in place of `BigQueryClient::createDataset()`.&#10;When inserting tables into a dataset created with this method, you do NOT need&#10;to enqueue those tables for deletion or concern yourself with order of&#10;operations.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    BigQueryClient &lt;b&gt;$client&lt;/b&gt;&#10;    string &lt;b&gt;$datasetName&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,135;;b1,5;;m0;;e0;;i0;;o;;k;;lBigQueryClient $client;;pstring $datasetName;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="createTopic;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;163;5;180;;;;vpos;;v;;aTopic;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createTopic(PubSubClient $client, $topicName, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a topic and enqueue it for deletion.&#10;This method provides a means of creating a topic with pre-configured&#10;flush+delete functionality. Use in place of `PubSubClient::createTopic()`.&#10;When inserting subscriptions into a topic created with this method, you do NOT need&#10;to enqueue those subscriptions for deletion or concern yourself with order of&#10;operations.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    PubSubClient &lt;b&gt;$client&lt;/b&gt;&#10;    string &lt;b&gt;$topicName&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;;;d4,164;;b1,5;;m0;;e0;;i0;;o;;k;;lPubSubClient $client;;pstring $topicName;;parray $options;;p;;x;;x;;x">
</treenode>
<treenode node="isEmulatorUsed;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;243;5;258;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isEmulatorUsed()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns `true` when &quot;using emulator&quot; flag is set either for called class name or its&#10;fully-qualified name prefix or `false` otherwise.&#10;Example:&#10;```&#10;$transports = [[&apos;grpc&apos;]];s&#10;if (!self::isEmulatorUsed()) {&#10;$transports[] = [&apos;rest&apos;];s&#10;}&#10;```;;d4,244;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="processQueue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;61;5;64;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    processQueue()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Process the deletion queue&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,62;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="randId;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;74;5;77;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    randId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a random integer ID for test entities.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,75;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setUsingEmulator;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;195;5;198;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUsingEmulator($enabled = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set &quot;using emulator&quot; flag for single test case.&#10;Should be called in `setUpBeforeClass()` method. This will allow to&#10;skip tests that are not supported by emulator.&#10;Example:&#10;```&#10;self::setUsingEmulator(getenv(&apos;FOOBAR_EMULATOR_HOST&apos;));s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$enabled&lt;/b&gt;: Whether emulator is detected. **Defaults to** `true`.;;d4,196;;b1,5;;m0;;e0;;i0;;o;;k;;lbool $enabled;;p;;x">
</treenode>
<treenode node="setUsingEmulatorForClassPrefix;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;220;5;227;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUsingEmulatorForClassPrefix($enabled = true, $prefix = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set &quot;using emulator&quot; flag for test cases with specified fully-qualified name prefix.&#10;Should be called in `setUpBeforeClass()` method. This will allow to&#10;skip tests that are not supported by emulator.&#10;Example:&#10;```&#10;// Set flag for called class namespace.&#10;self::setUsingEmulatorForClassPrefix(getenv(&apos;FOOBAR_EMULATOR_HOST&apos;));s&#10;```&#10;```&#10;// Set flag for some other namespace.&#10;self::setUsingEmulatorForClassPrefix(getenv(&apos;FOOBAR_EMULATOR_HOST&apos;), &apos;Foobar\\Tests\\System\\Admin\\&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$enabled&lt;/b&gt;: Whether emulator is detected. **Defaults to** `true`.&#10;    string|null &lt;b&gt;$prefix&lt;/b&gt;: Fully-qualified class name prefix. **Defaults to** called class namespace.;;d4,221;;b1,5;;m0;;e0;;i0;;o;;k;;lbool $enabled;;pstring|null $prefix;;p;;x;;x">
</treenode>
<treenode node="setupQueue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;48;5;53;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setupQueue()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set up the deletion queue&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,49;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="skipIfEmulatorUsed;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\System\SystemTestCase.php;f18;277;5;282;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    skipIfEmulatorUsed($reason = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Skips current test (when called from test method) or entire test case (when called from `setUpBeforeClass()`)&#10;if &quot;using emulator&quot; flag is set either for called class name or its fully-qualified name prefix.&#10;Example:&#10;```&#10;// Use default reason.&#10;self::skipIfEmulatorUsed();s&#10;```&#10;```&#10;// Use custom reason.&#10;self::skipIfEmulatorUsed(&apos;Administration functions are not supported by emulator.&apos;);s&#10;```&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$reason&lt;/b&gt;: Message explaining reason for skipping this test.;;d4,278;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|null $reason;;p;;x">
</treenode>
</treenode>
<treenode node="SysvConfigStorage;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f0;27;1;158;;;;vpos;;v;;aConfigStorageInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SysvConfigStorage implements ConfigStorageInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ConfigStorageInterface implementation with SystemV IPC shared memory.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_PERM;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f9;33;22;33;;;;vpos;;v;;a;;r0600;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_PROJECT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f9;35;25;35;;;;vpos;;v;;a;;r&apos;A&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DEFAULT_SHM_SIZE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f9;31;26;31;;;;vpos;;v;;a;;r200000;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="VAR_KEY;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f9;29;17;29;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f11;55;5;71;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prepare the key for semaphore and shared memory.;;d4,56;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f11;153;5;157;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clear()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear the JobConfig from storage.;;d4,154;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="load;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f11;127;5;148;;;;vpos;;v;;aJobConfig;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    load()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Load a JobConfig from the storage.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when failed to attach to the shared memory or deserialization fails;;d4,128;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="lock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f11;78;5;81;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    lock()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Acquire a lock.;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="save;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f11;100;5;119;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    save(JobConfig $config)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Save the given JobConfig.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when failed to attach to the shared memory or serialization fails&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    JobConfig &lt;b&gt;$config&lt;/b&gt;: A JobConfig to save.;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lJobConfig $config;;p;;x">
</treenode>
<treenode node="unlock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvConfigStorage.php;f11;88;5;91;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unlock()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Release a lock.;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="SysvProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvProcessor.php;f0;29;1;93;;;;vpos;;v;;aProcessItemInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SysvProcessor implements ProcessItemInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ProcessItemInterface implementation with SysV IPC message queue.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,30;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="flush;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvProcessor.php;f11;89;5;92;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flush($idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Run the job with the given id. This has no effect and simply always&#10;returns false when using the batch daemon.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id of the job.;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="submit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Batch\SysvProcessor.php;f11;46;5;80;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    submit($item, $idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Submit an item for async processing.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException when failed to store the item.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$item&lt;/b&gt;: An item to submit.&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: A numeric id of the job.;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;lmixed $item;;pint $idNum;;p;;x;;x">
</treenode>
</treenode>
<treenode node="SysvTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\SysvTrait.php;f0;27;1;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait SysvTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A utility trait related to System V IPC.&#10;&lt;b&gt;experimental&lt;/b&gt;: The experimental flag means that while we believe this method&#10;or class is ready for use, it may change before release in backwards-&#10;incompatible ways. Please use with caution, and test thoroughly when&#10;upgrading.;;d0,28;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getSysvKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\SysvTrait.php;f12;41;5;49;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSysvKey($idNum)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a SystemV IPC key for the given id number.&#10;Set GOOGLE_CLOUD_SYSV_ID envvar to change the base id.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$idNum&lt;/b&gt;: An id number.;;d4,42;;b3,0;;m0;;e0;;i0;;o;;k;;lint $idNum;;p;;x">
</treenode>
<treenode node="isSysvIPCLoaded;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\SysvTrait.php;f12;56;5;61;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isSysvIPCLoaded()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine whether the SystemV IPC extension family is loaded.;;d4,57;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Table;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Table.php;f6;19;1;112;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Table&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copyright 2019 Google LLC&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);s&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;http://www.apache.org/licenses/LICENSE-2.0&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License.;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="create;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Table.php;f18;65;5;82;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    create($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a CRC table.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The polynomial.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The table.;;d4,66;;b1,5;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
<treenode node="create4;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Table.php;f18;91;5;111;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    create4($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a CRC table sliced by 4.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The polynomial.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The table.;;d4,92;;b1,5;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Table.php;f18;49;5;56;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get($polynomial)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets a CRC table, by creating it, or using a previously cached result.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$polynomial&lt;/b&gt;: The polynomial&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The table;;d4,50;;b1,5;;m0;;e0;;i0;;o;;k;;linteger $polynomial;;p;;x">
</treenode>
<treenode node="output;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\src\Table.php;f18;28;5;40;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    output(array $table)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Echos the given table. Useful for building a static table to include in source code.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$table&lt;/b&gt;: The table;;d4,29;;b1,5;;m0;;e0;;i0;;o;;k;;larray $table;;p;;x">
</treenode>
</treenode>
<treenode node="TagProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\TagProcessor.php;f0;18;1;47;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TagProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a tags array into record&#10;&lt;b&gt;author&lt;/b&gt;: Martijn Riemers;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\TagProcessor.php;f11;22;5;25;;;;vpos;;v;;a;;r;;d4,23;;b1,0;;m0;;e0;;i0;;o;;k;;ltags;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\TagProcessor.php;f11;41;5;46;;;;vpos;;v;;a array;;r;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="addTags;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\TagProcessor.php;f11;27;5;32;;;;vpos;;v;;a self;;r;;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;ltags;;p;;x">
</treenode>
<treenode node="setTags;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\TagProcessor.php;f11;34;5;39;;;;vpos;;v;;a self;;r;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;ltags;;p;;x">
</treenode>
</treenode>
<treenode node="TaskQueue;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueue.php;f0;13;1;66;;;;vpos;;v;;aTaskQueueInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TaskQueue implements TaskQueueInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A task queue that executes tasks in a FIFO order.&#10;This task queue class is used to settle promises asynchronously and&#10;maintains a constant stack size. You can use the task queue asynchronously&#10;by calling the `run()` function of the global task queue in an event loop.&#10;GuzzleHttp\Promise\Utils::queue()-&gt;run();s;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueue.php;f11;18;5;31;;;;vpos;;v;;a;;r;;d4,19;;b1,0;;m0;;e0;;i0;;o;;k;;lwithShutdown;;p;;x">
</treenode>
<treenode node="add;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueue.php;f11;38;5;41;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;ltask;;p;;x">
</treenode>
<treenode node="disableShutdown;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueue.php;f11;62;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    disableShutdown()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The task queue will be run and exhausted by default when the process&#10;exits IFF the exit is not the result of a PHP E_ERROR error.&#10;You can disable running the automatic shutdown of the queue by calling&#10;this function. If you disable the task queue shutdown process, then you&#10;MUST either run the task queue (as a result of running your event loop&#10;or manually using the run() method) or wait on each outstanding promise.&#10;Note: This shutdown will occur before any destructors are triggered.;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isEmpty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueue.php;f11;33;5;36;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="run;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\TaskQueue.php;f11;43;5;49;;;;vpos;;v;;a;;r;;d4,44;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="TelegramBotHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f0;30;1;180;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TelegramBotHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler send logs to Telegram using Telegram Bot API.&#10;How to use:&#10;1) Create telegram bot with https://telegram.me/BotFather&#10;2) Create a telegram channel where logs will be recorded.&#10;3) Add created bot from step 1 to the created channel from step 2.&#10;Use telegram bot API key from step 1 and channel name with &apos;&#10;@&apos; prefix from step 2 to create instance of TelegramBotHandler&#10;&lt;b&gt;link&lt;/b&gt;: https://core.telegram.org/bots/api&#10;&lt;b&gt;author&lt;/b&gt;: Mazur Alexandr &lt;alexandrmazur96&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;;;d0,31;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="AVAILABLE_PARSE_MODES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f17;37;39;37;;;;vposarray;;v;;a;;r[&#10;        &apos;HTML&apos;;;d-1,-1;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="BOT_API;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f17;32;25;32;;;;vpos;;v;;a;;r&apos;https://api.telegram.org/bot&apos;;;d-1,-1;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f11;82;5;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        string $apiKey,&#10;        string $channel,&#10;        $level = Logger::DEBUG,&#10;        bool $bubble = true,&#10;        string $parseMode = null,&#10;        bool $disableWebPagePreview = null,&#10;        bool $disableNotification = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritDoc&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$apiKey&lt;/b&gt;: Telegram bot access token provided by BotFather&#10;    string &lt;b&gt;$channel&lt;/b&gt;: Telegram channel name;;d6,90;;b1,0;;m0;;e0;;i0;;o;;k;;lapiKey;;pchannel;;plevel;;pbubble;;pparseMode;;pdisableWebPagePreview;;pdisableNotification;;p;;x;;x;;x;;x;;x;;x;;x">
</treenode>
<treenode node="disableNotification;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f11;116;5;120;;;;vpos;;v;;a self;;r;;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;ldisableNotification;;p;;x">
</treenode>
<treenode node="disableWebPagePreview;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f11;110;5;114;;;;vpos;;v;;a self;;r;;d4,111;;b1,0;;m0;;e0;;i0;;o;;k;;ldisableWebPagePreview;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f11;125;5;144;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,126;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f14;158;5;179;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send(string $message): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send request to&#10;&lt;b&gt;link&lt;/b&gt;: https://api.telegram.org/bot on SendMessage action.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;;;d4,159;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="setParseMode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f11;100;5;108;;;;vpos;;v;;a self;;r;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lparseMode;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TelegramBotHandler.php;f14;149;5;152;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritDoc&lt;/b&gt;;;d4,150;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="TestCase;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Test\TestCase.php;f0;22;1;62;;;;vpos;;v;;aTestCase;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TestCase extends \PHPUnit\Framework\TestCase&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Lets you easily generate log records and a dummy formatter for testing purposes&#10;*&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="getIdentityFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Test\TestCase.php;f14;51;5;61;;;;vpos;;v;;a FormatterInterface;;r;;d4,52;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getMultipleRecords;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Test\TestCase.php;f14;40;5;49;;;;vpos;;v;;a array;;r;;d4,41;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Test\TestCase.php;f14;27;5;38;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getRecord($level = Logger::WARNING, $message = &apos;test&apos;, array $context = []): array&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Record;;d4,28;;b2,0;;m0;;e0;;i0;;o;;k;;llevel;;pmessage;;pcontext;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="TestHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f0;67;1;192;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TestHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Used for testing purposes.&#10;It records all records and gives you access to them for verification.&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergency($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlert($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCritical($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasError($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarning($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNotice($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfo($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebug($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugThatPasses($message);;d0,68;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__call;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;178;5;191;;;;vpos;;v;;a;;r;;d4,179;;b1,0;;m0;;e0;;i0;;o;;k;;lmethod;;pargs;;p;;x;;x">
</treenode>
<treenode node="clear;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;78;5;82;;;;vpos;;v;;a;;r;;d4,79;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRecords;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;73;5;76;;;;vpos;;v;;a;;r;;d4,74;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;108;5;124;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasRecord($record, $level): bool&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$record&lt;/b&gt;: Either a message string or an array containing message and optionally context keys that will be checked against all records&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: Logging level value or name;;d4,109;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $record;;pstring|int $level;;p;;x;;x">
</treenode>
<treenode node="hasRecordThatContains;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;129;5;134;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasRecordThatContains(string $message, $level): bool&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: Logging level value or name;;d4,130;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecordThatMatches;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;139;5;144;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasRecordThatMatches(string $regex, $level): bool&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: Logging level value or name;;d4,140;;b1,0;;m0;;e0;;i0;;o;;k;;lregex;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecordThatPasses;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;152;5;167;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasRecordThatPasses(callable $predicate, $level)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;psalm&lt;/b&gt;: -param callable(array, int): mixed $predicate&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: Logging level value or name;;d4,153;;b1,0;;m0;;e0;;i0;;o;;k;;lpredicate;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecords;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;99;5;102;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasRecords($level): bool&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: Logging level value or name;;d4,100;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;p;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;84;5;89;;;;vpos;;v;;a;;r;;d4,85;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setSkipReset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f11;91;5;94;;;;vpos;;v;;a;;r;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;lskipReset;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\TestHandler.php;f14;172;5;176;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,173;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
</treenode>
<treenode node="TestHelpers;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f0;33;1;277;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TestHelpers&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class TestHelpers is used to hold static functions required for testing&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,34;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="generatedSystemTestBootstrap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;206;5;215;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generatedSystemTestBootstrap()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Setup stuff needed for the generated system tests.&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&lt;b&gt;experimental&lt;/b&gt;;;d4,207;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPrivateProperty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;248;5;256;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getPrivateProperty($class, $property)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the value of a private property.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$class&lt;/b&gt;: The class&#10;    string &lt;b&gt;$property&lt;/b&gt;: The property name.;;d4,249;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $class;;pstring $property;;p;;x;;x">
</treenode>
<treenode node="impl;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;75;5;97;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    impl($trait, array $props = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a trait implementation.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$trait&lt;/b&gt;: The fully-qualified name of the trait to implement.;;d4,76;;b1,5;;m0;;e0;;i0;;o;;k;;ltrait;;pprops;;p;;x;;x">
</treenode>
<treenode node="perfBootstrap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;131;5;137;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    perfBootstrap()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Setup performance tests support.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,132;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="projectRoot;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f19;266;5;276;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    projectRoot()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determine the path of the project root based on where the composer&#10;autoloader is located.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,267;;b3,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="requireKeyfile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;147;5;168;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    requireKeyfile($env)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check that the required environment variable keyfile paths are set and exist.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array|string &lt;b&gt;$env&lt;/b&gt;: The environment variable(s) required.;;d4,148;;b1,5;;m0;;e0;;i0;;o;;k;;larray|string $env;;p;;x">
</treenode>
<treenode node="snippetBootstrap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;106;5;122;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    snippetBootstrap()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Setup snippet tests support.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,107;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="stub;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;46;5;64;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    stub($extends, array $args = [], array $props = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a test stub which extends a real class and allows overriding of private properties.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$extends&lt;/b&gt;: The fully-qualified name of the class to extend.&#10;    array &lt;b&gt;$args&lt;/b&gt;: An array of constructor arguments to use when creating the stub.&#10;    array &lt;b&gt;$props&lt;/b&gt;: A list of private properties on which to enable overrriding.;;d4,47;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $extends;;parray $args;;parray $props;;p;;x;;x;;x">
</treenode>
<treenode node="systemBootstrap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;178;5;199;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    systemBootstrap()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Setup stuff needed for the system test runner.&#10;This method can only be called once per run. Subsequent calls will thrown \RuntimeException.&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&lt;b&gt;experimental&lt;/b&gt;;;d4,179;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="systemTestShutdown;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\TestHelpers.php;f18;228;5;239;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    systemTestShutdown(callable $shutdown)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add cleanup function for system tests.&#10;Calls to this method enqueue a PHP shutdown function, scoped to the parent&#10;PID.&#10;&lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$shutdown&lt;/b&gt;: The shutdown function.;;d4,229;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $shutdown;;p;;x">
</treenode>
</treenode>
<treenode node="TestLogger;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f0;56;1;146;;;;vpos;;v;;aAbstractLogger;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TestLogger extends AbstractLogger&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Used for testing purposes.&#10;It records all records and gives you access to them for verification.&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergency($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlert($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCritical($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasError($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarning($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNotice($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfo($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebug($record)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugRecords()&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugThatContains($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugThatMatches($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasEmergencyThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasAlertThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasCriticalThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasErrorThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasWarningThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasNoticeThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasInfoThatPasses($message)&#10;&lt;b&gt;method&lt;/b&gt;: bool hasDebugThatPasses($message);;d0,57;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__call;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;128;5;139;;;;vpos;;v;;a;;r;;d4,129;;b1,0;;m0;;e0;;i0;;o;;k;;lmethod;;pargs;;p;;x;;x">
</treenode>
<treenode node="hasRecord;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;85;5;99;;;;vpos;;v;;a;;r;;d4,86;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecordThatContains;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;101;5;106;;;;vpos;;v;;a;;r;;d4,102;;b1,0;;m0;;e0;;i0;;o;;k;;lmessage;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecordThatMatches;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;108;5;113;;;;vpos;;v;;a;;r;;d4,109;;b1,0;;m0;;e0;;i0;;o;;k;;lregex;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecordThatPasses;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;115;5;126;;;;vpos;;v;;a;;r;;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;lpredicate;;plevel;;p;;x;;x">
</treenode>
<treenode node="hasRecords;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;80;5;83;;;;vpos;;v;;a;;r;;d4,81;;b1,0;;m0;;e0;;i0;;o;;k;;llevel;;p;;x">
</treenode>
<treenode node="log;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;68;5;78;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    log($level, $message, array $context = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;inheritdoc&lt;/b&gt;;;d4,69;;b1,0;;m0;;e0;;i0;;o;;k;;llevel;;pmessage;;pcontext;;p;;x;;x;;x">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\psr\log\Psr\Log\Test\TestLogger.php;f11;141;5;145;;;;vpos;;v;;a;;r;;d4,142;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="TimeTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f0;22;1;144;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait TimeTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Helper methods for formatting and converting Timestamps.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="convertFractionToNanoSeconds;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f12;114;5;117;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    convertFractionToNanoSeconds($subseconds)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert subseconds, expressed as a decimal to nanoseconds.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$subseconds&lt;/b&gt;: Provide value as a whole number (i.e. provide 0.1 as 1).;;d4,115;;b3,0;;m0;;e0;;i0;;o;;k;;lint|string $subseconds;;p;;x">
</treenode>
<treenode node="convertNanoSecondsToFraction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f12;130;5;143;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    convertNanoSecondsToFraction($nanos, $rpad = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert nanoseconds to subseconds.&#10;Note that result should be used as a fraction of one second, but is&#10;given as an integer.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|string &lt;b&gt;$nanos&lt;/b&gt;&#10;    bool &lt;b&gt;$rpad&lt;/b&gt;: Whether to right-pad to 6 or 9 digits. **Defaults to** `true`.;;d4,131;;b3,0;;m0;;e0;;i0;;o;;k;;lint|string $nanos;;pbool $rpad;;p;;x;;x">
</treenode>
<treenode node="createDateTimeFromSeconds;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f12;58;5;65;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createDateTimeFromSeconds($seconds)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a DateTimeImmutable instance from a UNIX timestamp (i.e. seconds since epoch).&#10;\DateTimeImmutable&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$seconds&lt;/b&gt;: The unix timestamp.;;d4,59;;b3,0;;m0;;e0;;i0;;o;;k;;lint $seconds;;p;;x">
</treenode>
<treenode node="formatTimeAsArray;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f12;96;5;105;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatTimeAsArray(\DateTimeInterface $dateTime, $ns)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a timestamp for the API with nanosecond precision.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \DateTimeInterface &lt;b&gt;$dateTime&lt;/b&gt;: The date time object.&#10;    int|null &lt;b&gt;$ns&lt;/b&gt;: The number of nanoseconds. If null, subseconds from $dateTime will be used instead.;;d4,97;;b3,0;;m0;;e0;;i0;;o;;k;;l\DateTimeInterface $dateTime;;pint|null $ns;;p;;x;;x">
</treenode>
<treenode node="formatTimeAsString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f12;75;5;86;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatTimeAsString(\DateTimeInterface $dateTime, $ns)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a Timestamp string in an API-compatible format.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \DateTimeInterface &lt;b&gt;$dateTime&lt;/b&gt;: The date time object.&#10;    int|null &lt;b&gt;$ns&lt;/b&gt;: The number of nanoseconds. If null, subseconds from $dateTime will be used instead.;;d4,76;;b3,0;;m0;;e0;;i0;;o;;k;;l\DateTimeInterface $dateTime;;pint|null $ns;;p;;x;;x">
</treenode>
<treenode node="parseTimeString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\TimeTrait.php;f12;32;5;50;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseTimeString($timestamp)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse a Timestamp string and return a DateTimeImmutable instance and nanoseconds as an integer.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception If the timestamp string is in an unrecognized format.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$timestamp&lt;/b&gt;: A string representation of a timestamp, encoded in RFC 3339 format (YYYY-MM-DDTHH:MM:SS.000000[000]TZ).&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [\DateTimeImmutable, int];;d4,33;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $timestamp;;p;;x">
</treenode>
</treenode>
<treenode node="Timestamp;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f0;39;1;149;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Timestamp&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents a Timestamp value.&#10;Nanosecond precision is preserved by passing nanoseconds as a separate&#10;argument to the constructor. If nanoseconds are given, any subsecond&#10;precision in the timestamp will be overridden when encoding the timestamp&#10;as a string.&#10;Example:&#10;```&#10;use Google\Cloud\Core\Timestamp;s&#10;$timestamp = new Timestamp(new \DateTime(&apos;2003-02-05 11:15:02.421827Z&apos;));s&#10;```&#10;```&#10;// Timestamps can be cast to strings.&#10;echo (string) $timestamp;s&#10;```;;d0,40;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="FORMAT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f9;43;16;43;;;;vpos;;v;;a;;r&apos;Y-m-d\TH:i:s.u\Z&apos;;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FORMAT_INTERPOLATE;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f9;45;28;45;;;;vpos;;v;;a;;r&apos;Y-m-d\TH:i:s.%\s\Z&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="FORMAT_NO_MS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f9;44;22;44;;;;vpos;;v;;a;;r&apos;Y-m-d\TH:i:s\Z&apos;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f11;67;5;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(\DateTimeInterface $value, $nanoSeconds = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    \DateTimeInterface &lt;b&gt;$value&lt;/b&gt;: The timestamp value. Use of `DateTimeImmutable` is highly recommended over `DateTime` in order to avoid side effects.&#10;    int &lt;b&gt;$nanoSeconds&lt;/b&gt;: [optional] The number of nanoseconds in the timestamp. If omitted, subsecond precision will be obtained from the instance of `\DateTimeInterface` provided in the first argument. If provided, any precision in `$value` below seconds will be disregarded.;;d4,68;;b1,0;;m0;;e0;;i0;;o;;k;;l\DateTimeInterface $value;;pint $nanoSeconds;;p;;x;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f11;135;5;138;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __toString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format the value as a string.&#10;&lt;b&gt;access&lt;/b&gt;: private;;d4,136;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="formatAsString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f11;121;5;127;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatAsString()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format the value as a string.&#10;Example:&#10;```&#10;$value = $timestamp-&gt;formatAsString();s&#10;```;;d4,122;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="formatForApi;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f11;145;5;148;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatForApi()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a timestamp for the API with nanosecond precision.;;d4,146;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f11;89;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the underlying `\DateTimeInterface` implementation.&#10;Please note that if you provided nanoseconds when creating the timestamp,&#10;they will not be included in this value.&#10;Example:&#10;```&#10;$dateTime = $timestamp-&gt;get();s&#10;```&#10;\DateTimeInterface;;d4,90;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="nanoSeconds;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Timestamp.php;f11;104;5;109;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    nanoSeconds()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the number of nanoseconds.&#10;Example:&#10;```&#10;$nanos = $timestamp-&gt;nanoSeconds();s&#10;```;;d4,105;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="TooManyRedirectsException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\TooManyRedirectsException.php;f0;4;1;6;;;;vpos;;v;;aRequestException;;c;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TransferException;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Exception\TransferException.php;f0;4;1;6;;;;vpos;;v;;aRuntimeException;;cGuzzleException;;c;;r;;d0,5;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="TransferStats;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f6;12;1;132;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class TransferStats&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represents data at the point after it was transferred either successfully&#10;or after a network error.;;d0,13;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;46;5;58;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        RequestInterface $request,&#10;        ?ResponseInterface $response = null,&#10;        ?float $transferTime = null,&#10;        $handlerErrorData = null,&#10;        array $handlerStats = []&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request that was sent.&#10;    ResponseInterface|null &lt;b&gt;$response&lt;/b&gt;: Response received (if any)&#10;    float|null &lt;b&gt;$transferTime&lt;/b&gt;: Total handler transfer time.&#10;    mixed &lt;b&gt;$handlerErrorData&lt;/b&gt;: Handler error data.&#10;    array &lt;b&gt;$handlerStats&lt;/b&gt;: Handler specific stats.;;d6,52;;b1,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;pResponseInterface|null $response;;pfloat|null $transferTime;;pmixed $handlerErrorData;;parray $handlerStats;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getEffectiveUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;98;5;101;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getEffectiveUri(): UriInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the effective URI the request was sent to.;;d4,99;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHandlerErrorData;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;90;5;93;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandlerErrorData()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets handler specific error data.&#10;This might be an exception, a integer representing an error code, or&#10;anything else. Relying on this value assumes that you know what handler&#10;you are using.;;d4,91;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHandlerStat;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;128;5;131;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandlerStat(string $stat)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a specific handler statistic from the handler by name.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$stat&lt;/b&gt;: Handler specific transfer stat to retrieve.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,129;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $stat;;p;;x">
</treenode>
<treenode node="getHandlerStats;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;116;5;119;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getHandlerStats(): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Gets an array of all of the handler specific transfer data.;;d4,117;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;60;5;63;;;;vpos;;v;;a RequestInterface;;r;;d4,61;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;68;34;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the response that was received (if any).;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getTransferTime;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;108;38;108;;;;vpos;;v;;afloat|null;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the estimated time the request was being transferred by the handler.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Time in seconds.;;d-1,-1;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hasResponse;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\TransferStats.php;f11;76;5;79;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasResponse(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a response was received.;;d4,77;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="UdpSocket;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f0;16;1;68;;;;vpos;;v;;a;;r;;d0,17;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DATAGRAM_MAX_LENGTH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f19;18;39;18;;;;vpos;;v;;a;;r65023;;d-1,-1;;b2,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f11;27;5;39;;;;vpos;;v;;a;;r;;d4,28;;b1,0;;m0;;e0;;i0;;o;;k;;lip;;pport;;p;;x;;x">
</treenode>
<treenode node="assembleMessage;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f14;62;5;67;;;;vpos;;v;;a string;;r;;d4,63;;b2,0;;m0;;e0;;i0;;o;;k;;lline;;pheader;;p;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f11;46;5;52;;;;vpos;;v;;a void;;r;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="send;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f14;54;5;60;;;;vpos;;v;;a void;;r;;d4,55;;b2,0;;m0;;e0;;i0;;o;;k;;lchunk;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\SyslogUdp\UdpSocket.php;f11;41;5;44;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;lline;;pheader;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UidProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\UidProcessor.php;f0;20;1;54;;;;vpos;;v;;aProcessorInterface;;cResettableInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UidProcessor implements ProcessorInterface, ResettableInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a unique identifier into records&#10;&lt;b&gt;author&lt;/b&gt;: Simon Mönch &lt;sm&#10;&lt;b&gt;webfactory&lt;/b&gt;: .de&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\UidProcessor.php;f11;24;5;31;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\UidProcessor.php;f11;33;5;38;;;;vpos;;v;;a array;;r;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="generateUid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\UidProcessor.php;f12;50;5;53;;;;vpos;;v;;a string;;r;;d4,51;;b3,0;;m0;;e0;;i0;;o;;k;;llength;;p;;x">
</treenode>
<treenode node="getUid;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\UidProcessor.php;f11;40;5;43;;;;vpos;;v;;a string;;r;;d4,41;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="reset;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\UidProcessor.php;f11;45;5;48;;;;vpos;;v;;a;;r;;d4,46;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="UnNamed;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\UnNamed.php;f0;13;1;44;;;;vpos;;v;;aAbstraction;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UnNamed extends Abstraction&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    | 1   |    {/list}    /red,green,blue                  | {$value}*(?:,{$value}+)*&#10;| 2   |    {/list*}   /red/green/blue                  | {$value}+(?:{$sep}{$value}+)*&#10;| 3   |    {/keys}    /semi,%3B,dot,.,comma,%2C        | /(\w+,?)+&#10;| 4   |    {/keys*}   /semi=%3B/dot=./comma=%2C        | /(?:\w+=\w+/?)*;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="toRegex;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Operator\UnNamed.php;f11;15;5;43;;;;vpos;;v;;a;;r;;d4,16;;b1,0;;m0;;e0;;i0;;o;;k;;lparser;;pvar;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UploadedFile;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f0;9;1;324;;;;vpos;;v;;aUploadedFileInterface;;c;;r;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;67;5;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $streamOrFile,&#10;        $size,&#10;        $errorStatus,&#10;        $clientFilename = null,&#10;        $clientMediaType = null&#10;    )&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface|string|resource &lt;b&gt;$streamOrFile&lt;/b&gt;&#10;    int &lt;b&gt;$size&lt;/b&gt;&#10;    int &lt;b&gt;$errorStatus&lt;/b&gt;&#10;    string|null &lt;b&gt;$clientFilename&lt;/b&gt;&#10;    string|null &lt;b&gt;$clientMediaType&lt;/b&gt;;;d6,73;;b1,0;;m0;;e0;;i0;;o;;k;;lStreamInterface|string|resource $streamOrFile;;pint $size;;pint $errorStatus;;pstring|null $clientFilename;;pstring|null $clientMediaType;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="getClientFilename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;312;5;315;;;;vpos;;v;;astring|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientFilename()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The filename sent by the client or null if none was provided.;;d4,313;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getClientMediaType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;320;5;323;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getClientMediaType()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,321;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;301;5;304;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getError()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/manual/en/features.file-upload.errors.php&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   One of PHP&apos;s UPLOAD_ERR_XXX constants.;;d4,302;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;290;5;293;;;;vpos;;v;;aint|null;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSize()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The file size in bytes or null if unknown.;;d4,291;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;231;5;240;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getStream()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&lt;b&gt;throws&lt;/b&gt;: RuntimeException if the upload was not successful.;;d4,232;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isMoved;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;207;5;210;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isMoved()&#10;;;d4,208;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isOk;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;199;5;202;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isOk()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return true if there is no upload error;;d4,200;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isStringNotEmpty;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;157;5;160;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isStringNotEmpty($param)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$param&lt;/b&gt;;;d4,158;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $param;;p;;x">
</treenode>
<treenode node="isStringOrNull;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;148;5;151;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isStringOrNull($param)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$param&lt;/b&gt;;;d4,149;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $param;;p;;x">
</treenode>
<treenode node="moveTo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f11;255;5;283;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    moveTo($targetPath)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/is_uploaded_file&#10;&lt;b&gt;see&lt;/b&gt;: http://php.net/move_uploaded_file&#10;&lt;b&gt;throws&lt;/b&gt;: RuntimeException if the upload was not successful.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException if the $path specified is invalid.&#10;&lt;b&gt;throws&lt;/b&gt;: RuntimeException on any error during the move operation, or on&#10;the second or subsequent call to the method.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$targetPath&lt;/b&gt;: Path to which to move the uploaded file.;;d4,256;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $targetPath;;p;;x">
</treenode>
<treenode node="setClientFilename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;167;5;176;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setClientFilename($clientFilename)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$clientFilename&lt;/b&gt;;;d4,168;;b3,0;;m0;;e0;;i0;;o;;k;;lstring|null $clientFilename;;p;;x">
</treenode>
<treenode node="setClientMediaType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;183;5;192;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setClientMediaType($clientMediaType)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$clientMediaType&lt;/b&gt;;;d4,184;;b3,0;;m0;;e0;;i0;;o;;k;;lstring|null $clientMediaType;;p;;x">
</treenode>
<treenode node="setError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;111;5;126;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setError($error)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$error&lt;/b&gt;;;d4,112;;b3,0;;m0;;e0;;i0;;o;;k;;lint $error;;p;;x">
</treenode>
<treenode node="setSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;133;5;142;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSize($size)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$size&lt;/b&gt;;;d4,134;;b3,0;;m0;;e0;;i0;;o;;k;;lint $size;;p;;x">
</treenode>
<treenode node="setStreamOrFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;91;5;104;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setStreamOrFile($streamOrFile)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Depending on the value set file or stream variable&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$streamOrFile&lt;/b&gt;;;d4,92;;b3,0;;m0;;e0;;i0;;o;;k;;lmixed $streamOrFile;;p;;x">
</treenode>
<treenode node="validateActive;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UploadedFile.php;f12;215;5;224;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    validateActive()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: RuntimeException if is moved or not ok;;d4,216;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Uri;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f0;13;1;760;;;;vpos;;v;;aUriInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Uri implements UriInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PSR-7 URI implementation.&#10;&lt;b&gt;author&lt;/b&gt;: Michael Dowling&#10;&lt;b&gt;author&lt;/b&gt;: Tobias Schultze&#10;&lt;b&gt;author&lt;/b&gt;: Matthew Weier O&apos;Phinney;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="HTTP_DEFAULT_HOST;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f9;21;27;21;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Absolute http and https URIs require a host per RFC 7230 Section 2.7&#10;but in generic URIs the host can be empty. So for http(s) URIs&#10;we apply this default host when no host is given yet to form a&#10;valid URI.;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;65;5;75;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($uri = &apos;&apos;)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;: URI to parse;;d4,66;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;p;;x">
</treenode>
<treenode node="__toString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;77;5;86;;;;vpos;;v;;a;;r;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="applyParts;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;535;5;563;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    applyParts(array $parts)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Apply parse_url parts to a URI.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$parts&lt;/b&gt;: Array of parse_url parts to apply.;;d4,536;;b3,0;;m0;;e0;;i0;;o;;k;;larray $parts;;p;;x">
</treenode>
<treenode node="composeComponents;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;114;5;138;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    composeComponents($scheme, $authority, $path, $query, $fragment)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Composes a URI reference string from its various components.&#10;Usually this method does not need to be called manually but instead is used indirectly via&#10;`Psr\Http\Message\UriInterface::__toString`.&#10;PSR-7 UriInterface treats an empty component the same as a missing component as&#10;getQuery(), getFragment() etc. always return a string. This explains the slight&#10;difference to RFC 3986 Section 5.3.&#10;Another adjustment is that the authority separator is added even when the authority is missing/empty&#10;for the &quot;file&quot; scheme. This is because PHP stream functions like `file_get_contents` only work with&#10;`file:///myfile` but not with `file:/myfile` although they are equivalent according to RFC 3986. But&#10;`file:///` is the more common syntax for the file scheme anyway (Chrome for example redirects to&#10;that format).&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-5.3&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$scheme&lt;/b&gt;&#10;    string &lt;b&gt;$authority&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;&#10;    string &lt;b&gt;$query&lt;/b&gt;&#10;    string &lt;b&gt;$fragment&lt;/b&gt;;;d4,115;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $scheme;;pstring $authority;;pstring $path;;pstring $query;;pstring $fragment;;p;;x;;x;;x;;x;;x">
</treenode>
<treenode node="filterHost;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;608;5;615;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filterHost($host)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the host is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;;;d4,609;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $host;;p;;x">
</treenode>
<treenode node="filterPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;697;5;708;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filterPath($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Filters the path of a URI&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the path is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;;;d4,698;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="filterPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;624;5;638;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filterPort($port)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the port is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int|null &lt;b&gt;$port&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,625;;b3,0;;m0;;e0;;i0;;o;;k;;lint|null $port;;p;;x">
</treenode>
<treenode node="filterQueryAndFragment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;719;5;730;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filterQueryAndFragment($str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Filters the query string or fragment of a URI.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the query or fragment is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;;;d4,720;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $str;;p;;x">
</treenode>
<treenode node="filterScheme;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;572;5;579;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filterScheme($scheme)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the scheme is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$scheme&lt;/b&gt;;;d4,573;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $scheme;;p;;x">
</treenode>
<treenode node="filterUserInfoComponent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;588;5;599;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filterUserInfoComponent($component)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the user info is invalid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$component&lt;/b&gt;;;d4,589;;b3,0;;m0;;e0;;i0;;o;;k;;lstring $component;;p;;x">
</treenode>
<treenode node="fromParts;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;364;5;371;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fromParts(array $parts)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a URI from a hash of `parse_url` components.&#10;&lt;b&gt;link&lt;/b&gt;: http://php.net/manual/en/function.parse-url.php&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException If the components do not form a valid URI.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$parts&lt;/b&gt;;;d4,365;;b1,5;;m0;;e0;;i0;;o;;k;;larray $parts;;p;;x">
</treenode>
<treenode node="generateQueryString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f19;667;5;679;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateQueryString($key, $value)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;&#10;    string|null &lt;b&gt;$value&lt;/b&gt;;;d4,668;;b3,5;;m0;;e0;;i0;;o;;k;;lstring $key;;pstring|null $value;;p;;x;;x">
</treenode>
<treenode node="getAuthority;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;378;5;390;;;;vpos;;v;;a;;r;;d4,379;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getFilteredQueryString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f19;646;5;659;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getFilteredQueryString(UriInterface $uri, array $keys)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$keys&lt;/b&gt;;;d4,647;;b3,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;parray $keys;;p;;x;;x">
</treenode>
<treenode node="getFragment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;417;5;420;;;;vpos;;v;;a;;r;;d4,418;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getHost;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;397;5;400;;;;vpos;;v;;a;;r;;d4,398;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;407;5;410;;;;vpos;;v;;a;;r;;d4,408;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;402;5;405;;;;vpos;;v;;a;;r;;d4,403;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuery;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;412;5;415;;;;vpos;;v;;a;;r;;d4,413;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getScheme;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;373;5;376;;;;vpos;;v;;a;;r;;d4,374;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getUserInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;392;5;395;;;;vpos;;v;;a;;r;;d4,393;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="isAbsolute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;174;5;177;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isAbsolute(UriInterface $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether the URI is absolute, i.e. it has a scheme.&#10;An instance of UriInterface can either be an absolute URI or a relative reference. This method returns true&#10;if it is the former. An absolute URI has a scheme. A relative reference is used to express a URI relative&#10;to another URI, the base URI. Relative references can be divided into several forms:&#10;- network-path references, e.g. &apos;//example.com/path&apos;&#10;- absolute-path references, e.g. &apos;/path&apos;&#10;- relative-path references, e.g. &apos;subpath&apos;&#10;&lt;b&gt;see&lt;/b&gt;: Uri::isNetworkPathReference&#10;&lt;b&gt;see&lt;/b&gt;: Uri::isAbsolutePathReference&#10;&lt;b&gt;see&lt;/b&gt;: Uri::isRelativePathReference&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-4&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d4,175;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;p;;x">
</treenode>
<treenode node="isAbsolutePathReference;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;204;5;210;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isAbsolutePathReference(UriInterface $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether the URI is a absolute-path reference.&#10;A relative reference that begins with a single slash character is termed an absolute-path reference.&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-4.2&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d4,205;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;p;;x">
</treenode>
<treenode node="isDefaultPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;150;5;154;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isDefaultPort(UriInterface $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether the URI has the default port of the current scheme.&#10;`Psr\Http\Message\UriInterface::getPort` may return null or the standard port. This method can be used&#10;independently of the implementation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d4,151;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;p;;x">
</treenode>
<treenode node="isNetworkPathReference;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;189;5;192;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isNetworkPathReference(UriInterface $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether the URI is a network-path reference.&#10;A relative reference that begins with two slash characters is termed an network-path reference.&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-4.2&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d4,190;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;p;;x">
</treenode>
<treenode node="isRelativePathReference;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;222;5;227;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isRelativePathReference(UriInterface $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether the URI is a relative-path reference.&#10;A relative reference that does not begin with a slash character is termed a relative-path reference.&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-4.2&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d4,223;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;p;;x">
</treenode>
<treenode node="isSameDocumentReference;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;242;5;254;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isSameDocumentReference(UriInterface $uri, UriInterface $base = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether the URI is a same-document reference.&#10;A same-document reference refers to a URI that is, aside from its fragment&#10;component, identical to the base URI. When no base URI is given, only an empty&#10;URI reference (apart from its fragment) is considered a same-document reference.&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-4.4&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;: The URI to check&#10;    UriInterface|null &lt;b&gt;$base&lt;/b&gt;: An optional base URI to compare against;;d4,243;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;pUriInterface|null $base;;p;;x;;x">
</treenode>
<treenode node="rawurlencodeMatchZero;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;732;5;735;;;;vpos;;v;;a;;r;;d4,733;;b3,0;;m0;;e0;;i0;;o;;k;;lmatch;;p;;x">
</treenode>
<treenode node="removeDefaultPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;681;5;686;;;;vpos;;v;;a;;r;;d4,682;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="removeDotSegments;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;266;5;269;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeDotSegments($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes dot segments from a path and returns the new path.&#10;&lt;b&gt;deprecated&lt;/b&gt;: since version 1.4. Use UriResolver::removeDotSegments instead.&#10;&lt;b&gt;see&lt;/b&gt;: UriResolver::removeDotSegments&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;;;d4,267;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;282;5;289;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resolve(UriInterface $base, $rel)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts the relative URI into a new URI that is resolved against the base URI.&#10;&lt;b&gt;deprecated&lt;/b&gt;: since version 1.4. Use UriResolver::resolve instead.&#10;&lt;b&gt;see&lt;/b&gt;: UriResolver::resolve&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$base&lt;/b&gt;: Base URI&#10;    string|UriInterface &lt;b&gt;$rel&lt;/b&gt;: Relative URI;;d4,283;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $base;;pstring|UriInterface $rel;;p;;x;;x">
</treenode>
<treenode node="validateState;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f12;737;5;759;;;;vpos;;v;;a;;r;;d4,738;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="withFragment;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;516;5;528;;;;vpos;;v;;a;;r;;d4,517;;b1,0;;m0;;e0;;i0;;o;;k;;lfragment;;p;;x">
</treenode>
<treenode node="withHost;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;456;5;469;;;;vpos;;v;;a;;r;;d4,457;;b1,0;;m0;;e0;;i0;;o;;k;;lhost;;p;;x">
</treenode>
<treenode node="withPath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;487;5;500;;;;vpos;;v;;a;;r;;d4,488;;b1,0;;m0;;e0;;i0;;o;;k;;lpath;;p;;x">
</treenode>
<treenode node="withPort;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;471;5;485;;;;vpos;;v;;a;;r;;d4,472;;b1,0;;m0;;e0;;i0;;o;;k;;lport;;p;;x">
</treenode>
<treenode node="withQuery;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;502;5;514;;;;vpos;;v;;a;;r;;d4,503;;b1,0;;m0;;e0;;i0;;o;;k;;lquery;;p;;x">
</treenode>
<treenode node="withQueryValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;324;5;331;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withQueryValue(UriInterface $uri, $key, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new URI with a specific query string value.&#10;Any existing query string values that exactly match the provided key are&#10;removed and replaced with the given key value pair.&#10;A value of null will set the query string key without a value, e.g. &quot;key&quot;&#10;instead of &quot;key=value&quot;.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI to use as a base.&#10;    string &lt;b&gt;$key&lt;/b&gt;: Key to set.&#10;    string|null &lt;b&gt;$value&lt;/b&gt;: Value to set;;d4,325;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;pstring $key;;pstring|null $value;;p;;x;;x;;x">
</treenode>
<treenode node="withQueryValues;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;343;5;352;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withQueryValues(UriInterface $uri, array $keyValueArray)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new URI with multiple specific query string values.&#10;It has the same behavior as withQueryValue() but for an associative array of key =&gt; value.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI to use as a base.&#10;    array &lt;b&gt;$keyValueArray&lt;/b&gt;: Associative array of key and values;;d4,344;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;parray $keyValueArray;;p;;x;;x">
</treenode>
<treenode node="withScheme;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;422;5;436;;;;vpos;;v;;a;;r;;d4,423;;b1,0;;m0;;e0;;i0;;o;;k;;lscheme;;p;;x">
</treenode>
<treenode node="withUserInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f11;438;5;454;;;;vpos;;v;;a;;r;;d4,439;;b1,0;;m0;;e0;;i0;;o;;k;;luser;;ppassword;;p;;x;;x">
</treenode>
<treenode node="withoutQueryValue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Uri.php;f18;302;5;307;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    withoutQueryValue(UriInterface $uri, $key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new URI with a specific query string value removed.&#10;Any existing query string values that exactly match the provided key are&#10;removed.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;: URI to use as a base.&#10;    string &lt;b&gt;$key&lt;/b&gt;: Query string key to remove.;;d4,303;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;pstring $key;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UriNormalizer;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f6;13;1;216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UriNormalizer&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides methods to normalize and compare URIs.&#10;&lt;b&gt;author&lt;/b&gt;: Tobias Schultze&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-6;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="CAPITALIZE_PERCENT_ENCODING;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;28;37;28;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    All letters within a percent-encoding triplet (e.g., &quot;%3A&quot;) are case-insensitive, and should be capitalized.&#10;Example: http://example.org/a%c2%b1b → http://example.org/a%C2%B1b;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="CONVERT_EMPTY_PATH;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;46;28;46;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts the empty path to &quot;/&quot; for http and https URIs.&#10;Example: http://example.org → http://example.org/;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="DECODE_UNRESERVED_CHARACTERS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;39;38;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Decodes percent-encoded octets of unreserved characters.&#10;For consistency, percent-encoded octets in the ranges of ALPHA (%41–%5A and %61–%7A), DIGIT (%30–%39),&#10;hyphen (%2D), period (%2E), underscore (%5F), or tilde (%7E) should not be created by URI producers and,&#10;when found in a URI, should be decoded to their corresponding unreserved characters by URI normalizers.&#10;Example: http://example.org/%7Eusern%61me/ → http://example.org/~username/;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="PRESERVING_NORMALIZATIONS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;21;35;21;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Default normalizations which only include the ones that preserve semantics.&#10;self::CAPITALIZE_PERCENT_ENCODING | self::DECODE_UNRESERVED_CHARACTERS | self::CONVERT_EMPTY_PATH |&#10;self::REMOVE_DEFAULT_HOST | self::REMOVE_DEFAULT_PORT | self::REMOVE_DOT_SEGMENTS;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="REMOVE_DEFAULT_HOST;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;59;29;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes the default host of the given URI scheme from the URI.&#10;Only the &quot;file&quot; scheme defines the default host &quot;localhost&quot;.&#10;All of `file:/myfile`, `file:///myfile`, and `file://localhost/myfile`&#10;are equivalent according to RFC 3986. The first format is not accepted&#10;by PHPs stream functions and thus already normalized implicitly to the&#10;second format in the Uri class. See `GuzzleHttp\Psr7\Uri::composeComponents`.&#10;Example: file://localhost/myfile → file:///myfile;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="REMOVE_DEFAULT_PORT;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;66;29;66;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes the default port of the given URI scheme from the URI.&#10;Example: http://example.org:80/ → http://example.org/;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="REMOVE_DOT_SEGMENTS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;76;29;76;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes unnecessary dot-segments.&#10;Dot-segments in relative-path references are not removed as it would&#10;change the semantics of the URI reference.&#10;Example: http://example.org/../a/b/../c/./d.html → http://example.org/a/c/d.html;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="REMOVE_DUPLICATE_SLASHES;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;87;34;87;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Paths which include two or more adjacent slashes are converted to one.&#10;Webservers usually ignore duplicate slashes and treat those URIs equivalent.&#10;But in theory those URIs do not need to be equivalent. So this normalization&#10;may change the semantics. Encoded slashes (%2F) are not removed.&#10;Example: http://example.org//foo///bar.html → http://example.org/foo/bar.html;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="SORT_QUERY_PARAMETERS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f9;100;31;100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sort query parameters with their values in alphabetical order.&#10;However, the order of parameters in a URI may be significant (this is not defined by the standard).&#10;So this normalization is not safe and may change the semantics of the URI.&#10;Example: ?lang=en&amp;article=fred → ?article=fred&amp;lang=en&#10;Note: The sorting is neither locale nor Unicode aware (the URI query does not get decoded at all) as the&#10;purpose is to be able to compare URIs in a reproducible way, not to have the params sorted perfectly.;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f12;212;5;215;;;;vpos;;v;;a;;r;;d4,213;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="capitalizePercentEncoding;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f19;180;5;194;;;;vpos;;v;;a;;r;;d4,181;;b3,5;;m0;;e0;;i0;;o;;k;;luri;;p;;x">
</treenode>
<treenode node="decodeUnreservedCharacters;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f19;196;5;210;;;;vpos;;v;;a;;r;;d4,197;;b3,5;;m0;;e0;;i0;;o;;k;;luri;;p;;x">
</treenode>
<treenode node="isEquivalent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f18;175;5;178;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isEquivalent(UriInterface $uri1, UriInterface $uri2, $normalizations = self::PRESERVING_NORMALIZATIONS)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Whether two URIs can be considered equivalent.&#10;Both URIs are normalized automatically before comparison with the given $normalizations bitmask. The method also&#10;accepts relative URI references and returns true when they are equivalent. This of course assumes they will be&#10;resolved against the same base URI. If this is not the case, determination of equivalence or difference of&#10;relative references does not mean anything.&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-6.1&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri1&lt;/b&gt;: An URI to compare&#10;    UriInterface &lt;b&gt;$uri2&lt;/b&gt;: An URI to compare&#10;    int &lt;b&gt;$normalizations&lt;/b&gt;: A bitmask of normalizations to apply, see constants;;d4,176;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri1;;pUriInterface $uri2;;pint $normalizations;;p;;x;;x;;x">
</treenode>
<treenode node="normalize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriNormalizer.php;f18;119;5;158;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize(UriInterface $uri, $flags = self::PRESERVING_NORMALIZATIONS)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a normalized URI.&#10;The scheme and host component are already normalized to lowercase per PSR-7 UriInterface.&#10;This methods adds additional normalizations that can be configured with the $flags parameter.&#10;PSR-7 UriInterface cannot distinguish between an empty component and a missing component as&#10;getQuery(), getFragment() etc. always return a string. This means the URIs &quot;/?#&quot; and &quot;/&quot; are&#10;treated equivalent which is not necessarily true according to RFC 3986. But that difference&#10;is highly uncommon in reality. So this potential normalization is implied in PSR-7 as well.&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-6.2&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$uri&lt;/b&gt;: The URI to normalize&#10;    int &lt;b&gt;$flags&lt;/b&gt;: A bitmask of normalizations to apply, see constants&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The normalized URI;;d4,120;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $uri;;pint $flags;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UriResolver;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriResolver.php;f6;13;1;219;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UriResolver&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resolves a URI reference in the context of a base URI and the opposite way.&#10;&lt;b&gt;author&lt;/b&gt;: Tobias Schultze&#10;&lt;b&gt;link&lt;/b&gt;: https://tools.ietf.org/html/rfc3986#section-5;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriResolver.php;f12;215;5;218;;;;vpos;;v;;a;;r;;d4,216;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getRelativePath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriResolver.php;f19;182;5;213;;;;vpos;;v;;a;;r;;d4,183;;b3,5;;m0;;e0;;i0;;o;;k;;lbase;;ptarget;;p;;x;;x">
</treenode>
<treenode node="relativize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriResolver.php;f18;137;5;180;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    relativize(UriInterface $base, UriInterface $target)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the target URI as a relative reference from the base URI.&#10;This method is the counterpart to resolve():&#10;(string) $target === (string) UriResolver::resolve($base, UriResolver::relativize($base, $target))&#10;One use-case is to use the current request URI as base URI and then generate relative links in your documents&#10;to reduce the document size or offer self-contained downloadable document archives.&#10;$base = new Uri(&apos;http://example.com/a/b/&apos;);s&#10;echo UriResolver::relativize($base, new Uri(&apos;http://example.com/a/b/c&apos;));s  // prints &apos;c&apos;.&#10;echo UriResolver::relativize($base, new Uri(&apos;http://example.com/a/x/y&apos;));s  // prints &apos;../x/y&apos;.&#10;echo UriResolver::relativize($base, new Uri(&apos;http://example.com/a/b/?q&apos;));s // prints &apos;?q&apos;.&#10;echo UriResolver::relativize($base, new Uri(&apos;http://example.org/a/b/&apos;));s   // prints &apos;//example.org/a/b/&apos;.&#10;This method also accepts a target that is already relative and will try to relativize it further. Only a&#10;relative-path reference will be returned as-is.&#10;echo UriResolver::relativize($base, new Uri(&apos;/a/b/c&apos;));s  // prints &apos;c&apos; as well&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$base&lt;/b&gt;: Base URI&#10;    UriInterface &lt;b&gt;$target&lt;/b&gt;: Target URI&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The relative URI reference;;d4,138;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $base;;pUriInterface $target;;p;;x;;x">
</treenode>
<treenode node="removeDotSegments;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriResolver.php;f18;23;5;51;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    removeDotSegments($path)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes dot segments from a path and returns the new path.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc3986#section-5.2.4&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;;;d4,24;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $path;;p;;x">
</treenode>
<treenode node="resolve;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\UriResolver.php;f18;62;5;109;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resolve(UriInterface $base, UriInterface $rel)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts the relative URI into a new URI that is resolved against the base URI.&#10;&lt;b&gt;link&lt;/b&gt;: http://tools.ietf.org/html/rfc3986#section-5.2&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    UriInterface &lt;b&gt;$base&lt;/b&gt;: Base URI&#10;    UriInterface &lt;b&gt;$rel&lt;/b&gt;: Relative URI;;d4,63;;b1,5;;m0;;e0;;i0;;o;;k;;lUriInterface $base;;pUriInterface $rel;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UriTemplate;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\UriTemplate.php;f0;9;1;11;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate.php;f0;9;1;103;;;;vpos;;v;;aTemplate;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UriTemplate extends Template&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Future compatibility;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate.php;f11;19;5;24;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m0;;e0;;i0;;o;;k;;lbase_uri;;pparams;;pparser;;p;;x;;x;;x">
</treenode>
<treenode node="createNodeParser;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate.php;f14;93;5;102;;;;vpos;;v;;a;;r;;d4,94;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="expand;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate.php;f11;33;5;52;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expand($uri, $params = array())&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Expands URI Template&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;: URI Template&#10;    array &lt;b&gt;$params&lt;/b&gt;: URI Template&apos;s parameters;;d4,34;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;parray $params;;p;;x;;x">
</treenode>
<treenode node="extract;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate.php;f11;62;5;86;;;;vpos;;v;;anull|array;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    extract($template, $uri, $strict = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Extracts variables from URI&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$template&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    bool &lt;b&gt;$strict&lt;/b&gt;: This will perform a full match&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   params or null if not match and $strict is true;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $template;;pstring $uri;;pbool $strict;;p;;x;;x;;x">
</treenode>
<treenode node="getParser;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate.php;f11;88;5;91;;;;vpos;;v;;a;;r;;d4,89;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="UriTemplateTest;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f0;9;1;678;;;;vpos;;v;;aPHPUnit_Framework_TestCase;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UriTemplateTest extends \PHPUnit_Framework_TestCase&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    URI Template&#10;http://tools.ietf.org/html/rfc6570;;d0,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="dataBaseTemplate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;303;5;348;;;;vpos;;v;;a;;r;;d4,304;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dataExpandWithArrayModifier;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;250;5;301;;;;vpos;;v;;a;;r;;d4,251;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dataExpansion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;16;5;248;;;;vpos;;v;;a;;r;;d4,17;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dataExtractStrictMode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;504;5;617;;;;vpos;;v;;a;;r;;d4,505;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="dataExtraction;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;350;5;427;;;;vpos;;v;;a;;r;;d4,351;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="extractStrictModeNotMatchProvider;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;619;5;647;;;;vpos;;v;;a;;r;;d4,620;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="service;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;11;5;14;;;;vpos;;v;;a;;r;;d4,12;;b1,0;;m0;;e0;;i0;;o;;k;;luri;;pparams;;p;;x;;x">
</treenode>
<treenode node="testBaseTemplate;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;454;5;460;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testBaseTemplate($expected, $base, $other)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: dataBaseTemplate;;d4,455;;b1,0;;m0;;e0;;i0;;o;;k;;lexpected;;pbase;;pother;;p;;x;;x;;x">
</treenode>
<treenode node="testExpandFromFixture;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;473;5;502;;;;vpos;;v;;a;;r;;d4,474;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="testExpandWithArrayModifier;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;443;5;449;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testExpandWithArrayModifier($expected, $input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: dataExpandWithArrayModifier;;d4,444;;b1,0;;m0;;e0;;i0;;o;;k;;lexpected;;pinput;;p;;x;;x">
</treenode>
<treenode node="testExpansion;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;432;5;438;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testExpansion($expected, $input)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: dataExpansion;;d4,433;;b1,0;;m0;;e0;;i0;;o;;k;;lexpected;;pinput;;p;;x;;x">
</treenode>
<treenode node="testExtract;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;465;5;471;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testExtract($template, $uri, $expected)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: dataExtraction;;d4,466;;b1,0;;m0;;e0;;i0;;o;;k;;ltemplate;;puri;;pexpected;;p;;x;;x;;x">
</treenode>
<treenode node="testExtractStrictMode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;656;5;663;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testExtractStrictMode($template, $uri, array $expectedParams)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: dataExtractStrictMode&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$template&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$expectedParams&lt;/b&gt;;;d4,657;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $template;;pstring $uri;;parray $expectedParams;;p;;x;;x;;x">
</treenode>
<treenode node="testExtractStrictModeNotMatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\test\Rize\UriTemplateTest.php;f11;671;5;677;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    testExtractStrictModeNotMatch($template, $uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;dataProvider&lt;/b&gt;: extractStrictModeNotMatchProvider&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$template&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;;;d4,672;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $template;;pstring $uri;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UriTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\UriTrait.php;f0;26;1;63;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait UriTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides a light wrapper around often used URI related functions.;;d0,27;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="buildUriWithQuery;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\UriTrait.php;f11;46;5;62;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    buildUriWithQuery($uri, array $query)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$query&lt;/b&gt;;;d4,47;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;parray $query;;p;;x;;x">
</treenode>
<treenode node="expandUri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\UriTrait.php;f11;34;5;39;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    expandUri($uri, array $variables)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;todo&lt;/b&gt;: look at returning UriInterface&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$uri&lt;/b&gt;&#10;    array &lt;b&gt;$variables&lt;/b&gt;;;d4,35;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $uri;;parray $variables;;p;;x;;x">
</treenode>
</treenode>
<treenode node="UserRefreshCredentials;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\UserRefreshCredentials.php;f0;34;1;137;;;;vpos;;v;;aCredentialsLoader;;cGetQuotaProjectInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class UserRefreshCredentials extends CredentialsLoader implements GetQuotaProjectInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Authenticates requests using User Refresh credentials.&#10;This class allows authorizing requests from user refresh tokens.&#10;This the end of the result of a 3LO flow.  E.g, the end result of&#10;&apos;gcloud auth login&apos; saves a file with these contents in well known&#10;location&#10;&lt;b&gt;see&lt;/b&gt;: [Application Default Credentials](http://goo.gl/mkAHpZ);;d0,35;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\UserRefreshCredentials.php;f11;56;5;94;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(&#10;        $scope,&#10;        $jsonKey&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new UserRefreshCredentials.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$scope&lt;/b&gt;: the scope of the access request, expressed either as an Array or as a space-delimited String.&#10;    string|array &lt;b&gt;$jsonKey&lt;/b&gt;: JSON credential file path or JSON credentials as an associative array;;d6,59;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $scope;;pstring|array $jsonKey;;p;;x;;x">
</treenode>
<treenode node="fetchAuthToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\UserRefreshCredentials.php;f11;107;5;110;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    fetchAuthToken(callable $httpHandler = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$httpHandler&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   A set of auth related metadata, containing the following keys: - access_token (string) - expires_in (int) - scope (string) - token_type (string) - id_token (string);;d4,108;;b1,0;;m0;;e0;;i0;;o;;k;;lcallable $httpHandler;;p;;x">
</treenode>
<treenode node="getCacheKey;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\UserRefreshCredentials.php;f11;115;5;118;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCacheKey()&#10;;;d4,116;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLastReceivedToken;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\UserRefreshCredentials.php;f11;123;5;126;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReceivedToken()&#10;;;d4,124;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getQuotaProject;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\src\Credentials\UserRefreshCredentials.php;f11;133;5;136;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getQuotaProject()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the quota project used for this API request&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d4,134;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="Util;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Curl\Util.php;f6;20;1;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Util&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    This class is marked as internal and it is not under the BC promise of the package.&#10;&lt;b&gt;internal&lt;/b&gt;;;d0,21;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="execute;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\Curl\Util.php;f18;40;5;68;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    execute($ch, int $retries = 5, bool $closeAfterDone = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Executes a CURL request with optional retries and exception on failure&#10;&lt;b&gt;see&lt;/b&gt;: curl_exec&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource|CurlHandle &lt;b&gt;$ch&lt;/b&gt;: curl handler&#10;    int &lt;b&gt;$retries&lt;/b&gt;&#10;    bool &lt;b&gt;$closeAfterDone&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |string;;d4,41;;b1,5;;m0;;e0;;i0;;o;;k;;lresource|CurlHandle $ch;;pint $retries;;pbool $closeAfterDone;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="Utils;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f6;13;1;195;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f6;9;1;397;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f6;4;1;273;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f6;11;1;386;;;;vpos;;v;;a;;r;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="DEFAULT_JSON_FLAGS;PHP:PHP Word;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f9;15;28;15;;;;vpos;;v;;a;;rJSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRESERVE_ZERO_FRACTION | JSON_INVALID_UTF8_SUBSTITUTE | JSON_PARTIAL_OUTPUT_ON_ERROR;;d-1,-1;;b0,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="all;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;150;5;178;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    all($promises, $recursive = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Given an array of promises, return a promise that is fulfilled when all&#10;the items in the array are fulfilled.&#10;The promise&apos;s fulfillment value is an array with fulfillment values at&#10;respective positions to the original array. If any promise in the array&#10;rejects, the returned promise is rejected with the rejection reason.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.&#10;    bool &lt;b&gt;$recursive&lt;/b&gt;: If true, resolves new promises that might have been added to the stack during its own resolution.;;d4,151;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $promises;;pbool $recursive;;p;;x;;x">
</treenode>
<treenode node="any;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;237;5;242;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    any($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Like some(), with 1 as count. However, if the promise fulfills, the&#10;fulfillment value is not an array of 1 but the value directly.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.;;d4,238;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $promises;;p;;x">
</treenode>
<treenode node="canonicalizePath;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f18;38;5;59;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    canonicalizePath(string $streamUrl): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Makes sure if a relative path is passed in it is turned into an absolute path&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$streamUrl&lt;/b&gt;: stream URL or path without protocol;;d4,39;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $streamUrl;;p;;x">
</treenode>
<treenode node="caselessRemove;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;18;5;33;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    caselessRemove($keys, array $data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Remove the items given by the keys, case insensitively from the data.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    iterable&lt;string&gt; &lt;b&gt;$keys&lt;/b&gt;;;d4,19;;b1,5;;m0;;e0;;i0;;o;;k;;lkeys;;pdata;;p;;x;;x">
</treenode>
<treenode node="chooseHandler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;90;5;110;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    chooseHandler(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Chooses and creates a default handler to use based on the environment.&#10;The returned handler is not wrapped by any default middlewares.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if no viable Handler is available.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (\Psr\Http\Message\RequestInterface, array): \GuzzleHttp\Promise\PromiseInterface Returns the best handler for the given system.;;d4,91;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="copyToStream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;46;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    copyToStream(StreamInterface $source, StreamInterface $dest, $maxLen = -1)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copy the contents of a stream into another stream until the given number&#10;of bytes have been read.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$source&lt;/b&gt;: Stream to read from&#10;    StreamInterface &lt;b&gt;$dest&lt;/b&gt;: Stream to write to&#10;    int &lt;b&gt;$maxLen&lt;/b&gt;: Maximum number of bytes to read. Pass -1 to read the entire stream.;;d4,47;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $source;;pStreamInterface $dest;;pint $maxLen;;p;;x;;x;;x">
</treenode>
<treenode node="copyToString;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;81;5;109;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    copyToString(StreamInterface $stream, $maxLen = -1)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copy the contents of a stream into a string until the given number of&#10;bytes have been read.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to read&#10;    int &lt;b&gt;$maxLen&lt;/b&gt;: Maximum number of bytes to read. Pass -1 to read the entire stream.;;d4,82;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pint $maxLen;;p;;x;;x">
</treenode>
<treenode node="currentTime;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;315;5;318;;;;vpos;;v;;afloat;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    currentTime(): float&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper for the hrtime() or microtime() functions&#10;(depending on the PHP version, one of the two is used)&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   UNIX timestamp;;d4,316;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="debugResource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;64;5;79;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    debugResource($value = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a debug stream based on the provided variable.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: Optional value;;d4,65;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="defaultCaBundle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;135;5;190;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    defaultCaBundle(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the default cacert bundle for the current system.&#10;First, the openssl.cafile and curl.cainfo php.ini settings are checked.&#10;If those settings are not configured, then the common locations for&#10;bundles found on Red Hat, CentOS, Fedora, Ubuntu, Debian, FreeBSD, OS X&#10;and Windows are checked. If any of these file locations are found on&#10;disk, they will be utilized.&#10;Note: the result of this function is cached for subsequent calls.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if no bundle can be found.&#10;&lt;b&gt;deprecated&lt;/b&gt;: Utils::defaultCaBundle will be removed in guzzlehttp/guzzle:8.0. This method is not needed in PHP 5.6+.;;d4,136;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="defaultUserAgent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;115;5;118;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    defaultUserAgent(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the default User-Agent string to use with Guzzle.;;d4,116;;b1,5;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="describeType;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;21;5;37;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    describeType($input): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug function used to describe the provided value type and class.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$input&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a string containing the type of the variable and if a class is provided, the class name.;;d4,22;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $input;;p;;x">
</treenode>
<treenode node="detectAndCleanUtf8;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f19;178;5;194;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    detectAndCleanUtf8(&amp;$data): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detect invalid UTF-8 string characters and convert to valid UTF-8.&#10;Valid UTF-8 input will be left unmodified, but strings containing&#10;invalid UTF-8 codepoints will be reencoded as UTF-8 with an assumed&#10;original encoding of ISO-8859-15. This conversion may result in&#10;incorrect output if the actual encoding was not ISO-8859-15, but it&#10;will be clean UTF-8 output and will not rely on expensive and fragile&#10;detection algorithms.&#10;Function converts the input in place in the passed variable so that it&#10;can be used as a callback for array_walk_recursive.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;: Input to check and convert if needed, passed by ref;;d4,179;;b3,5;;m0;;e0;;i0;;o;;k;;lmixed $data;;p;;x">
</treenode>
<treenode node="getClass;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f18;17;5;22;;;;vpos;;v;;a string;;r;;d4,18;;b1,5;;m0;;e0;;i0;;o;;k;;lobject;;p;;x">
</treenode>
<treenode node="getenv;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;362;48;362;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;internal&lt;/b&gt;;;d-1,-1;;b1,5;;m0;;e0;;i0;;o;;k;;lname;;p;;x">
</treenode>
<treenode node="handleJsonError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f18;107;5;132;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleJsonError(int $code, $data, ?int $encodeFlags = null): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handle a json_encode failure.&#10;If the failure is due to invalid string encoding, try to clean the&#10;input and encode again. If the second encoding attempt fails, the&#10;initial error is not encoding related or the input can&apos;t be cleaned then&#10;raise a descriptive exception.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if failure can&apos;t be corrected&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$code&lt;/b&gt;: return code of json_last_error function&#10;    mixed &lt;b&gt;$data&lt;/b&gt;: data that was meant to be encoded&#10;    int &lt;b&gt;$encodeFlags&lt;/b&gt;: flags to pass to json encode, defaults to JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRESERVE_ZERO_FRACTION&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   JSON encoded data after error correction;;d4,108;;b1,5;;m0;;e0;;i0;;o;;k;;lint $code;;pmixed $data;;pint $encodeFlags;;p;;x;;x;;x">
</treenode>
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;125;5;142;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hash(StreamInterface $stream, $algo, $rawOutput = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Calculate a hash of a stream.&#10;This method reads the entire stream to calculate a rolling hash, based&#10;on PHP&apos;s `hash_init` functions.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to calculate the hash for&#10;    string &lt;b&gt;$algo&lt;/b&gt;: Hash algorithm (e.g. md5, crc32, etc)&#10;    bool &lt;b&gt;$rawOutput&lt;/b&gt;: Whether or not to use raw output&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the hash of the stream;;d4,126;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pstring $algo;;pbool $rawOutput;;p;;x;;x;;x">
</treenode>
<treenode node="headersFromLines;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;45;5;55;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headersFromLines(iterable $lines): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses an array of header lines into an associative array of headers.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    iterable &lt;b&gt;$lines&lt;/b&gt;: Header lines array of strings in the following format: &quot;Name: Value&quot;;;d4,46;;b1,5;;m0;;e0;;i0;;o;;k;;literable $lines;;p;;x">
</treenode>
<treenode node="idnToAsci;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f19;378;5;385;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    idnToAsci(string $domain, int $options, ?array &amp;$info = [])&#10;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |false;;d4,379;;b3,5;;m0;;e0;;i0;;o;;k;;ldomain;;poptions;;pinfo;;p;;x;;x;;x">
</treenode>
<treenode node="idnUriConvert;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;325;5;357;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    idnUriConvert(UriInterface $uri, int $options = 0): UriInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,326;;b1,5;;m0;;e0;;i0;;o;;k;;luri;;poptions;;p;;x;;x">
</treenode>
<treenode node="inspect;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;75;5;89;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    inspect(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Synchronously waits on a promise to resolve and returns an inspection&#10;state array.&#10;Returns a state associative array containing a &quot;state&quot; key mapping to a&#10;valid promise state. If the state of the promise is &quot;fulfilled&quot;, the&#10;array will contain a &quot;value&quot; key mapping to the fulfilled value of the&#10;promise. If the promise is rejected, the array will contain a &quot;reason&quot;&#10;key mapping to the rejection reason of the promise.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    PromiseInterface &lt;b&gt;$promise&lt;/b&gt;: Promise or value.;;d4,76;;b1,5;;m0;;e0;;i0;;o;;k;;lPromiseInterface $promise;;p;;x">
</treenode>
<treenode node="inspectAll;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;103;5;111;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    inspectAll($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Waits on all of the provided promises, but does not unwrap rejected&#10;promises as thrown exception.&#10;Returns an array of inspection state arrays.&#10;&lt;b&gt;see&lt;/b&gt;: inspect for the inspection state array format.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    PromiseInterface[] &lt;b&gt;$promises&lt;/b&gt;: Traversable of promises to wait upon.;;d4,104;;b1,5;;m0;;e0;;i0;;o;;k;;lPromiseInterface[] $promises;;p;;x">
</treenode>
<treenode node="isHostInNoProxy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;225;5;258;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHostInNoProxy(string $host, array $noProxyArray): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if the provided host matches any of the no proxy areas.&#10;This method will strip a port from the host if it is present. Each pattern&#10;can be matched with an exact match (e.g., &quot;foo.com&quot; == &quot;foo.com&quot;) or a&#10;partial match: (e.g., &quot;foo.com&quot; == &quot;baz.foo.com&quot; and &quot;.foo.com&quot; ==&#10;&quot;baz.foo.com&quot;, but &quot;.foo.com&quot; != &quot;foo.com&quot;).&#10;Areas are matched in the following cases:&#10;1. &quot;*&quot; (without quotes) always matches any hosts.&#10;2. An exact match.&#10;3. The area starts with &quot;.&quot; and the area is the last part of the host. e.g.&#10;&apos;.mit.edu&apos; will match any host that ends with &apos;.mit.edu&apos;.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: Host to check against the patterns.&#10;    string[] &lt;b&gt;$noProxyArray&lt;/b&gt;: An array of host patterns.;;d4,226;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $host;;pstring[] $noProxyArray;;p;;x;;x">
</treenode>
<treenode node="jsonDecode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;275;5;283;;;;vpos;;v;;aobject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonDecode(string $json, bool $assoc = false, int $depth = 512, int $options = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper for json_decode that throws when an error occurs.&#10;&lt;b&gt;throws&lt;/b&gt;: InvalidArgumentException if the JSON cannot be decoded.&#10;&lt;b&gt;link&lt;/b&gt;: https://www.php.net/manual/en/function.json-decode.php&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$json&lt;/b&gt;: JSON data to parse&#10;    bool &lt;b&gt;$assoc&lt;/b&gt;: When true, returned objects will be converted into associative arrays.&#10;    int &lt;b&gt;$depth&lt;/b&gt;: User specified recursion depth.&#10;    int &lt;b&gt;$options&lt;/b&gt;: Bitmask of JSON decode options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |array|string|int|float|bool|null;;d4,276;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $json;;pbool $assoc;;pint $depth;;pint $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="jsonEncode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f18;70;5;91;;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;296;5;305;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    jsonEncode($data, ?int $encodeFlags = null, bool $ignoreErrors = false): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the JSON representation of a value&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if encoding fails and errors are not ignored&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$data&lt;/b&gt;&#10;    int &lt;b&gt;$encodeFlags&lt;/b&gt;: flags to pass to json encode, defaults to DEFAULT_JSON_FLAGS&#10;    bool &lt;b&gt;$ignoreErrors&lt;/b&gt;: whether to ignore encoding errors or to throw on error, when ignored and the encoding fails, &quot;null&quot; is returned which is valid json for null&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   when errors are ignored and the encoding fails, &quot;null&quot; is returned which is valid json for null;;d4,71;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $data;;pint $encodeFlags;;pbool $ignoreErrors;;p;;x;;x;;x">
</treenode>
<treenode node="modifyRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;164;5;229;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    modifyRequest(RequestInterface $request, array $changes)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clone and modify a request with the given changes.&#10;This method is useful for reducing the number of clones needed to mutate&#10;a message.&#10;The changes can be one of:&#10;- method: (string) Changes the HTTP method.&#10;- set_headers: (array) Sets the given headers.&#10;- remove_headers: (array) Remove the given headers.&#10;- body: (mixed) Sets the given body.&#10;- uri: (UriInterface) Set the URI.&#10;- query: (string) Set the query string value of the URI.&#10;- version: (string) Set the protocol version.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request to clone and modify.&#10;    array &lt;b&gt;$changes&lt;/b&gt;: Changes to apply.;;d4,165;;b1,5;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $changes;;p;;x;;x">
</treenode>
<treenode node="normalizeHeaderKeys;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\Utils.php;f18;196;5;204;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeHeaderKeys(array $headers): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates an associative array of lowercase header names to the actual&#10;header casing.;;d4,197;;b1,5;;m0;;e0;;i0;;o;;k;;lheaders;;p;;x">
</treenode>
<treenode node="queue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;23;5;34;;;;vpos;;v;;aTaskQueueInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    queue(TaskQueueInterface $assign = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the global task queue used for promise resolution.&#10;This task queue MUST be run in an event loop in order for promises to be&#10;settled asynchronously. It will be automatically run when synchronously&#10;waiting on a promise.&#10;&lt;code&gt;&#10;while ($eventLoop-&gt;isRunning()) {&#10;GuzzleHttp\Promise\Utils::queue()-&gt;run();s&#10;}&#10;&lt;/code&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    TaskQueueInterface &lt;b&gt;$assign&lt;/b&gt;: Optionally specify a new queue instance.;;d4,24;;b1,5;;m0;;e0;;i0;;o;;k;;lTaskQueueInterface $assign;;p;;x">
</treenode>
<treenode node="readLine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;239;5;257;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    readLine(StreamInterface $stream, $maxLength = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read a line from the stream up to the maximum allowed buffer length.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to read from&#10;    int|null &lt;b&gt;$maxLength&lt;/b&gt;: Maximum buffer length;;d4,240;;b1,5;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pint|null $maxLength;;p;;x;;x">
</treenode>
<treenode node="settle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;256;5;272;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    settle($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a promise that is fulfilled when all of the provided promises have&#10;been fulfilled or rejected.&#10;The returned promise is fulfilled with an array of inspection state arrays.&#10;&lt;b&gt;see&lt;/b&gt;: inspect for the inspection state array format.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.;;d4,257;;b1,5;;m0;;e0;;i0;;o;;k;;lmixed $promises;;p;;x">
</treenode>
<treenode node="some;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;196;5;227;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    some($count, $promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initiate a competitive race between multiple promises or values (values&#10;will become immediately fulfilled promises).&#10;When count amount of promises have been fulfilled, the returned promise&#10;is fulfilled with an array that contains the fulfillment values of the&#10;winners in order of resolution.&#10;This promise is rejected with a {&#10;&lt;b&gt;see&lt;/b&gt;: AggregateException} if the number&#10;of fulfilled promises is less than the desired $count.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$count&lt;/b&gt;: Total number of promises.&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.;;d4,197;;b1,5;;m0;;e0;;i0;;o;;k;;lint $count;;pmixed $promises;;p;;x;;x">
</treenode>
<treenode node="streamFor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;295;5;334;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    streamFor($resource = &apos;&apos;, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new stream based on the input type.&#10;Options is an associative array that can contain the following keys:&#10;- metadata: Array of custom metadata.&#10;- size: Size of the stream.&#10;This method accepts the following `$resource` types:&#10;- `Psr\Http\Message\StreamInterface`: Returns the value as-is.&#10;- `string`: Creates a stream object that uses the given string as the contents.&#10;- `resource`: Creates a stream object that wraps the given PHP stream resource.&#10;- `Iterator`: If the provided value implements `Iterator`, then a read-only&#10;stream object will be created that wraps the given iterable. Each time the&#10;stream is read from, data from the iterator will fill a buffer and will be&#10;continuously called until the buffer is equal to the requested read size.&#10;Subsequent read calls will first read from the buffer and then call `next`&#10;on the underlying iterator until it is exhausted.&#10;- `object` with `__toString()`: If the object has the `__toString()` method,&#10;the object will be cast to a string and then a stream will be returned that&#10;uses the string value.&#10;- `NULL`: When `null` is passed, an empty stream object is returned.&#10;- `callable` When a callable is passed, a read-only stream object will be&#10;created that invokes the given callable. The callable is invoked with the&#10;number of suggested bytes to read. The callable can return any number of&#10;bytes, but MUST return `false` when there is no more data to return. The&#10;stream object that wraps the callable will invoke the callable until the&#10;number of requested bytes are available. Any additional bytes will be&#10;buffered and used in subsequent reads.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if the $resource arg is not valid.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource|string|null|int|float|bool|StreamInterface|callable|\Iterator &lt;b&gt;$resource&lt;/b&gt;: Entity body data&#10;    array &lt;b&gt;$options&lt;/b&gt;: Additional options;;d4,296;;b1,5;;m0;;e0;;i0;;o;;k;;lresource|string|null|int|float|bool|StreamInterface|callable|\Iterator $resource;;parray $options;;p;;x;;x">
</treenode>
<treenode node="substr;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f18;24;5;31;;;;vpos;;v;;a string;;r;;d4,25;;b1,5;;m0;;e0;;i0;;o;;k;;lstring;;pstart;;plength;;p;;x;;x;;x">
</treenode>
<treenode node="task;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;44;5;59;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    task(callable $task)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a function to run in the task queue when it is next `run()` and&#10;returns a promise that is fulfilled or rejected with the result.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$task&lt;/b&gt;: Task function to run.;;d4,45;;b1,5;;m0;;e0;;i0;;o;;k;;lcallable $task;;p;;x">
</treenode>
<treenode node="throwEncodeError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Utils.php;f19;141;5;161;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    throwEncodeError(int $code, $data): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Throws an exception according to a given code with a customized message&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$code&lt;/b&gt;: return code of json_last_error function&#10;    mixed &lt;b&gt;$data&lt;/b&gt;: data that was meant to be encoded;;d4,142;;b3,5;;m0;;e0;;i0;;o;;k;;lint $code;;pmixed $data;;p;;x;;x">
</treenode>
<treenode node="tryFopen;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;349;5;370;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    tryFopen($filename, $mode)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Safely opens a PHP stream resource using a filename.&#10;When fopen fails, PHP normally raises a warning. This function adds an&#10;error handler that checks for errors and throws an exception instead.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the file cannot be opened&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;: File to open&#10;    string &lt;b&gt;$mode&lt;/b&gt;: Mode used to open the file;;d4,350;;b1,5;;m0;;e0;;i0;;o;;k;;lstring $filename;;pstring $mode;;p;;x;;x">
</treenode>
<treenode node="unwrap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\Utils.php;f18;127;5;135;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unwrap($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Waits on all of the provided promises and returns the fulfilled values.&#10;Returns an array that contains the value of each promise (in the same&#10;order the promises were provided). An exception is thrown if any of the&#10;promises are rejected.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception on error&#10;&lt;b&gt;throws&lt;/b&gt;: \Throwable on error in PHP &gt;=7&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    iterable&lt;PromiseInterface&gt; &lt;b&gt;$promises&lt;/b&gt;: Iterable of PromiseInterface objects to wait on.;;d4,128;;b1,5;;m0;;e0;;i0;;o;;k;;literable&lt;PromiseInterface&gt; $promises;;p;;x">
</treenode>
<treenode node="uriFor;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\Utils.php;f18;385;5;396;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uriFor($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a UriInterface for the given value.&#10;This function accepts a string or UriInterface and returns a&#10;UriInterface for the given value. If the value is already a&#10;UriInterface, it is returned as-is.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d4,386;;b1,5;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;p;;x">
</treenode>
</treenode>
<treenode node="ValidateTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ValidateTrait.php;f0;24;1;74;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ValidateTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Methods for validating and verifying data;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="arrayHasKeys;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ValidateTrait.php;f12;63;5;73;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    arrayHasKeys(array $input, array $keys)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check that the given $input array contains each of given $keys.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$input&lt;/b&gt;: The input to validate.&#10;    array &lt;b&gt;$keys&lt;/b&gt;: A list of keys to verify in $input.;;d4,64;;b3,0;;m0;;e0;;i0;;o;;k;;larray $input;;parray $keys;;p;;x;;x">
</treenode>
<treenode node="validateBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ValidateTrait.php;f12;36;5;53;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    validateBatch(&#10;        array $input,&#10;        $type,&#10;        callable $additionalCheck = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check that each member of $input array is of type $type.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$input&lt;/b&gt;: The input to validate.&#10;    string &lt;b&gt;$type&lt;/b&gt;: The type to check.&#10;    callable: [optional] An additional check for each element of $input. This will be run count($input) times, so use with care.;;d6,40;;b3,0;;m0;;e0;;i0;;o;;k;;larray $input;;pstring $type;;pcallable;;p;;x;;x;;x">
</treenode>
</treenode>
<treenode node="ValueMapperTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ValueMapperTrait.php;f0;22;1;54;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait ValueMapperTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provides common value mapping methods.;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="createTimestampWithNanos;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\ValueMapperTrait.php;f11;38;5;53;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createTimestampWithNanos($timestamp, $returnType = Timestamp::class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a timestamp (represented as a string or an array) to a Timestamp&#10;class with nanosecond support.&#10;&lt;b&gt;deprecated&lt;/b&gt;: Use methods on {&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\TimeTrait}.&#10;&lt;b&gt;see&lt;/b&gt;: Google\Cloud\Core\Timestamp}.&#10;**Defaults to** `Google\Cloud\Core\Timestamp`.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$timestamp&lt;/b&gt;: The timestamp as a string or an array.&#10;    string &lt;b&gt;$returnType&lt;/b&gt;: The type to create and return. Any object used must provide a constructor compatible with {;;d4,39;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|array $timestamp;;pstring $returnType;;p;;x;;x">
</treenode>
</treenode>
<treenode node="Variable;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Variable.php;f0;7;1;32;;;;vpos;;v;;aAbstraction;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Variable extends Abstraction&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Description;;d0,8;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\rize\uri-template\src\Rize\UriTemplate\Node\Variable.php;f11;19;5;31;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m0;;e0;;i0;;o;;k;;ltoken;;poptions;;p;;x;;x">
</treenode>
</treenode>
<treenode node="WebProcessor;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\WebProcessor.php;f0;18;1;99;;;;vpos;;v;;aProcessorInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class WebProcessor implements ProcessorInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Injects url/method and remote IP of the current web request in all records&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\WebProcessor.php;f11;44;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($serverData = null, array $extraFields = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array|\ArrayAccess|null &lt;b&gt;$serverData&lt;/b&gt;: Array or object w/ ArrayAccess that provides access to the $_SERVER data&#10;    array|null &lt;b&gt;$extraFields&lt;/b&gt;: Field names and the related key inside $serverData to be added. If not provided it defaults to: url, ip, http_method, server, referrer;;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;larray|\ArrayAccess|null $serverData;;parray|null $extraFields;;p;;x;;x">
</treenode>
<treenode node="__invoke;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\WebProcessor.php;f11;71;5;82;;;;vpos;;v;;a array;;r;;d4,72;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="addExtraField;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\WebProcessor.php;f11;84;5;89;;;;vpos;;v;;a self;;r;;d4,85;;b1,0;;m0;;e0;;i0;;o;;k;;lextraName;;pserverName;;p;;x;;x">
</treenode>
<treenode node="appendExtraFields;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Processor\WebProcessor.php;f12;91;5;98;;;;vpos;;v;;a array;;r;;d4,92;;b3,0;;m0;;e0;;i0;;o;;k;;lextra;;p;;x">
</treenode>
</treenode>
<treenode node="WebRequestRecognizerTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\WebRequestRecognizerTrait.php;f0;13;1;23;;;;vpos;;v;;a;;r;;d0,14;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="isWebRequest;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\WebRequestRecognizerTrait.php;f14;19;5;22;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isWebRequest(): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks if PHP&apos;s serving a web request;;d4,20;;b2,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</treenode>
<treenode node="WhatFailureGroupHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\WhatFailureGroupHandler.php;f0;19;1;62;;;;vpos;;v;;aGroupHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class WhatFailureGroupHandler extends GroupHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Forwards records to multiple handlers suppressing failures of each handler&#10;and continuing through to give every handler a chance to succeed.&#10;&lt;b&gt;author&lt;/b&gt;: Craig D&apos;Amelio &lt;craig&#10;&lt;b&gt;damelio&lt;/b&gt;: .ca&gt;;;d0,20;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="handle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\WhatFailureGroupHandler.php;f11;24;5;39;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handle(array $record): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,25;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="handleBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\WhatFailureGroupHandler.php;f11;44;5;61;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    handleBatch(array $records): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,45;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
</treenode>
<treenode node="WhitelistTrait;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\WhitelistTrait.php;f0;24;1;38;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    trait WhitelistTrait&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Manages exceptions for requests which may have whitelist restrictions.;;d0,25;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="modifyWhitelistedError;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\WhitelistTrait.php;f12;32;5;37;;;;vpos;;v;;aNotFoundException;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    modifyWhitelistedError(NotFoundException $e)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Modify the error message of a whitelisted exception.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    NotFoundException &lt;b&gt;$e&lt;/b&gt;: The exception.;;d4,33;;b3,0;;m0;;e0;;i0;;o;;k;;lNotFoundException $e;;p;;x">
</treenode>
</treenode>
<treenode node="WildfireFormatter;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\WildfireFormatter.php;f0;22;1;128;;;;vpos;;v;;aNormalizerFormatter;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class WildfireFormatter extends NormalizerFormatter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Serializes a log message according to Wildfire&apos;s header requirements&#10;&lt;b&gt;author&lt;/b&gt;: Eric Clemmons (&#10;&lt;b&gt;ericclemmons&lt;/b&gt;: ) &lt;eric&#10;&lt;b&gt;uxdriven&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Christophe Coevoet &lt;stof&#10;&lt;b&gt;notk&lt;/b&gt;: .org&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Kirill chEbba Chebunin &lt;iam&#10;&lt;b&gt;chebba&lt;/b&gt;: .org&gt;;;d0,23;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\WildfireFormatter.php;f11;41;5;47;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(?string $dateFormat = null)&#10;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$dateFormat&lt;/b&gt;: The format of the timestamp: one supported by DateTime::format;;d4,42;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|null $dateFormat;;p;;x">
</treenode>
<treenode node="format;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\WildfireFormatter.php;f11;52;5;106;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    format(array $record): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,53;;b1,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="formatBatch;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\WildfireFormatter.php;f11;111;5;114;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    formatBatch(array $records)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,112;;b1,0;;m0;;e0;;i0;;o;;k;;lrecords;;p;;x">
</treenode>
<treenode node="normalize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Formatter\WildfireFormatter.php;f14;120;5;127;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize($data, int $depth = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: }&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |bool|string|null|array|object;;d4,121;;b2,0;;m0;;e0;;i0;;o;;k;;ldata;;pdepth;;p;;x;;x">
</treenode>
</treenode>
<treenode node="WriteStream;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\WriteStream.php;f0;28;1;109;;;;vpos;;v;;aStreamInterface;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class WriteStream implements StreamInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A Stream implementation that uploads in chunks to a provided uploader when&#10;we reach a certain chunkSize. Upon `close`, we will upload the remaining chunk.;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\WriteStream.php;f11;48;5;57;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct(AbstractUploader $uploader = null, $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new WriteStream instance&#10;&lt;b&gt;type&lt;/b&gt;: int $chunkSize The size of the buffer above which we attempt to&#10;upload data&#10;}&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    AbstractUploader &lt;b&gt;$uploader&lt;/b&gt;: The uploader to use.&#10;    array &lt;b&gt;$options&lt;/b&gt;: [optional] { Configuration options.;;d4,49;;b1,0;;m0;;e0;;i0;;o;;k;;lAbstractUploader $uploader;;parray $options;;p;;x;;x">
</treenode>
<treenode node="close;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\WriteStream.php;f11;62;5;68;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Close the stream. Uploads any remaining data.;;d4,63;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getChunkedWriteSize;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\WriteStream.php;f12;105;5;108;;;;vpos;;v;;a;;r;;d4,106;;b3,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="setUploader;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\WriteStream.php;f11;100;5;103;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUploader($uploader)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the uploader for this class. You may need to set this after initialization&#10;if the uploader depends on this stream.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    AbstractUploader &lt;b&gt;$uploader&lt;/b&gt;: The new uploader to use.;;d4,101;;b1,0;;m0;;e0;;i0;;o;;k;;lAbstractUploader $uploader;;p;;x">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-storage\src\WriteStream.php;f11;77;5;92;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write($data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Write to the stream. If we pass the chunkable size, upload the available chunk.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$data&lt;/b&gt;: Data to write&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The number of bytes written;;d4,78;;b1,0;;m0;;e0;;i0;;o;;k;;lstring $data;;p;;x">
</treenode>
</treenode>
<treenode node="ZendMonitorHandler;PHP:Class Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ZendMonitorHandler.php;f0;23;1;95;;;;vpos;;v;;aAbstractProcessingHandler;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ZendMonitorHandler extends AbstractProcessingHandler&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Handler sending logs to Zend Monitor&#10;&lt;b&gt;author&lt;/b&gt;: Christian Bergau &lt;cbergau86&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jason Davis &lt;happydude&#10;&lt;b&gt;jasondavis&lt;/b&gt;: .net&gt;;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;l">
<treenode node="__construct;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ZendMonitorHandler.php;f11;37;5;56;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($level = Logger::DEBUG, bool $bubble = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;throws&lt;/b&gt;: MissingExtensionException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|int &lt;b&gt;$level&lt;/b&gt;: The minimum logging level at which this handler will be triggered.&#10;    bool &lt;b&gt;$bubble&lt;/b&gt;: Whether the messages that are handled can bubble up the stack or not.;;d4,38;;b1,0;;m0;;e0;;i0;;o;;k;;lstring|int $level;;pbool $bubble;;p;;x;;x">
</treenode>
<treenode node="getDefaultFormatter;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ZendMonitorHandler.php;f11;86;5;89;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDefaultFormatter(): FormatterInterface&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,87;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="getLevelMap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ZendMonitorHandler.php;f11;91;5;94;;;;vpos;;v;;a array;;r;;d4,92;;b1,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="write;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ZendMonitorHandler.php;f14;61;5;69;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    write(array $record): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    {&#10;&lt;b&gt;inheritdoc&lt;/b&gt;: };;d4,62;;b2,0;;m0;;e0;;i0;;o;;k;;lrecord;;p;;x">
</treenode>
<treenode node="writeZendMonitorCustomEvent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\monolog\monolog\src\Monolog\Handler\ZendMonitorHandler.php;f14;78;5;81;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    writeZendMonitorCustomEvent(string $type, string $message, array $formatted, int $severity): void&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Write to Zend Monitor Events&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$type&lt;/b&gt;: Text displayed in &quot;Class Name (custom)&quot; field&#10;    string &lt;b&gt;$message&lt;/b&gt;: Text displayed in &quot;Error String&quot;&#10;    array &lt;b&gt;$formatted&lt;/b&gt;: Displayed in Custom Variables tab&#10;    int &lt;b&gt;$severity&lt;/b&gt;: Set the event severity level (-1,0,1);;d4,79;;b2,0;;m0;;e0;;i0;;o;;k;;lstring $type;;pstring $message;;parray $formatted;;pint $severity;;p;;x;;x;;x;;x">
</treenode>
</treenode>
<treenode node="_caseless_remove;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;413;1;416;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _caseless_remove($keys, array $data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Remove the items given by the keys, case insensitively from the data.&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&lt;b&gt;deprecated&lt;/b&gt;: _caseless_remove will be removed in guzzlehttp/psr7:2.0. Use Utils::caselessRemove instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    iterable&lt;string&gt; &lt;b&gt;$keys&lt;/b&gt;;;d0,414;;b0,0;;m0;;e0;;i0;;o;;k;;lkeys;;pdata;;p;;x;;x">
</treenode>
<treenode node="_parse_message;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;365;1;368;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _parse_message($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses an HTTP message into an associative array.&#10;The array contains the &quot;start-line&quot; key containing the start line of&#10;the message, &quot;headers&quot; key containing an associative array of header&#10;array values, and a &quot;body&quot; key containing the body of the message.&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&lt;b&gt;deprecated&lt;/b&gt;: _parse_message will be removed in guzzlehttp/psr7:2.0. Use Message::parseMessage instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: HTTP request or response to parse.;;d0,366;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="_parse_request_uri;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;381;1;384;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _parse_request_uri($path, array $headers)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Constructs a URI for an HTTP request message.&#10;&lt;b&gt;internal&lt;/b&gt;&#10;&lt;b&gt;deprecated&lt;/b&gt;: _parse_request_uri will be removed in guzzlehttp/psr7:2.0. Use Message::parseRequestUri instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: Path from the start-line&#10;    array &lt;b&gt;$headers&lt;/b&gt;: Array of headers (each value an array).;;d0,382;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $path;;parray $headers;;p;;x;;x">
</treenode>
<treenode node="all;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;176;1;179;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    all($promises, $recursive = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Given an array of promises, return a promise that is fulfilled when all the&#10;items in the array are fulfilled.&#10;The promise&apos;s fulfillment value is an array with fulfillment values at&#10;respective positions to the original array. If any promise in the array&#10;rejects, the returned promise is rejected with the rejection reason.&#10;&lt;b&gt;deprecated&lt;/b&gt;: all will be removed in guzzlehttp/promises:2.0. Use Utils::all instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.&#10;    bool &lt;b&gt;$recursive&lt;/b&gt;: If true, resolves new promises that might have been added to the stack during its own resolution.;;d0,177;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $promises;;pbool $recursive;;p;;x;;x">
</treenode>
<treenode node="any;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;214;1;217;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    any($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Like some(), with 1 as count. However, if the promise fulfills, the&#10;fulfillment value is not an array of 1 but the value directly.&#10;&lt;b&gt;deprecated&lt;/b&gt;: any will be removed in guzzlehttp/promises:2.0. Use Utils::any instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.;;d0,215;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $promises;;p;;x">
</treenode>
<treenode node="build_query;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;317;1;320;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    build_query(array $params, $encoding = PHP_QUERY_RFC3986)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Build a query string from an array of key value pairs.&#10;This function can use the return value of `parse_query()` to build a query&#10;string. This function does not modify the provided keys when an array is&#10;encountered (like `http_build_query()` would).&#10;&lt;b&gt;deprecated&lt;/b&gt;: build_query will be removed in guzzlehttp/psr7:2.0. Use Query::build instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$params&lt;/b&gt;: Query string parameters.&#10;    int|false &lt;b&gt;$encoding&lt;/b&gt;: Set to false to not encode, PHP_QUERY_RFC3986 to encode using RFC3986, or PHP_QUERY_RFC1738 to encode using RFC1738.;;d0,318;;b0,0;;m0;;e0;;i0;;o;;k;;larray $params;;pint|false $encoding;;p;;x;;x">
</treenode>
<treenode node="choose_handler;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;58;1;61;;;;vpos;;v;;acallable;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    choose_handler(): callable&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Chooses and creates a default handler to use based on the environment.&#10;The returned handler is not wrapped by any default middlewares.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if no viable Handler is available.&#10;&lt;b&gt;deprecated&lt;/b&gt;: choose_handler will be removed in guzzlehttp/guzzle:8.0. Use Utils::chooseHandler instead.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   (\Psr\Http\Message\RequestInterface, array): \GuzzleHttp\Promise\PromiseInterface Returns the best handler for the given system.;;d0,59;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="composerRequire1abd67626b33567d3bb45833fe81e955;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\autoload_real.php;f0;67;1;74;;;;vpos;;v;;a;;r;;d0,68;;b0,0;;m0;;e0;;i0;;o;;k;;lfileIdentifier;;pfile;;p;;x;;x">
</treenode>
<treenode node="copy_to_stream;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;213;1;216;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    copy_to_stream(StreamInterface $source, StreamInterface $dest, $maxLen = -1)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copy the contents of a stream into another stream until the given number&#10;of bytes have been read.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&lt;b&gt;deprecated&lt;/b&gt;: copy_to_stream will be removed in guzzlehttp/psr7:2.0. Use Utils::copyToStream instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$source&lt;/b&gt;: Stream to read from&#10;    StreamInterface &lt;b&gt;$dest&lt;/b&gt;: Stream to write to&#10;    int &lt;b&gt;$maxLen&lt;/b&gt;: Maximum number of bytes to read. Pass -1 to read the entire stream.;;d0,214;;b0,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $source;;pStreamInterface $dest;;pint $maxLen;;p;;x;;x;;x">
</treenode>
<treenode node="copy_to_string;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;195;1;198;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    copy_to_string(StreamInterface $stream, $maxLen = -1)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copy the contents of a stream into a string until the given number of&#10;bytes have been read.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&lt;b&gt;deprecated&lt;/b&gt;: copy_to_string will be removed in guzzlehttp/psr7:2.0. Use Utils::copyToString instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to read&#10;    int &lt;b&gt;$maxLen&lt;/b&gt;: Maximum number of bytes to read. Pass -1 to read the entire stream.;;d0,196;;b0,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pint $maxLen;;p;;x;;x">
</treenode>
<treenode node="coroutine;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;359;1;362;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    coroutine(callable $generatorFn)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new coroutine.&#10;&lt;b&gt;see&lt;/b&gt;: Coroutine&#10;&lt;b&gt;deprecated&lt;/b&gt;: coroutine will be removed in guzzlehttp/promises:2.0. Use Coroutine::of instead.;;d0,360;;b0,0;;m0;;e0;;i0;;o;;k;;lgeneratorFn;;p;;x">
</treenode>
<treenode node="debug_resource;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;42;1;45;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    debug_resource($value = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a debug stream based on the provided variable.&#10;&lt;b&gt;deprecated&lt;/b&gt;: debug_resource will be removed in guzzlehttp/guzzle:8.0. Use Utils::debugResource instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: Optional value;;d0,43;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="default_ca_bundle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;88;1;91;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    default_ca_bundle(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the default cacert bundle for the current system.&#10;First, the openssl.cafile and curl.cainfo php.ini settings are checked.&#10;If those settings are not configured, then the common locations for&#10;bundles found on Red Hat, CentOS, Fedora, Ubuntu, Debian, FreeBSD, OS X&#10;and Windows are checked. If any of these file locations are found on&#10;disk, they will be utilized.&#10;Note: the result of this function is cached for subsequent calls.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if no bundle can be found.&#10;&lt;b&gt;deprecated&lt;/b&gt;: default_ca_bundle will be removed in guzzlehttp/guzzle:8.0. This function is not needed in PHP 5.6+.;;d0,89;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="default_user_agent;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;68;1;71;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    default_user_agent(): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the default User-Agent string to use with Guzzle.&#10;&lt;b&gt;deprecated&lt;/b&gt;: default_user_agent will be removed in guzzlehttp/guzzle:8.0. Use Utils::defaultUserAgent instead.;;d0,69;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="describe_type;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;15;1;18;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    describe_type($input): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug function used to describe the provided value type and class.&#10;&lt;b&gt;deprecated&lt;/b&gt;: describe_type will be removed in guzzlehttp/guzzle:8.0. Use Utils::describeType instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$input&lt;/b&gt;: Any type of variable to describe the type of. This parameter misses a typehint because of that.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns a string containing the type of the variable and if a class is provided, the class name.;;d0,16;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $input;;p;;x">
</treenode>
<treenode node="each;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;259;1;265;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    each(&#10;    $iterable,&#10;    callable $onFulfilled = null,&#10;    callable $onRejected = null&#10;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Given an iterator that yields promises or values, returns a promise that is&#10;fulfilled with a null value when the iterator has been consumed or the&#10;aggregate promise has been fulfilled or rejected.&#10;$onFulfilled is a function that accepts the fulfilled value, iterator index,&#10;and the aggregate promise. The callback can invoke any necessary side&#10;effects and choose to resolve or reject the aggregate if needed.&#10;$onRejected is a function that accepts the rejection reason, iterator index,&#10;and the aggregate promise. The callback can invoke any necessary side&#10;effects and choose to resolve or reject the aggregate if needed.&#10;&lt;b&gt;deprecated&lt;/b&gt;: each will be removed in guzzlehttp/promises:2.0. Use Each::of instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;: Iterator or array to iterate over.&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;&#10;    callable &lt;b&gt;$onRejected&lt;/b&gt;;;d2,263;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;pcallable $onFulfilled;;pcallable $onRejected;;p;;x;;x;;x">
</treenode>
<treenode node="each_limit;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;284;1;291;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    each_limit(&#10;    $iterable,&#10;    $concurrency,&#10;    callable $onFulfilled = null,&#10;    callable $onRejected = null&#10;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Like each, but only allows a certain number of outstanding promises at any&#10;given time.&#10;$concurrency may be an integer or a function that accepts the number of&#10;pending promises and returns a numeric concurrency limit value to allow for&#10;dynamic a concurrency size.&#10;&lt;b&gt;deprecated&lt;/b&gt;: each_limit will be removed in guzzlehttp/promises:2.0. Use Each::ofLimit instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;&#10;    int|callable &lt;b&gt;$concurrency&lt;/b&gt;&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;&#10;    callable &lt;b&gt;$onRejected&lt;/b&gt;;;d2,289;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;pint|callable $concurrency;;pcallable $onFulfilled;;pcallable $onRejected;;p;;x;;x;;x;;x">
</treenode>
<treenode node="each_limit_all;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;306;1;312;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    each_limit_all(&#10;    $iterable,&#10;    $concurrency,&#10;    callable $onFulfilled = null&#10;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Like each_limit, but ensures that no promise in the given $iterable argument&#10;is rejected. If any promise is rejected, then the aggregate promise is&#10;rejected with the encountered rejection.&#10;&lt;b&gt;deprecated&lt;/b&gt;: each_limit_all will be removed in guzzlehttp/promises:2.0. Use Each::ofLimitAll instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$iterable&lt;/b&gt;&#10;    int|callable &lt;b&gt;$concurrency&lt;/b&gt;&#10;    callable &lt;b&gt;$onFulfilled&lt;/b&gt;;;d2,310;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $iterable;;pint|callable $concurrency;;pcallable $onFulfilled;;p;;x;;x;;x">
</treenode>
<treenode node="exception_for;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;81;1;84;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    exception_for($reason)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create an exception for a rejected promise value.&#10;\Exception|\Throwable&#10;&lt;b&gt;deprecated&lt;/b&gt;: exception_for will be removed in guzzlehttp/promises:2.0. Use Create::exceptionFor instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;;;d0,82;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $reason;;p;;x">
</treenode>
<treenode node="flock;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockGlobals.php;f4;27;5;30;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flock($handle, $type)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;experimental&lt;/b&gt;&#10;&lt;b&gt;internal&lt;/b&gt;;;d4,28;;b0,0;;m0;;e0;;i0;;o;;k;;lhandle;;ptype;;p;;x;;x">
</treenode>
<treenode node="fopen;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockGlobals.php;f4;32;5;41;;;;vpos;;v;;a;;r;;d4,33;;b0,0;;m0;;e0;;i0;;o;;k;;lfile;;pmode;;p;;x;;x">
</treenode>
<treenode node="getFileInfo;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\config.php;f0;47;1;63;;;;vpos;;v;;a;;r;;d33,47;;b0,0;;m0;;e0;;i0;;o;;k;;lcloudPath;;p;;x">
</treenode>
<treenode node="get_message_body_summary;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;398;1;401;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get_message_body_summary(MessageInterface $message, $truncateAt = 120)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a short summary of the message body.&#10;Will return `null` if the response is not printable.&#10;&lt;b&gt;deprecated&lt;/b&gt;: get_message_body_summary will be removed in guzzlehttp/psr7:2.0. Use Message::bodySummary instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    MessageInterface &lt;b&gt;$message&lt;/b&gt;: The message to get the body summary&#10;    int &lt;b&gt;$truncateAt&lt;/b&gt;: The maximum allowed size of the summary&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d0,399;;b0,0;;m0;;e0;;i0;;o;;k;;lMessageInterface $message;;pint $truncateAt;;p;;x;;x">
</treenode>
<treenode node="getallheaders;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\ralouphie\getallheaders\src\getallheaders.php;f4;9;5;43;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getallheaders()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get all HTTP header key/values as an associative array for the current request.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   [string] The HTTP header key/value pairs.;;d4,10;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="hash;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;234;1;237;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hash(StreamInterface $stream, $algo, $rawOutput = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Calculate a hash of a stream.&#10;This method reads the entire stream to calculate a rolling hash, based on&#10;PHP&apos;s `hash_init` functions.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException on error.&#10;&lt;b&gt;deprecated&lt;/b&gt;: hash will be removed in guzzlehttp/psr7:2.0. Use Utils::hash instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to calculate the hash for&#10;    string &lt;b&gt;$algo&lt;/b&gt;: Hash algorithm (e.g. md5, crc32, etc)&#10;    bool &lt;b&gt;$rawOutput&lt;/b&gt;: Whether or not to use raw output&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the hash of the stream;;d0,235;;b0,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pstring $algo;;pbool $rawOutput;;p;;x;;x;;x">
</treenode>
<treenode node="headers_from_lines;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;28;1;31;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headers_from_lines(iterable $lines): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses an array of header lines into an associative array of headers.&#10;&lt;b&gt;deprecated&lt;/b&gt;: headers_from_lines will be removed in guzzlehttp/guzzle:8.0. Use Utils::headersFromLines instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    iterable &lt;b&gt;$lines&lt;/b&gt;: Header lines array of strings in the following format: &quot;Name: Value&quot;;;d0,29;;b0,0;;m0;;e0;;i0;;o;;k;;literable $lines;;p;;x">
</treenode>
<treenode node="includeFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\composer\ClassLoader.php;f0;477;1;480;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    includeFile($file)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Scope isolated include.&#10;Prevents access to $this/self from included files.;;d0,478;;b0,0;;m0;;e0;;i0;;o;;k;;lfile;;p;;x">
</treenode>
<treenode node="inspect;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;116;1;119;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    inspect(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Synchronously waits on a promise to resolve and returns an inspection state&#10;array.&#10;Returns a state associative array containing a &quot;state&quot; key mapping to a&#10;valid promise state. If the state of the promise is &quot;fulfilled&quot;, the array&#10;will contain a &quot;value&quot; key mapping to the fulfilled value of the promise. If&#10;the promise is rejected, the array will contain a &quot;reason&quot; key mapping to&#10;the rejection reason of the promise.&#10;&lt;b&gt;deprecated&lt;/b&gt;: inspect will be removed in guzzlehttp/promises:2.0. Use Utils::inspect instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    PromiseInterface &lt;b&gt;$promise&lt;/b&gt;: Promise or value.;;d0,117;;b0,0;;m0;;e0;;i0;;o;;k;;lPromiseInterface $promise;;p;;x">
</treenode>
<treenode node="inspect_all;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;135;1;138;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    inspect_all($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Waits on all of the provided promises, but does not unwrap rejected promises&#10;as thrown exception.&#10;Returns an array of inspection state arrays.&#10;&lt;b&gt;see&lt;/b&gt;: inspect for the inspection state array format.&#10;&lt;b&gt;deprecated&lt;/b&gt;: inspect will be removed in guzzlehttp/promises:2.0. Use Utils::inspectAll instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    PromiseInterface[] &lt;b&gt;$promises&lt;/b&gt;: Traversable of promises to wait upon.;;d0,136;;b0,0;;m0;;e0;;i0;;o;;k;;lPromiseInterface[] $promises;;p;;x">
</treenode>
<treenode node="is_fulfilled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;321;1;324;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    is_fulfilled(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is fulfilled.&#10;&lt;b&gt;deprecated&lt;/b&gt;: is_fulfilled will be removed in guzzlehttp/promises:2.0. Use Is::fulfilled instead.;;d0,322;;b0,0;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
<treenode node="is_host_in_noproxy;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;125;1;128;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    is_host_in_noproxy(string $host, array $noProxyArray): bool&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if the provided host matches any of the no proxy areas.&#10;This method will strip a port from the host if it is present. Each pattern&#10;can be matched with an exact match (e.g., &quot;foo.com&quot; == &quot;foo.com&quot;) or a&#10;partial match: (e.g., &quot;foo.com&quot; == &quot;baz.foo.com&quot; and &quot;.foo.com&quot; ==&#10;&quot;baz.foo.com&quot;, but &quot;.foo.com&quot; != &quot;foo.com&quot;).&#10;Areas are matched in the following cases:&#10;1. &quot;*&quot; (without quotes) always matches any hosts.&#10;2. An exact match.&#10;3. The area starts with &quot;.&quot; and the area is the last part of the host. e.g.&#10;&apos;.mit.edu&apos; will match any host that ends with &apos;.mit.edu&apos;.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception\InvalidArgumentException&#10;&lt;b&gt;deprecated&lt;/b&gt;: is_host_in_noproxy will be removed in guzzlehttp/guzzle:8.0. Use Utils::isHostInNoProxy instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: Host to check against the patterns.&#10;    string[] &lt;b&gt;$noProxyArray&lt;/b&gt;: An array of host patterns.;;d0,126;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $host;;pstring[] $noProxyArray;;p;;x;;x">
</treenode>
<treenode node="is_rejected;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;333;1;336;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    is_rejected(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is rejected.&#10;&lt;b&gt;deprecated&lt;/b&gt;: is_rejected will be removed in guzzlehttp/promises:2.0. Use Is::rejected instead.;;d0,334;;b0,0;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
<treenode node="is_settled;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;345;1;348;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    is_settled(PromiseInterface $promise)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns true if a promise is fulfilled or rejected.&#10;&lt;b&gt;deprecated&lt;/b&gt;: is_settled will be removed in guzzlehttp/promises:2.0. Use Is::settled instead.;;d0,346;;b0,0;;m0;;e0;;i0;;o;;k;;lpromise;;p;;x">
</treenode>
<treenode node="iter_for;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;95;1;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    iter_for($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns an iterator for the given value.&#10;\Iterator&#10;&lt;b&gt;deprecated&lt;/b&gt;: iter_for will be removed in guzzlehttp/promises:2.0. Use Create::iterFor instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;;;d0,96;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="json_decode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;146;1;149;;;;vpos;;v;;aobject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    json_decode(string $json, bool $assoc = false, int $depth = 512, int $options = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper for json_decode that throws when an error occurs.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception\InvalidArgumentException if the JSON cannot be decoded.&#10;&lt;b&gt;link&lt;/b&gt;: https://www.php.net/manual/en/function.json-decode.php&#10;&lt;b&gt;deprecated&lt;/b&gt;: json_decode will be removed in guzzlehttp/guzzle:8.0. Use Utils::jsonDecode instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$json&lt;/b&gt;: JSON data to parse&#10;    bool &lt;b&gt;$assoc&lt;/b&gt;: When true, returned objects will be converted into associative arrays.&#10;    int &lt;b&gt;$depth&lt;/b&gt;: User specified recursion depth.&#10;    int &lt;b&gt;$options&lt;/b&gt;: Bitmask of JSON decode options.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |array|string|int|float|bool|null;;d0,147;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $json;;pbool $assoc;;pint $depth;;pint $options;;p;;x;;x;;x;;x">
</treenode>
<treenode node="json_encode;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;163;1;166;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    json_encode($value, int $options = 0, int $depth = 512): string&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Wrapper for JSON encoding that throws when an error occurs.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception\InvalidArgumentException if the JSON cannot be encoded.&#10;&lt;b&gt;link&lt;/b&gt;: https://www.php.net/manual/en/function.json-encode.php&#10;&lt;b&gt;deprecated&lt;/b&gt;: json_encode will be removed in guzzlehttp/guzzle:8.0. Use Utils::jsonEncode instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The value being encoded&#10;    int &lt;b&gt;$options&lt;/b&gt;: JSON encode option bitmask&#10;    int &lt;b&gt;$depth&lt;/b&gt;: Set the maximum depth. Must be greater than zero.;;d0,164;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;pint $options;;pint $depth;;p;;x;;x;;x">
</treenode>
<treenode node="listFiles;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\config.php;f0;65;1;91;;;;vpos;;v;;a;;r;;d21,65;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="mimetype_from_extension;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;346;1;349;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mimetype_from_extension($extension)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Maps a file extensions to a mimetype.&#10;&lt;b&gt;link&lt;/b&gt;: http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types&#10;&lt;b&gt;deprecated&lt;/b&gt;: mimetype_from_extension will be removed in guzzlehttp/psr7:2.0. Use MimeType::fromExtension instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$extension&lt;/b&gt;: string The file extension.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d0,347;;b0,0;;m0;;e0;;i0;;o;;k;;l $extension;;p;;x">
</treenode>
<treenode node="mimetype_from_filename;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;331;1;334;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mimetype_from_filename($filename)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines the mimetype of a file by looking at its extension.&#10;&lt;b&gt;deprecated&lt;/b&gt;: mimetype_from_filename will be removed in guzzlehttp/psr7:2.0. Use MimeType::fromFilename instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   |null;;d0,332;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $filename;;p;;x">
</treenode>
<treenode node="modify_request;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;140;1;143;;;;vpos;;v;;aRequestInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    modify_request(RequestInterface $request, array $changes)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clone and modify a request with the given changes.&#10;This method is useful for reducing the number of clones needed to mutate a&#10;message.&#10;The changes can be one of:&#10;- method: (string) Changes the HTTP method.&#10;- set_headers: (array) Sets the given headers.&#10;- remove_headers: (array) Remove the given headers.&#10;- body: (mixed) Sets the given body.&#10;- uri: (UriInterface) Set the URI.&#10;- query: (string) Set the query string value of the URI.&#10;- version: (string) Set the protocol version.&#10;&lt;b&gt;deprecated&lt;/b&gt;: modify_request will be removed in guzzlehttp/psr7:2.0. Use Utils::modifyRequest instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RequestInterface &lt;b&gt;$request&lt;/b&gt;: Request to clone and modify.&#10;    array &lt;b&gt;$changes&lt;/b&gt;: Changes to apply.;;d0,141;;b0,0;;m0;;e0;;i0;;o;;k;;lRequestInterface $request;;parray $changes;;p;;x;;x">
</treenode>
<treenode node="normalize_header;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;113;1;116;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize_header($header)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts an array of header values that may contain comma separated&#10;headers into an array of headers with no comma separated values.&#10;&lt;b&gt;deprecated&lt;/b&gt;: normalize_header will be removed in guzzlehttp/psr7:2.0. Use Header::normalize instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$header&lt;/b&gt;: Header to normalize.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the normalized header field values.;;d0,114;;b0,0;;m0;;e0;;i0;;o;;k;;lstring|array $header;;p;;x">
</treenode>
<treenode node="normalize_header_keys;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\guzzle\src\functions.php;f0;99;1;102;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalize_header_keys(array $headers): array&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates an associative array of lowercase header names to the actual&#10;header casing.&#10;&lt;b&gt;deprecated&lt;/b&gt;: normalize_header_keys will be removed in guzzlehttp/guzzle:8.0. Use Utils::normalizeHeaderKeys instead.;;d0,100;;b0,0;;m0;;e0;;i0;;o;;k;;lheaders;;p;;x">
</treenode>
<treenode node="oauth2client_php_autoload;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\auth\autoload.php;f0;17;1;31;;;;vpos;;v;;a;;r;;d0,18;;b0,0;;m0;;e0;;i0;;o;;k;;lclassName;;p;;x">
</treenode>
<treenode node="parse_header;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;98;1;101;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse_header($header)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse an array of header values containing &quot;;s&quot; separated data into an&#10;array of associative arrays representing the header key value pair data&#10;of the header. When a parameter does not contain a value, but just&#10;contains a key, this function will inject a key with a &apos;&apos; string value.&#10;&lt;b&gt;deprecated&lt;/b&gt;: parse_header will be removed in guzzlehttp/psr7:2.0. Use Header::parse instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|array &lt;b&gt;$header&lt;/b&gt;: Header to parse into components.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Returns the parsed header values.;;d0,99;;b0,0;;m0;;e0;;i0;;o;;k;;lstring|array $header;;p;;x">
</treenode>
<treenode node="parse_query;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;297;1;300;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse_query($str, $urlEncoding = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse a query string into an associative array.&#10;If multiple values are found for the same key, the value of that key value&#10;pair will become an array. This function does not parse nested PHP style&#10;arrays into an associative array (e.g., `foo[a]=1&amp;foo[b]=2` will be parsed&#10;into `[&apos;foo[a]&apos; =&gt; &apos;1&apos;, &apos;foo[b]&apos; =&gt; &apos;2&apos;])`.&#10;&lt;b&gt;deprecated&lt;/b&gt;: parse_query will be removed in guzzlehttp/psr7:2.0. Use Query::parse instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: Query string to parse&#10;    int|bool &lt;b&gt;$urlEncoding&lt;/b&gt;: How the query string is encoded;;d0,298;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $str;;pint|bool $urlEncoding;;p;;x;;x">
</treenode>
<treenode node="parse_request;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;263;1;266;;;;vpos;;v;;aRequest;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse_request($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses a request message string into a request object.&#10;&lt;b&gt;deprecated&lt;/b&gt;: parse_request will be removed in guzzlehttp/psr7:2.0. Use Message::parseRequest instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: Request message string.;;d0,264;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="parse_response;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;277;1;280;;;;vpos;;v;;aResponse;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parse_response($message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parses a response message string into a response object.&#10;&lt;b&gt;deprecated&lt;/b&gt;: parse_response will be removed in guzzlehttp/psr7:2.0. Use Message::parseResponse instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: Response message string.;;d0,278;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $message;;p;;x">
</treenode>
<treenode node="promise_for;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;52;1;55;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    promise_for($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a promise for a value if the value is not a promise.&#10;&lt;b&gt;deprecated&lt;/b&gt;: promise_for will be removed in guzzlehttp/promises:2.0. Use Create::promiseFor instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: Promise or value.;;d0,53;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $value;;p;;x">
</treenode>
<treenode node="queue;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;23;1;26;;;;vpos;;v;;aTaskQueueInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    queue(TaskQueueInterface $assign = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the global task queue used for promise resolution.&#10;This task queue MUST be run in an event loop in order for promises to be&#10;settled asynchronously. It will be automatically run when synchronously&#10;waiting on a promise.&#10;&lt;code&gt;&#10;while ($eventLoop-&gt;isRunning()) {&#10;GuzzleHttp\Promise\queue()-&gt;run();s&#10;}&#10;&lt;/code&gt;&#10;&lt;b&gt;deprecated&lt;/b&gt;: queue will be removed in guzzlehttp/promises:2.0. Use Utils::queue instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    TaskQueueInterface &lt;b&gt;$assign&lt;/b&gt;: Optionally specify a new queue instance.;;d0,24;;b0,0;;m0;;e0;;i0;;o;;k;;lTaskQueueInterface $assign;;p;;x">
</treenode>
<treenode node="readline;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;249;1;252;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    readline(StreamInterface $stream, $maxLength = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read a line from the stream up to the maximum allowed buffer length.&#10;&lt;b&gt;deprecated&lt;/b&gt;: readline will be removed in guzzlehttp/psr7:2.0. Use Utils::readLine instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    StreamInterface &lt;b&gt;$stream&lt;/b&gt;: Stream to read from&#10;    int|null &lt;b&gt;$maxLength&lt;/b&gt;: Maximum buffer length;;d0,250;;b0,0;;m0;;e0;;i0;;o;;k;;lStreamInterface $stream;;pint|null $maxLength;;p;;x;;x">
</treenode>
<treenode node="rejection_for;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;67;1;70;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rejection_for($reason)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a rejected promise for a reason if the reason is not a promise. If&#10;the provided reason is a promise, then it is returned as-is.&#10;&lt;b&gt;deprecated&lt;/b&gt;: rejection_for will be removed in guzzlehttp/promises:2.0. Use Create::rejectionFor instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$reason&lt;/b&gt;: Promise or reason.;;d0,68;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $reason;;p;;x">
</treenode>
<treenode node="rewind_body;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;157;1;160;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rewind_body(MessageInterface $message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attempts to rewind a message body and throws an exception on failure.&#10;The body of the message will only be rewound if a call to `tell()` returns a&#10;value other than `0`.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException&#10;&lt;b&gt;deprecated&lt;/b&gt;: rewind_body will be removed in guzzlehttp/psr7:2.0. Use Message::rewindBody instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    MessageInterface &lt;b&gt;$message&lt;/b&gt;: Message to rewind;;d0,158;;b0,0;;m0;;e0;;i0;;o;;k;;lMessageInterface $message;;p;;x">
</treenode>
<treenode node="sem_acquire;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockGlobals.php;f4;43;5;46;;;;vpos;;v;;a;;r;;d4,44;;b0,0;;m0;;e0;;i0;;o;;k;;lid;;p;;x">
</treenode>
<treenode node="sem_get;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockGlobals.php;f4;53;5;62;;;;vpos;;v;;a;;r;;d4,54;;b0,0;;m0;;e0;;i0;;o;;k;;lkey;;p;;x">
</treenode>
<treenode node="sem_release;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\cloud-core\src\Testing\Lock\MockGlobals.php;f4;48;5;51;;;;vpos;;v;;a;;r;;d4,49;;b0,0;;m0;;e0;;i0;;o;;k;;lid;;p;;x">
</treenode>
<treenode node="settle;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;233;1;236;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    settle($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a promise that is fulfilled when all of the provided promises have&#10;been fulfilled or rejected.&#10;The returned promise is fulfilled with an array of inspection state arrays.&#10;&lt;b&gt;see&lt;/b&gt;: inspect for the inspection state array format.&#10;&lt;b&gt;deprecated&lt;/b&gt;: settle will be removed in guzzlehttp/promises:2.0. Use Utils::settle instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.;;d0,234;;b0,0;;m0;;e0;;i0;;o;;k;;lmixed $promises;;p;;x">
</treenode>
<treenode node="some;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;199;1;202;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    some($count, $promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initiate a competitive race between multiple promises or values (values will&#10;become immediately fulfilled promises).&#10;When count amount of promises have been fulfilled, the returned promise is&#10;fulfilled with an array that contains the fulfillment values of the winners&#10;in order of resolution.&#10;This promise is rejected with a {&#10;&lt;b&gt;see&lt;/b&gt;: AggregateException} if the number of&#10;fulfilled promises is less than the desired $count.&#10;&lt;b&gt;deprecated&lt;/b&gt;: some will be removed in guzzlehttp/promises:2.0. Use Utils::some instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$count&lt;/b&gt;: Total number of promises.&#10;    mixed &lt;b&gt;$promises&lt;/b&gt;: Promises or values.;;d0,200;;b0,0;;m0;;e0;;i0;;o;;k;;lint $count;;pmixed $promises;;p;;x;;x">
</treenode>
<treenode node="str;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;18;1;21;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    str(MessageInterface $message)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the string representation of an HTTP message.&#10;&lt;b&gt;deprecated&lt;/b&gt;: str will be removed in guzzlehttp/psr7:2.0. Use Message::toString instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    MessageInterface &lt;b&gt;$message&lt;/b&gt;: Message to convert to a string.;;d0,19;;b0,0;;m0;;e0;;i0;;o;;k;;lMessageInterface $message;;p;;x">
</treenode>
<treenode node="stream_for;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;81;1;84;;;;vpos;;v;;aStreamInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    stream_for($resource = &apos;&apos;, array $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a new stream based on the input type.&#10;Options is an associative array that can contain the following keys:&#10;- metadata: Array of custom metadata.&#10;- size: Size of the stream.&#10;This method accepts the following `$resource` types:&#10;- `Psr\Http\Message\StreamInterface`: Returns the value as-is.&#10;- `string`: Creates a stream object that uses the given string as the contents.&#10;- `resource`: Creates a stream object that wraps the given PHP stream resource.&#10;- `Iterator`: If the provided value implements `Iterator`, then a read-only&#10;stream object will be created that wraps the given iterable. Each time the&#10;stream is read from, data from the iterator will fill a buffer and will be&#10;continuously called until the buffer is equal to the requested read size.&#10;Subsequent read calls will first read from the buffer and then call `next`&#10;on the underlying iterator until it is exhausted.&#10;- `object` with `__toString()`: If the object has the `__toString()` method,&#10;the object will be cast to a string and then a stream will be returned that&#10;uses the string value.&#10;- `NULL`: When `null` is passed, an empty stream object is returned.&#10;- `callable` When a callable is passed, a read-only stream object will be&#10;created that invokes the given callable. The callable is invoked with the&#10;number of suggested bytes to read. The callable can return any number of&#10;bytes, but MUST return `false` when there is no more data to return. The&#10;stream object that wraps the callable will invoke the callable until the&#10;number of requested bytes are available. Any additional bytes will be&#10;buffered and used in subsequent reads.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException if the $resource arg is not valid.&#10;&lt;b&gt;deprecated&lt;/b&gt;: stream_for will be removed in guzzlehttp/psr7:2.0. Use Utils::streamFor instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    resource|string|null|int|float|bool|StreamInterface|callable|\Iterator &lt;b&gt;$resource&lt;/b&gt;: Entity body data&#10;    array &lt;b&gt;$options&lt;/b&gt;: Additional options;;d0,82;;b0,0;;m0;;e0;;i0;;o;;k;;lresource|string|null|int|float|bool|StreamInterface|callable|\Iterator $resource;;parray $options;;p;;x;;x">
</treenode>
<treenode node="task;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;38;1;41;;;;vpos;;v;;aPromiseInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    task(callable $task)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds a function to run in the task queue when it is next `run()` and returns&#10;a promise that is fulfilled or rejected with the result.&#10;&lt;b&gt;deprecated&lt;/b&gt;: task will be removed in guzzlehttp/promises:2.0. Use Utils::task instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    callable &lt;b&gt;$task&lt;/b&gt;: Task function to run.;;d0,39;;b0,0;;m0;;e0;;i0;;o;;k;;lcallable $task;;p;;x">
</treenode>
<treenode node="test;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\google\crc32\crc32_benchmark.php;f0;65;1;100;;;;vpos;;v;;a;;r;;d0,66;;b0,0;;m0;;e0;;i0;;o;;k;;lcrc;;pchunk_size;;p;;x;;x">
</treenode>
<treenode node="try_fopen;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;177;1;180;;;;vpos;;v;;aresource;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    try_fopen($filename, $mode)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Safely opens a PHP stream resource using a filename.&#10;When fopen fails, PHP normally raises a warning. This function adds an&#10;error handler that checks for errors and throws an exception instead.&#10;&lt;b&gt;throws&lt;/b&gt;: \RuntimeException if the file cannot be opened&#10;&lt;b&gt;deprecated&lt;/b&gt;: try_fopen will be removed in guzzlehttp/psr7:2.0. Use Utils::tryFopen instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;: File to open&#10;    string &lt;b&gt;$mode&lt;/b&gt;: Mode used to open the file;;d0,178;;b0,0;;m0;;e0;;i0;;o;;k;;lstring $filename;;pstring $mode;;p;;x;;x">
</treenode>
<treenode node="unwrap;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\promises\src\functions.php;f0;156;1;159;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unwrap($promises)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Waits on all of the provided promises and returns the fulfilled values.&#10;Returns an array that contains the value of each promise (in the same order&#10;the promises were provided). An exception is thrown if any of the promises&#10;are rejected.&#10;&lt;b&gt;throws&lt;/b&gt;: \Exception on error&#10;&lt;b&gt;throws&lt;/b&gt;: \Throwable on error in PHP &gt;=7&#10;&lt;b&gt;deprecated&lt;/b&gt;: unwrap will be removed in guzzlehttp/promises:2.0. Use Utils::unwrap instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    iterable&lt;PromiseInterface&gt; &lt;b&gt;$promises&lt;/b&gt;: Iterable of PromiseInterface objects to wait on.;;d0,157;;b0,0;;m0;;e0;;i0;;o;;k;;literable&lt;PromiseInterface&gt; $promises;;p;;x">
</treenode>
<treenode node="uploadFile;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\config.php;f0;24;1;45;;;;vpos;;v;;a;;r;;d46,24;;b0,0;;m0;;e0;;i0;;o;;k;;lfileContent;;pcloudPath;;p;;x;;x">
</treenode>
<treenode node="uri_for;PHP:Function Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\vendor\guzzlehttp\psr7\src\functions.php;f0;38;1;41;;;;vpos;;v;;aUriInterface;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    uri_for($uri)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a UriInterface for the given value.&#10;This function accepts a string or UriInterface and returns a&#10;UriInterface for the given value. If the value is already a&#10;UriInterface, it is returned as-is.&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&lt;b&gt;deprecated&lt;/b&gt;: uri_for will be removed in guzzlehttp/psr7:2.0. Use Utils::uriFor instead.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|UriInterface &lt;b&gt;$uri&lt;/b&gt;;;d0,39;;b0,0;;m0;;e0;;i0;;o;;k;;lstring|UriInterface $uri;;p;;x">
</treenode>
</phptree>
<jstree>
<treenode node="$fileUpload;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;70;19;70;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="$formUpload;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;68;19;68;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="$imageGallery;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;67;21;67;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="$json;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;72;13;72;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="$responseMessage;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;71;24;71;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="$uploadingMessage;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;69;25;69;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fileUpload;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f40;41;50;41;;;;vposHTMLInputElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="fileUploadForm;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f12;40;26;40;;;;vposHTMLFormElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush-collapseOne;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f15;53;32;53;;;;vposHTMLDivElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="flush-headingOne;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f39;48;55;48;;;;vposHTMLHeadingElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="images-gallery;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f25;60;39;60;;;;vposHTMLDivElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="json;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f45;54;49;54;;;;vposHTMLPreElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="update_images;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;74;21;74;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="uploadingmsg;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f14;43;26;43;;;;vposHTMLSpanElement;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e0;;i0;;o;;k;;l">
</treenode>
<treenode node="url;JS:JS Var Name;C:\xampp\htdocs\Base64_Google_Cloud\bucket-upload-example-master\index.php;f8;75;11;75;;;;vposString;;v;;a;;r;;d-1,-1;;b0,3;;m0;;e0;;i0;;o;;k;;l">
</treenode>
</jstree>
<pythontree>
</pythontree>
</codestructure>